
freertos-with-logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007760  08007760  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007760  08007760  00017760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007768  08007768  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007768  08007768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c4c  20000078  080077e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cc4  080077e8  00021cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ce8  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be4  00000000  00000000  00038dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  0003c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef9  00000000  00000000  0003dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000054ae  00000000  00000000  0003ec41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019027  00000000  00000000  000440ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f48fd  00000000  00000000  0005d116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005714  00000000  00000000  00151a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00157128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800767c 	.word	0x0800767c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800767c 	.word	0x0800767c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fc05 	bl	8000d1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f81a 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8de 	bl	80006d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800051c:	f000 f87e 	bl	800061c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000520:	f000 f8ac 	bl	800067c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000524:	f003 fcdc 	bl	8003ee0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <main+0x34>)
 800052a:	2100      	movs	r1, #0
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x38>)
 800052e:	f003 fd41 	bl	8003fb4 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <main+0x3c>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f003 fd06 	bl	8003f48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x30>
 800053e:	bf00      	nop
 8000540:	08007724 	.word	0x08007724
 8000544:	080008a5 	.word	0x080008a5
 8000548:	20000624 	.word	0x20000624

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f006 fdab 	bl	80070b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000570:	f001 f908 	bl	8001784 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <SystemClock_Config+0xc8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a26      	ldr	r2, [pc, #152]	; (8000614 <SystemClock_Config+0xc8>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <SystemClock_Config+0xc8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000594:	4a20      	ldr	r2, [pc, #128]	; (8000618 <SystemClock_Config+0xcc>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <SystemClock_Config+0xcc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005c0:	2348      	movs	r3, #72	; 0x48
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c8:	2303      	movs	r3, #3
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f8e7 	bl	80017a4 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005dc:	f000 f982 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2102      	movs	r1, #2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fb75 	bl	8001cec <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000608:	f000 f96c 	bl	80008e4 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_USART3_UART_Init+0x58>)
 8000622:	4a15      	ldr	r2, [pc, #84]	; (8000678 <MX_USART3_UART_Init+0x5c>)
 8000624:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_USART3_UART_Init+0x58>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART3_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_USART3_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART3_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART3_UART_Init+0x58>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART3_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART3_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART3_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART3_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART3_UART_Init+0x58>)
 8000660:	f002 f95a 	bl	8002918 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800066a:	f000 f93b 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000094 	.word	0x20000094
 8000678:	40004800 	.word	0x40004800

0800067c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000682:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000686:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800068a:	2206      	movs	r2, #6
 800068c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000690:	2202      	movs	r2, #2
 8000692:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800069c:	2202      	movs	r2, #2
 800069e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c0:	f000 ff17 	bl	80014f2 <HAL_PCD_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f90b 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000011c 	.word	0x2000011c

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b68      	ldr	r3, [pc, #416]	; (8000890 <MX_GPIO_Init+0x1b8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a67      	ldr	r2, [pc, #412]	; (8000890 <MX_GPIO_Init+0x1b8>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b65      	ldr	r3, [pc, #404]	; (8000890 <MX_GPIO_Init+0x1b8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	4b62      	ldr	r3, [pc, #392]	; (8000890 <MX_GPIO_Init+0x1b8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a61      	ldr	r2, [pc, #388]	; (8000890 <MX_GPIO_Init+0x1b8>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b5f      	ldr	r3, [pc, #380]	; (8000890 <MX_GPIO_Init+0x1b8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b5c      	ldr	r3, [pc, #368]	; (8000890 <MX_GPIO_Init+0x1b8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a5b      	ldr	r2, [pc, #364]	; (8000890 <MX_GPIO_Init+0x1b8>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b59      	ldr	r3, [pc, #356]	; (8000890 <MX_GPIO_Init+0x1b8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b56      	ldr	r3, [pc, #344]	; (8000890 <MX_GPIO_Init+0x1b8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a55      	ldr	r2, [pc, #340]	; (8000890 <MX_GPIO_Init+0x1b8>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b53      	ldr	r3, [pc, #332]	; (8000890 <MX_GPIO_Init+0x1b8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	4b50      	ldr	r3, [pc, #320]	; (8000890 <MX_GPIO_Init+0x1b8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a4f      	ldr	r2, [pc, #316]	; (8000890 <MX_GPIO_Init+0x1b8>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b4d      	ldr	r3, [pc, #308]	; (8000890 <MX_GPIO_Init+0x1b8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000766:	4b4a      	ldr	r3, [pc, #296]	; (8000890 <MX_GPIO_Init+0x1b8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a49      	ldr	r2, [pc, #292]	; (8000890 <MX_GPIO_Init+0x1b8>)
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b47      	ldr	r3, [pc, #284]	; (8000890 <MX_GPIO_Init+0x1b8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f244 0181 	movw	r1, #16513	; 0x4081
 8000784:	4843      	ldr	r0, [pc, #268]	; (8000894 <MX_GPIO_Init+0x1bc>)
 8000786:	f000 fe9b 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2140      	movs	r1, #64	; 0x40
 800078e:	4842      	ldr	r0, [pc, #264]	; (8000898 <MX_GPIO_Init+0x1c0>)
 8000790:	f000 fe96 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	483c      	ldr	r0, [pc, #240]	; (800089c <MX_GPIO_Init+0x1c4>)
 80007ac:	f000 fcdc 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007b0:	2332      	movs	r3, #50	; 0x32
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c0:	230b      	movs	r3, #11
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4834      	ldr	r0, [pc, #208]	; (800089c <MX_GPIO_Init+0x1c4>)
 80007cc:	f000 fccc 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007d0:	2386      	movs	r3, #134	; 0x86
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e0:	230b      	movs	r3, #11
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	482d      	ldr	r0, [pc, #180]	; (80008a0 <MX_GPIO_Init+0x1c8>)
 80007ec:	f000 fcbc 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4822      	ldr	r0, [pc, #136]	; (8000894 <MX_GPIO_Init+0x1bc>)
 800080a:	f000 fcad 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	481a      	ldr	r0, [pc, #104]	; (8000894 <MX_GPIO_Init+0x1bc>)
 800082c:	f000 fc9c 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000830:	2340      	movs	r3, #64	; 0x40
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4814      	ldr	r0, [pc, #80]	; (8000898 <MX_GPIO_Init+0x1c0>)
 8000848:	f000 fc8e 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	480e      	ldr	r0, [pc, #56]	; (8000898 <MX_GPIO_Init+0x1c0>)
 8000860:	f000 fc82 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000864:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000876:	230b      	movs	r3, #11
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0x1c0>)
 8000882:	f000 fc71 	bl	8001168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	; 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020400 	.word	0x40020400
 8000898:	40021800 	.word	0x40021800
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020000 	.word	0x40020000

080008a4 <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */


void StartDefaultTask(void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  vTaskSuspendAll();
 80008ac:	f004 fdf6 	bl	800549c <vTaskSuspendAll>
  rtg_init();
 80008b0:	f006 f934 	bl	8006b1c <rtg_init>
  vTaskPrioritySet(xTask1_handle, TASK1_PRIO);
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <StartDefaultTask+0x3c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2102      	movs	r1, #2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 fcc6 	bl	800524c <vTaskPrioritySet>
  vTaskPrioritySet(xTask1_handle, TASK2_PRIO);
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <StartDefaultTask+0x3c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2101      	movs	r1, #1
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 fcc0 	bl	800524c <vTaskPrioritySet>
  xTaskResumeAll();
 80008cc:	f004 fdf4 	bl	80054b8 <xTaskResumeAll>
  vTaskDelete(NULL);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f004 fc09 	bl	80050e8 <vTaskDelete>


  /* USER CODE END 5 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20001368 	.word	0x20001368

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_MspInit+0x4c>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_MspInit+0x4c>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	210f      	movs	r1, #15
 800092a:	f06f 0001 	mvn.w	r0, #1
 800092e:	f000 fb52 	bl	8000fd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0aa      	sub	sp, #168	; 0xa8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	2284      	movs	r2, #132	; 0x84
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f006 fba8 	bl	80070b6 <memset>
  if(huart->Instance==USART3)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a26      	ldr	r2, [pc, #152]	; (8000a04 <HAL_UART_MspInit+0xc4>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d144      	bne.n	80009fa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000974:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000976:	2300      	movs	r3, #0
 8000978:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fbda 	bl	8002138 <HAL_RCCEx_PeriphCLKConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800098a:	f7ff ffab 	bl	80008e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <HAL_UART_MspInit+0xc8>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <HAL_UART_MspInit+0xc8>)
 8000994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_UART_MspInit+0xc8>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0xc8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0xc8>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_UART_MspInit+0xc8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d8:	2307      	movs	r3, #7
 80009da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009e2:	4619      	mov	r1, r3
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <HAL_UART_MspInit+0xcc>)
 80009e6:	f000 fbbf 	bl	8001168 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2105      	movs	r1, #5
 80009ee:	2027      	movs	r0, #39	; 0x27
 80009f0:	f000 faf1 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009f4:	2027      	movs	r0, #39	; 0x27
 80009f6:	f000 fb0a 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	37a8      	adds	r7, #168	; 0xa8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40004800 	.word	0x40004800
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0ac      	sub	sp, #176	; 0xb0
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a28:	f107 0318 	add.w	r3, r7, #24
 8000a2c:	2284      	movs	r2, #132	; 0x84
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f006 fb40 	bl	80070b6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a3e:	d159      	bne.n	8000af4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fb71 	bl	8002138 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a5c:	f7ff ff42 	bl	80008e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <HAL_PCD_MspInit+0xec>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a25      	ldr	r2, [pc, #148]	; (8000afc <HAL_PCD_MspInit+0xec>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <HAL_PCD_MspInit+0xec>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a78:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a92:	230a      	movs	r3, #10
 8000a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4818      	ldr	r0, [pc, #96]	; (8000b00 <HAL_PCD_MspInit+0xf0>)
 8000aa0:	f000 fb62 	bl	8001168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000abc:	4619      	mov	r1, r3
 8000abe:	4810      	ldr	r0, [pc, #64]	; (8000b00 <HAL_PCD_MspInit+0xf0>)
 8000ac0:	f000 fb52 	bl	8001168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_PCD_MspInit+0xec>)
 8000ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <HAL_PCD_MspInit+0xec>)
 8000aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ace:	6353      	str	r3, [r2, #52]	; 0x34
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_PCD_MspInit+0xec>)
 8000ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <HAL_PCD_MspInit+0xec>)
 8000ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_PCD_MspInit+0xec>)
 8000ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <HAL_PCD_MspInit+0xec>)
 8000aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	37b0      	adds	r7, #176	; 0xb0
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f930 	bl	8000d98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b38:	f005 f944 	bl	8005dc4 <xTaskGetSchedulerState>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d001      	beq.n	8000b46 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b42:	f005 ff31 	bl	80069a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <USART3_IRQHandler+0x10>)
 8000b52:	f001 ff2f 	bl	80029b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000094 	.word	0x20000094

08000b60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e00a      	b.n	8000b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b72:	f3af 8000 	nop.w
 8000b76:	4601      	mov	r1, r0
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	b2ca      	uxtb	r2, r1
 8000b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf0      	blt.n	8000b72 <_read+0x12>
  }

  return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e009      	b.n	8000bc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf1      	blt.n	8000bac <_write+0x12>
  }
  return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_close>:

int _close(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfa:	605a      	str	r2, [r3, #4]
  return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_isatty>:

int _isatty(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f006 fa82 	bl	8007174 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20050000 	.word	0x20050000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	20000628 	.word	0x20000628
 8000ca4:	20001cc8 	.word	0x20001cc8

08000ca8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd2:	490e      	ldr	r1, [pc, #56]	; (8000d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce8:	4c0b      	ldr	r4, [pc, #44]	; (8000d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cf6:	f7ff ffd7 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f006 fa41 	bl	8007180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfe:	f7ff fc05 	bl	800050c <main>
  bx  lr    
 8000d02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d10:	08007770 	.word	0x08007770
  ldr r2, =_sbss
 8000d14:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d18:	20001cc4 	.word	0x20001cc4

08000d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC_IRQHandler>

08000d1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f94c 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d28:	200f      	movs	r0, #15
 8000d2a:	f000 f805 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2e:	f7ff fddf 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f967 	bl	800102a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	2000062c 	.word	0x2000062c

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000062c 	.word	0x2000062c

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <__NVIC_SetPriorityGrouping+0x40>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x40>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00
 8000e64:	05fa0000 	.word	0x05fa0000

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff feb6 	bl	8000dc0 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d008      	beq.n	8001074 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e052      	b.n	800111a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0216 	bic.w	r2, r2, #22
 8001082:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	695a      	ldr	r2, [r3, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001092:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <HAL_DMA_Abort+0x62>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0208 	bic.w	r2, r2, #8
 80010b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0201 	bic.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c4:	e013      	b.n	80010ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010c6:	f7ff fe7b 	bl	8000dc0 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	d90c      	bls.n	80010ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2220      	movs	r2, #32
 80010d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2203      	movs	r2, #3
 80010de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e015      	b.n	800111a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e4      	bne.n	80010c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001100:	223f      	movs	r2, #63	; 0x3f
 8001102:	409a      	lsls	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d004      	beq.n	8001140 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e00c      	b.n	800115a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2205      	movs	r2, #5
 8001144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e175      	b.n	8001474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8164 	bne.w	800146e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x56>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80be 	beq.w	800146e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b66      	ldr	r3, [pc, #408]	; (800148c <HAL_GPIO_Init+0x324>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a65      	ldr	r2, [pc, #404]	; (800148c <HAL_GPIO_Init+0x324>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_GPIO_Init+0x324>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800130a:	4a61      	ldr	r2, [pc, #388]	; (8001490 <HAL_GPIO_Init+0x328>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a58      	ldr	r2, [pc, #352]	; (8001494 <HAL_GPIO_Init+0x32c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d037      	beq.n	80013a6 <HAL_GPIO_Init+0x23e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a57      	ldr	r2, [pc, #348]	; (8001498 <HAL_GPIO_Init+0x330>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d031      	beq.n	80013a2 <HAL_GPIO_Init+0x23a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a56      	ldr	r2, [pc, #344]	; (800149c <HAL_GPIO_Init+0x334>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d02b      	beq.n	800139e <HAL_GPIO_Init+0x236>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a55      	ldr	r2, [pc, #340]	; (80014a0 <HAL_GPIO_Init+0x338>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x232>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a54      	ldr	r2, [pc, #336]	; (80014a4 <HAL_GPIO_Init+0x33c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x22e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a53      	ldr	r2, [pc, #332]	; (80014a8 <HAL_GPIO_Init+0x340>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x22a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a52      	ldr	r2, [pc, #328]	; (80014ac <HAL_GPIO_Init+0x344>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x226>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a51      	ldr	r2, [pc, #324]	; (80014b0 <HAL_GPIO_Init+0x348>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x222>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a50      	ldr	r2, [pc, #320]	; (80014b4 <HAL_GPIO_Init+0x34c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x21e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4f      	ldr	r2, [pc, #316]	; (80014b8 <HAL_GPIO_Init+0x350>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x21a>
 800137e:	2309      	movs	r3, #9
 8001380:	e012      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001382:	230a      	movs	r3, #10
 8001384:	e010      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001386:	2308      	movs	r3, #8
 8001388:	e00e      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138a:	2307      	movs	r3, #7
 800138c:	e00c      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138e:	2306      	movs	r3, #6
 8001390:	e00a      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001392:	2305      	movs	r3, #5
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001396:	2304      	movs	r3, #4
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a6:	2300      	movs	r3, #0
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013b8:	4935      	ldr	r1, [pc, #212]	; (8001490 <HAL_GPIO_Init+0x328>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <HAL_GPIO_Init+0x354>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ea:	4a34      	ldr	r2, [pc, #208]	; (80014bc <HAL_GPIO_Init+0x354>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f0:	4b32      	ldr	r3, [pc, #200]	; (80014bc <HAL_GPIO_Init+0x354>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001414:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_GPIO_Init+0x354>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <HAL_GPIO_Init+0x354>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <HAL_GPIO_Init+0x354>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_GPIO_Init+0x354>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_GPIO_Init+0x354>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f67f ae86 	bls.w	8001188 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40013800 	.word	0x40013800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40021400 	.word	0x40021400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40021c00 	.word	0x40021c00
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40022400 	.word	0x40022400
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	619a      	str	r2, [r3, #24]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f4:	b08f      	sub	sp, #60	; 0x3c
 80014f6:	af0a      	add	r7, sp, #40	; 0x28
 80014f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e116      	b.n	8001732 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fa76 	bl	8000a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2203      	movs	r2, #3
 8001528:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fa28 	bl	8003998 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	687e      	ldr	r6, [r7, #4]
 8001550:	466d      	mov	r5, sp
 8001552:	f106 0410 	add.w	r4, r6, #16
 8001556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001562:	e885 0003 	stmia.w	r5, {r0, r1}
 8001566:	1d33      	adds	r3, r6, #4
 8001568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f002 f9bc 	bl	80038e8 <USB_CoreInit>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0d7      	b.n	8001732 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fa16 	bl	80039ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e04a      	b.n	800162a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	333d      	adds	r3, #61	; 0x3d
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	333c      	adds	r3, #60	; 0x3c
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	b298      	uxth	r0, r3
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3344      	adds	r3, #68	; 0x44
 80015d0:	4602      	mov	r2, r0
 80015d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	3340      	adds	r3, #64	; 0x40
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3348      	adds	r3, #72	; 0x48
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	334c      	adds	r3, #76	; 0x4c
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4413      	add	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	3354      	adds	r3, #84	; 0x54
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	3301      	adds	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	d3af      	bcc.n	8001594 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e044      	b.n	80016c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	3301      	adds	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d3b5      	bcc.n	800163a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	687e      	ldr	r6, [r7, #4]
 80016d6:	466d      	mov	r5, sp
 80016d8:	f106 0410 	add.w	r4, r6, #16
 80016dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ec:	1d33      	adds	r3, r6, #4
 80016ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f002 f9af 	bl	8003a54 <USB_DevInit>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e014      	b.n	8001732 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	2b01      	cmp	r3, #1
 800171e:	d102      	bne.n	8001726 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f80b 	bl	800173c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fb6d 	bl	8003e0a <USB_DevDisconnect>

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800173c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_PCDEx_ActivateLPM+0x44>)
 800176c:	4313      	orrs	r3, r2
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	10000003 	.word	0x10000003

08001784 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40007000 	.word	0x40007000

080017a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e291      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8087 	beq.w	80018d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c8:	4b96      	ldr	r3, [pc, #600]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d00c      	beq.n	80017ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d4:	4b93      	ldr	r3, [pc, #588]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d112      	bne.n	8001806 <HAL_RCC_OscConfig+0x62>
 80017e0:	4b90      	ldr	r3, [pc, #576]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ec:	d10b      	bne.n	8001806 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ee:	4b8d      	ldr	r3, [pc, #564]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d06c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x130>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d168      	bne.n	80018d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e26b      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x7a>
 8001810:	4b84      	ldr	r3, [pc, #528]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a83      	ldr	r2, [pc, #524]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e02e      	b.n	800187c <HAL_RCC_OscConfig+0xd8>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x9c>
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7e      	ldr	r2, [pc, #504]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 800182c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b7c      	ldr	r3, [pc, #496]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7b      	ldr	r2, [pc, #492]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01d      	b.n	800187c <HAL_RCC_OscConfig+0xd8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0xc0>
 800184a:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a75      	ldr	r2, [pc, #468]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b73      	ldr	r3, [pc, #460]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a72      	ldr	r2, [pc, #456]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xd8>
 8001864:	4b6f      	ldr	r3, [pc, #444]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6e      	ldr	r2, [pc, #440]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a6b      	ldr	r2, [pc, #428]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fa9c 	bl	8000dc0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fa98 	bl	8000dc0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e21f      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xe8>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa88 	bl	8000dc0 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff fa84 	bl	8000dc0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e20b      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x110>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d069      	beq.n	80019b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018e2:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ee:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d11c      	bne.n	8001934 <HAL_RCC_OscConfig+0x190>
 80018fa:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d116      	bne.n	8001934 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x17a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e1df      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	493d      	ldr	r1, [pc, #244]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	e040      	b.n	80019b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a38      	ldr	r2, [pc, #224]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fa3a 	bl	8000dc0 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fa36 	bl	8000dc0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1bd      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4929      	ldr	r1, [pc, #164]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
 8001982:	e018      	b.n	80019b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fa16 	bl	8000dc0 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff fa12 	bl	8000dc0 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e199      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d038      	beq.n	8001a34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d019      	beq.n	80019fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80019cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff f9f3 	bl	8000dc0 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019de:	f7ff f9ef 	bl	8000dc0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e176      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80019f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x23a>
 80019fc:	e01a      	b.n	8001a34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f9d9 	bl	8000dc0 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff f9d5 	bl	8000dc0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d903      	bls.n	8001a28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e15c      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
 8001a24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a28:	4b91      	ldr	r3, [pc, #580]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1ee      	bne.n	8001a12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80a4 	beq.w	8001b8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a42:	4b8b      	ldr	r3, [pc, #556]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10d      	bne.n	8001a6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b88      	ldr	r3, [pc, #544]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a87      	ldr	r2, [pc, #540]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b85      	ldr	r3, [pc, #532]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a66:	2301      	movs	r3, #1
 8001a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6a:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <HAL_RCC_OscConfig+0x4d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d118      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a76:	4b7f      	ldr	r3, [pc, #508]	; (8001c74 <HAL_RCC_OscConfig+0x4d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a7e      	ldr	r2, [pc, #504]	; (8001c74 <HAL_RCC_OscConfig+0x4d0>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a82:	f7ff f99d 	bl	8000dc0 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8a:	f7ff f999 	bl	8000dc0 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b64      	cmp	r3, #100	; 0x64
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e120      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9c:	4b75      	ldr	r3, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x4d0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x31a>
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	4a6e      	ldr	r2, [pc, #440]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	; 0x70
 8001abc:	e02d      	b.n	8001b1a <HAL_RCC_OscConfig+0x376>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x33c>
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a69      	ldr	r2, [pc, #420]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	4b67      	ldr	r3, [pc, #412]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a66      	ldr	r2, [pc, #408]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001ad8:	f023 0304 	bic.w	r3, r3, #4
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ade:	e01c      	b.n	8001b1a <HAL_RCC_OscConfig+0x376>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d10c      	bne.n	8001b02 <HAL_RCC_OscConfig+0x35e>
 8001ae8:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a60      	ldr	r2, [pc, #384]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
 8001af4:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a5d      	ldr	r2, [pc, #372]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
 8001b00:	e00b      	b.n	8001b1a <HAL_RCC_OscConfig+0x376>
 8001b02:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4a5a      	ldr	r2, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0e:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	4a57      	ldr	r2, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001b14:	f023 0304 	bic.w	r3, r3, #4
 8001b18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d015      	beq.n	8001b4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b22:	f7ff f94d 	bl	8000dc0 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	e00a      	b.n	8001b40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff f949 	bl	8000dc0 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e0ce      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b40:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0ee      	beq.n	8001b2a <HAL_RCC_OscConfig+0x386>
 8001b4c:	e014      	b.n	8001b78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7ff f937 	bl	8000dc0 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7ff f933 	bl	8000dc0 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e0b8      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6c:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1ee      	bne.n	8001b56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d105      	bne.n	8001b8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7e:	4b3c      	ldr	r3, [pc, #240]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a3b      	ldr	r2, [pc, #236]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80a4 	beq.w	8001cdc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d06b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d149      	bne.n	8001c3c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f904 	bl	8000dc0 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f900 	bl	8000dc0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e087      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69da      	ldr	r2, [r3, #28]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	019b      	lsls	r3, r3, #6
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c06:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f8d4 	bl	8000dc0 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f8d0 	bl	8000dc0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e057      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x478>
 8001c3a:	e04f      	b.n	8001cdc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f8ba 	bl	8000dc0 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff f8b6 	bl	8000dc0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e03d      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4ac>
 8001c6e:	e035      	b.n	8001cdc <HAL_RCC_OscConfig+0x538>
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_OscConfig+0x544>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d028      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d121      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d11a      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d111      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800

08001cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0d0      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d910      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b67      	ldr	r3, [pc, #412]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 020f 	bic.w	r2, r3, #15
 8001d1a:	4965      	ldr	r1, [pc, #404]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0b8      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d4c:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a58      	ldr	r2, [pc, #352]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d70:	4b50      	ldr	r3, [pc, #320]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	494d      	ldr	r1, [pc, #308]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d040      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d115      	bne.n	8001dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e07f      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e073      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e06b      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dce:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f023 0203 	bic.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4936      	ldr	r1, [pc, #216]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de0:	f7fe ffee 	bl	8000dc0 <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7fe ffea 	bl	8000dc0 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e053      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 020c 	and.w	r2, r3, #12
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1eb      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d210      	bcs.n	8001e40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 020f 	bic.w	r2, r3, #15
 8001e26:	4922      	ldr	r1, [pc, #136]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e032      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4916      	ldr	r1, [pc, #88]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	490e      	ldr	r1, [pc, #56]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e7e:	f000 f821 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	490a      	ldr	r1, [pc, #40]	; (8001eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001e90:	5ccb      	ldrb	r3, [r1, r3]
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x1d0>)
 8001e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1d4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe ff4a 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	08007748 	.word	0x08007748
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000004 	.word	0x20000004

08001ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ec8:	b094      	sub	sp, #80	; 0x50
 8001eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	647b      	str	r3, [r7, #68]	; 0x44
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001edc:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d00d      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x40>
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	f200 80e1 	bhi.w	80020b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d003      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x3a>
 8001ef6:	e0db      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4b73      	ldr	r3, [pc, #460]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001efc:	e0db      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001efe:	4b73      	ldr	r3, [pc, #460]	; (80020cc <HAL_RCC_GetSysClockFreq+0x208>)
 8001f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f02:	e0d8      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f04:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f0c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f0e:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d063      	beq.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1a:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	099b      	lsrs	r3, r3, #6
 8001f20:	2200      	movs	r2, #0
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f2e:	2300      	movs	r3, #0
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
 8001f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f36:	4622      	mov	r2, r4
 8001f38:	462b      	mov	r3, r5
 8001f3a:	f04f 0000 	mov.w	r0, #0
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	0159      	lsls	r1, r3, #5
 8001f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f48:	0150      	lsls	r0, r2, #5
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4621      	mov	r1, r4
 8001f50:	1a51      	subs	r1, r2, r1
 8001f52:	6139      	str	r1, [r7, #16]
 8001f54:	4629      	mov	r1, r5
 8001f56:	eb63 0301 	sbc.w	r3, r3, r1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f68:	4659      	mov	r1, fp
 8001f6a:	018b      	lsls	r3, r1, #6
 8001f6c:	4651      	mov	r1, sl
 8001f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f72:	4651      	mov	r1, sl
 8001f74:	018a      	lsls	r2, r1, #6
 8001f76:	4651      	mov	r1, sl
 8001f78:	ebb2 0801 	subs.w	r8, r2, r1
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f96:	4690      	mov	r8, r2
 8001f98:	4699      	mov	r9, r3
 8001f9a:	4623      	mov	r3, r4
 8001f9c:	eb18 0303 	adds.w	r3, r8, r3
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	eb49 0303 	adc.w	r3, r9, r3
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	024b      	lsls	r3, r1, #9
 8001fba:	4621      	mov	r1, r4
 8001fbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	024a      	lsls	r2, r1, #9
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fca:	2200      	movs	r2, #0
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fd4:	f7fe f91c 	bl	8000210 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4613      	mov	r3, r2
 8001fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fe0:	e058      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe2:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	099b      	lsrs	r3, r3, #6
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	4611      	mov	r1, r2
 8001fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ffc:	4642      	mov	r2, r8
 8001ffe:	464b      	mov	r3, r9
 8002000:	f04f 0000 	mov.w	r0, #0
 8002004:	f04f 0100 	mov.w	r1, #0
 8002008:	0159      	lsls	r1, r3, #5
 800200a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800200e:	0150      	lsls	r0, r2, #5
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4641      	mov	r1, r8
 8002016:	ebb2 0a01 	subs.w	sl, r2, r1
 800201a:	4649      	mov	r1, r9
 800201c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800202c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002034:	ebb2 040a 	subs.w	r4, r2, sl
 8002038:	eb63 050b 	sbc.w	r5, r3, fp
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	00eb      	lsls	r3, r5, #3
 8002046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800204a:	00e2      	lsls	r2, r4, #3
 800204c:	4614      	mov	r4, r2
 800204e:	461d      	mov	r5, r3
 8002050:	4643      	mov	r3, r8
 8002052:	18e3      	adds	r3, r4, r3
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	464b      	mov	r3, r9
 8002058:	eb45 0303 	adc.w	r3, r5, r3
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800206a:	4629      	mov	r1, r5
 800206c:	028b      	lsls	r3, r1, #10
 800206e:	4621      	mov	r1, r4
 8002070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002074:	4621      	mov	r1, r4
 8002076:	028a      	lsls	r2, r1, #10
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800207e:	2200      	movs	r2, #0
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	61fa      	str	r2, [r7, #28]
 8002084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002088:	f7fe f8c2 	bl	8000210 <__aeabi_uldivmod>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4613      	mov	r3, r2
 8002092:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80020a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020ae:	e002      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3750      	adds	r7, #80	; 0x50
 80020bc:	46bd      	mov	sp, r7
 80020be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	00f42400 	.word	0x00f42400
 80020cc:	007a1200 	.word	0x007a1200

080020d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000000 	.word	0x20000000

080020e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020ec:	f7ff fff0 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	0a9b      	lsrs	r3, r3, #10
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	4903      	ldr	r1, [pc, #12]	; (800210c <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fe:	5ccb      	ldrb	r3, [r1, r3]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	08007758 	.word	0x08007758

08002110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002114:	f7ff ffdc 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0b5b      	lsrs	r3, r3, #13
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4903      	ldr	r1, [pc, #12]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	08007758 	.word	0x08007758

08002138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d012      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002160:	4b69      	ldr	r3, [pc, #420]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a68      	ldr	r2, [pc, #416]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800216a:	6093      	str	r3, [r2, #8]
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002174:	4964      	ldr	r1, [pc, #400]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d017      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002192:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002198:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	4959      	ldr	r1, [pc, #356]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021b0:	d101      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d017      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	494a      	ldr	r1, [pc, #296]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ec:	d101      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 808b 	beq.w	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	4a39      	ldr	r2, [pc, #228]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002226:	6413      	str	r3, [r2, #64]	; 0x40
 8002228:	4b37      	ldr	r3, [pc, #220]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002234:	4b35      	ldr	r3, [pc, #212]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002240:	f7fe fdbe 	bl	8000dc0 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002248:	f7fe fdba 	bl	8000dc0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e357      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800225a:	4b2c      	ldr	r3, [pc, #176]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d035      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d02e      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022a6:	4a18      	ldr	r2, [pc, #96]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d114      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fd82 	bl	8000dc0 <HAL_GetTick>
 80022bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	e00a      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fd7e 	bl	8000dc0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e319      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ee      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022ee:	d111      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022fe:	400b      	ands	r3, r1
 8002300:	4901      	ldr	r1, [pc, #4]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
 8002306:	e00b      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002308:	40023800 	.word	0x40023800
 800230c:	40007000 	.word	0x40007000
 8002310:	0ffffcff 	.word	0x0ffffcff
 8002314:	4baa      	ldr	r3, [pc, #680]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4aa9      	ldr	r2, [pc, #676]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800231a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800231e:	6093      	str	r3, [r2, #8]
 8002320:	4ba7      	ldr	r3, [pc, #668]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	49a4      	ldr	r1, [pc, #656]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800232e:	4313      	orrs	r3, r2
 8002330:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800233e:	4ba0      	ldr	r3, [pc, #640]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002344:	4a9e      	ldr	r2, [pc, #632]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800234e:	4b9c      	ldr	r3, [pc, #624]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002350:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	4999      	ldr	r1, [pc, #612]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800236c:	4b94      	ldr	r3, [pc, #592]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237a:	4991      	ldr	r1, [pc, #580]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238e:	4b8c      	ldr	r3, [pc, #560]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800239c:	4988      	ldr	r1, [pc, #544]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023b0:	4b83      	ldr	r3, [pc, #524]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023be:	4980      	ldr	r1, [pc, #512]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023d2:	4b7b      	ldr	r3, [pc, #492]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4977      	ldr	r1, [pc, #476]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f4:	4b72      	ldr	r3, [pc, #456]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	496f      	ldr	r1, [pc, #444]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002416:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	f023 020c 	bic.w	r2, r3, #12
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002424:	4966      	ldr	r1, [pc, #408]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002438:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	495e      	ldr	r1, [pc, #376]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800245a:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002468:	4955      	ldr	r1, [pc, #340]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800247c:	4b50      	ldr	r3, [pc, #320]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	494d      	ldr	r1, [pc, #308]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800249e:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	4944      	ldr	r1, [pc, #272]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	493c      	ldr	r1, [pc, #240]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f0:	4933      	ldr	r1, [pc, #204]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002512:	492b      	ldr	r1, [pc, #172]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d011      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002534:	4922      	ldr	r1, [pc, #136]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002544:	d101      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002574:	4912      	ldr	r1, [pc, #72]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00b      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002598:	4909      	ldr	r1, [pc, #36]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d006      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80d9 	beq.w	8002766 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a01      	ldr	r2, [pc, #4]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025be:	e001      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c6:	f7fe fbfb 	bl	8000dc0 <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025ce:	f7fe fbf7 	bl	8000dc0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b64      	cmp	r3, #100	; 0x64
 80025da:	d901      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e194      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025e0:	4b6c      	ldr	r3, [pc, #432]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d021      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d11d      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002600:	4b64      	ldr	r3, [pc, #400]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002606:	0c1b      	lsrs	r3, r3, #16
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800260e:	4b61      	ldr	r3, [pc, #388]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002614:	0e1b      	lsrs	r3, r3, #24
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	019a      	lsls	r2, r3, #6
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	431a      	orrs	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	061b      	lsls	r3, r3, #24
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	071b      	lsls	r3, r3, #28
 8002634:	4957      	ldr	r1, [pc, #348]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02e      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002666:	d129      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002668:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800266a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266e:	0c1b      	lsrs	r3, r3, #16
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267c:	0f1b      	lsrs	r3, r3, #28
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	019a      	lsls	r2, r3, #6
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	431a      	orrs	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	071b      	lsls	r3, r3, #28
 800269c:	493d      	ldr	r1, [pc, #244]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026a4:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026aa:	f023 021f 	bic.w	r2, r3, #31
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	3b01      	subs	r3, #1
 80026b4:	4937      	ldr	r1, [pc, #220]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01d      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ce:	0e1b      	lsrs	r3, r3, #24
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026d6:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026dc:	0f1b      	lsrs	r3, r3, #28
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	019a      	lsls	r2, r3, #6
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	041b      	lsls	r3, r3, #16
 80026f0:	431a      	orrs	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	431a      	orrs	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	071b      	lsls	r3, r3, #28
 80026fc:	4925      	ldr	r1, [pc, #148]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d011      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	019a      	lsls	r2, r3, #6
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	061b      	lsls	r3, r3, #24
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	071b      	lsls	r3, r3, #28
 800272c:	4919      	ldr	r1, [pc, #100]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a16      	ldr	r2, [pc, #88]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800273a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800273e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002740:	f7fe fb3e 	bl	8000dc0 <HAL_GetTick>
 8002744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002748:	f7fe fb3a 	bl	8000dc0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0d7      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 80cd 	bne.w	8002908 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a08      	ldr	r2, [pc, #32]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277a:	f7fe fb21 	bl	8000dc0 <HAL_GetTick>
 800277e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002782:	f7fe fb1d 	bl	8000dc0 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b64      	cmp	r3, #100	; 0x64
 800278e:	d903      	bls.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0ba      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002794:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002798:	4b5e      	ldr	r3, [pc, #376]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a4:	d0ed      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d02e      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d12a      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027ce:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027dc:	4b4d      	ldr	r3, [pc, #308]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	0f1b      	lsrs	r3, r3, #28
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	019a      	lsls	r2, r3, #6
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	061b      	lsls	r3, r3, #24
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	071b      	lsls	r3, r3, #28
 8002802:	4944      	ldr	r1, [pc, #272]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800280a:	4b42      	ldr	r3, [pc, #264]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800280c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002810:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	493d      	ldr	r1, [pc, #244]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d022      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002838:	d11d      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800283a:	4b36      	ldr	r3, [pc, #216]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	0e1b      	lsrs	r3, r3, #24
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	0f1b      	lsrs	r3, r3, #28
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	019a      	lsls	r2, r3, #6
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	431a      	orrs	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	061b      	lsls	r3, r3, #24
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	071b      	lsls	r3, r3, #28
 800286e:	4929      	ldr	r1, [pc, #164]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d028      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	0e1b      	lsrs	r3, r3, #24
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	019a      	lsls	r2, r3, #6
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	071b      	lsls	r3, r3, #28
 80028b6:	4917      	ldr	r1, [pc, #92]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	4911      	ldr	r1, [pc, #68]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e0:	f7fe fa6e 	bl	8000dc0 <HAL_GetTick>
 80028e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028e8:	f7fe fa6a 	bl	8000dc0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e007      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002906:	d1ef      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e040      	b.n	80029ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe f800 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fb1e 	bl	8002f98 <UART_SetConfig>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e022      	b.n	80029ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fd76 	bl	8003460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fdfd 	bl	80035a4 <UART_CheckIdleState>
 80029aa:	4603      	mov	r3, r0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0ba      	sub	sp, #232	; 0xe8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029de:	f640 030f 	movw	r3, #2063	; 0x80f
 80029e2:	4013      	ands	r3, r2
 80029e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80029e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d115      	bne.n	8002a1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00f      	beq.n	8002a1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d009      	beq.n	8002a1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8297 	beq.w	8002f40 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      }
      return;
 8002a1a:	e291      	b.n	8002f40 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8117 	beq.w	8002c54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a36:	4b85      	ldr	r3, [pc, #532]	; (8002c4c <HAL_UART_IRQHandler+0x298>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 810a 	beq.w	8002c54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d011      	beq.n	8002a70 <HAL_UART_IRQHandler+0xbc>
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d011      	beq.n	8002aa0 <HAL_UART_IRQHandler+0xec>
 8002a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a96:	f043 0204 	orr.w	r2, r3, #4
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d011      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x11c>
 8002aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2204      	movs	r2, #4
 8002abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac6:	f043 0202 	orr.w	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d017      	beq.n	8002b0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2208      	movs	r2, #8
 8002afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b02:	f043 0208 	orr.w	r2, r3, #8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d012      	beq.n	8002b3e <HAL_UART_IRQHandler+0x18a>
 8002b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 81fd 	beq.w	8002f44 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d007      	beq.n	8002b72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b40      	cmp	r3, #64	; 0x40
 8002b88:	d005      	beq.n	8002b96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04f      	beq.n	8002c36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fe01 	bl	800379e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b40      	cmp	r3, #64	; 0x40
 8002ba8:	d141      	bne.n	8002c2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3308      	adds	r3, #8
 8002bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002be6:	e841 2300 	strex	r3, r2, [r1]
 8002bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1d9      	bne.n	8002baa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d013      	beq.n	8002c26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c02:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <HAL_UART_IRQHandler+0x29c>)
 8002c04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fa89 	bl	8001122 <HAL_DMA_Abort_IT>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d017      	beq.n	8002c46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c20:	4610      	mov	r0, r2
 8002c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e00f      	b.n	8002c46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f9a0 	bl	8002f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2c:	e00b      	b.n	8002c46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f99c 	bl	8002f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	e007      	b.n	8002c46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f998 	bl	8002f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002c44:	e17e      	b.n	8002f44 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c46:	bf00      	nop
    return;
 8002c48:	e17c      	b.n	8002f44 <HAL_UART_IRQHandler+0x590>
 8002c4a:	bf00      	nop
 8002c4c:	04000120 	.word	0x04000120
 8002c50:	08003867 	.word	0x08003867

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	f040 814c 	bne.w	8002ef6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8145 	beq.w	8002ef6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 813e 	beq.w	8002ef6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2210      	movs	r2, #16
 8002c80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	f040 80b6 	bne.w	8002dfe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8150 	beq.w	8002f48 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	f080 8148 	bcs.w	8002f48 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ccc:	f000 8086 	beq.w	8002ddc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1da      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3308      	adds	r3, #8
 8002d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3308      	adds	r3, #8
 8002d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e1      	bne.n	8002d1a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3308      	adds	r3, #8
 8002d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e3      	bne.n	8002d56 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dac:	f023 0310 	bic.w	r3, r3, #16
 8002db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e4      	bne.n	8002d9c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f933 	bl	8001042 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f8c2 	bl	8002f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dfc:	e0a4      	b.n	8002f48 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8096 	beq.w	8002f4c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8002e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8091 	beq.w	8002f4c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e4      	bne.n	8002e2a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3308      	adds	r3, #8
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	623b      	str	r3, [r7, #32]
   return(result);
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e84:	633a      	str	r2, [r7, #48]	; 0x30
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e3      	bne.n	8002e60 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f023 0310 	bic.w	r3, r3, #16
 8002ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	617b      	str	r3, [r7, #20]
   return(result);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e4      	bne.n	8002eac <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eec:	4619      	mov	r1, r3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f846 	bl	8002f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ef4:	e02a      	b.n	8002f4c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01c      	beq.n	8002f50 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
    }
    return;
 8002f1e:	e017      	b.n	8002f50 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d012      	beq.n	8002f52 <HAL_UART_IRQHandler+0x59e>
 8002f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00c      	beq.n	8002f52 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fcaa 	bl	8003892 <UART_EndTransmit_IT>
    return;
 8002f3e:	e008      	b.n	8002f52 <HAL_UART_IRQHandler+0x59e>
      return;
 8002f40:	bf00      	nop
 8002f42:	e006      	b.n	8002f52 <HAL_UART_IRQHandler+0x59e>
    return;
 8002f44:	bf00      	nop
 8002f46:	e004      	b.n	8002f52 <HAL_UART_IRQHandler+0x59e>
      return;
 8002f48:	bf00      	nop
 8002f4a:	e002      	b.n	8002f52 <HAL_UART_IRQHandler+0x59e>
      return;
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <HAL_UART_IRQHandler+0x59e>
    return;
 8002f50:	bf00      	nop
  }

}
 8002f52:	37e8      	adds	r7, #232	; 0xe8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4ba6      	ldr	r3, [pc, #664]	; (800325c <UART_SetConfig+0x2c4>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	6979      	ldr	r1, [r7, #20]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a94      	ldr	r2, [pc, #592]	; (8003260 <UART_SetConfig+0x2c8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d120      	bne.n	8003056 <UART_SetConfig+0xbe>
 8003014:	4b93      	ldr	r3, [pc, #588]	; (8003264 <UART_SetConfig+0x2cc>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b03      	cmp	r3, #3
 8003020:	d816      	bhi.n	8003050 <UART_SetConfig+0xb8>
 8003022:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <UART_SetConfig+0x90>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	08003039 	.word	0x08003039
 800302c:	08003045 	.word	0x08003045
 8003030:	0800303f 	.word	0x0800303f
 8003034:	0800304b 	.word	0x0800304b
 8003038:	2301      	movs	r3, #1
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e150      	b.n	80032e0 <UART_SetConfig+0x348>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e14d      	b.n	80032e0 <UART_SetConfig+0x348>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e14a      	b.n	80032e0 <UART_SetConfig+0x348>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e147      	b.n	80032e0 <UART_SetConfig+0x348>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e144      	b.n	80032e0 <UART_SetConfig+0x348>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a83      	ldr	r2, [pc, #524]	; (8003268 <UART_SetConfig+0x2d0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d132      	bne.n	80030c6 <UART_SetConfig+0x12e>
 8003060:	4b80      	ldr	r3, [pc, #512]	; (8003264 <UART_SetConfig+0x2cc>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d828      	bhi.n	80030c0 <UART_SetConfig+0x128>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <UART_SetConfig+0xdc>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	080030a9 	.word	0x080030a9
 8003078:	080030c1 	.word	0x080030c1
 800307c:	080030c1 	.word	0x080030c1
 8003080:	080030c1 	.word	0x080030c1
 8003084:	080030b5 	.word	0x080030b5
 8003088:	080030c1 	.word	0x080030c1
 800308c:	080030c1 	.word	0x080030c1
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030af 	.word	0x080030af
 8003098:	080030c1 	.word	0x080030c1
 800309c:	080030c1 	.word	0x080030c1
 80030a0:	080030c1 	.word	0x080030c1
 80030a4:	080030bb 	.word	0x080030bb
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e118      	b.n	80032e0 <UART_SetConfig+0x348>
 80030ae:	2302      	movs	r3, #2
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e115      	b.n	80032e0 <UART_SetConfig+0x348>
 80030b4:	2304      	movs	r3, #4
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e112      	b.n	80032e0 <UART_SetConfig+0x348>
 80030ba:	2308      	movs	r3, #8
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e10f      	b.n	80032e0 <UART_SetConfig+0x348>
 80030c0:	2310      	movs	r3, #16
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e10c      	b.n	80032e0 <UART_SetConfig+0x348>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a68      	ldr	r2, [pc, #416]	; (800326c <UART_SetConfig+0x2d4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d120      	bne.n	8003112 <UART_SetConfig+0x17a>
 80030d0:	4b64      	ldr	r3, [pc, #400]	; (8003264 <UART_SetConfig+0x2cc>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030da:	2b30      	cmp	r3, #48	; 0x30
 80030dc:	d013      	beq.n	8003106 <UART_SetConfig+0x16e>
 80030de:	2b30      	cmp	r3, #48	; 0x30
 80030e0:	d814      	bhi.n	800310c <UART_SetConfig+0x174>
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d009      	beq.n	80030fa <UART_SetConfig+0x162>
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d810      	bhi.n	800310c <UART_SetConfig+0x174>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <UART_SetConfig+0x15c>
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d006      	beq.n	8003100 <UART_SetConfig+0x168>
 80030f2:	e00b      	b.n	800310c <UART_SetConfig+0x174>
 80030f4:	2300      	movs	r3, #0
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e0f2      	b.n	80032e0 <UART_SetConfig+0x348>
 80030fa:	2302      	movs	r3, #2
 80030fc:	77fb      	strb	r3, [r7, #31]
 80030fe:	e0ef      	b.n	80032e0 <UART_SetConfig+0x348>
 8003100:	2304      	movs	r3, #4
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e0ec      	b.n	80032e0 <UART_SetConfig+0x348>
 8003106:	2308      	movs	r3, #8
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e0e9      	b.n	80032e0 <UART_SetConfig+0x348>
 800310c:	2310      	movs	r3, #16
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e0e6      	b.n	80032e0 <UART_SetConfig+0x348>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a56      	ldr	r2, [pc, #344]	; (8003270 <UART_SetConfig+0x2d8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d120      	bne.n	800315e <UART_SetConfig+0x1c6>
 800311c:	4b51      	ldr	r3, [pc, #324]	; (8003264 <UART_SetConfig+0x2cc>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003126:	2bc0      	cmp	r3, #192	; 0xc0
 8003128:	d013      	beq.n	8003152 <UART_SetConfig+0x1ba>
 800312a:	2bc0      	cmp	r3, #192	; 0xc0
 800312c:	d814      	bhi.n	8003158 <UART_SetConfig+0x1c0>
 800312e:	2b80      	cmp	r3, #128	; 0x80
 8003130:	d009      	beq.n	8003146 <UART_SetConfig+0x1ae>
 8003132:	2b80      	cmp	r3, #128	; 0x80
 8003134:	d810      	bhi.n	8003158 <UART_SetConfig+0x1c0>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <UART_SetConfig+0x1a8>
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d006      	beq.n	800314c <UART_SetConfig+0x1b4>
 800313e:	e00b      	b.n	8003158 <UART_SetConfig+0x1c0>
 8003140:	2300      	movs	r3, #0
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e0cc      	b.n	80032e0 <UART_SetConfig+0x348>
 8003146:	2302      	movs	r3, #2
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e0c9      	b.n	80032e0 <UART_SetConfig+0x348>
 800314c:	2304      	movs	r3, #4
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e0c6      	b.n	80032e0 <UART_SetConfig+0x348>
 8003152:	2308      	movs	r3, #8
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e0c3      	b.n	80032e0 <UART_SetConfig+0x348>
 8003158:	2310      	movs	r3, #16
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e0c0      	b.n	80032e0 <UART_SetConfig+0x348>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a44      	ldr	r2, [pc, #272]	; (8003274 <UART_SetConfig+0x2dc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d125      	bne.n	80031b4 <UART_SetConfig+0x21c>
 8003168:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <UART_SetConfig+0x2cc>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003176:	d017      	beq.n	80031a8 <UART_SetConfig+0x210>
 8003178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317c:	d817      	bhi.n	80031ae <UART_SetConfig+0x216>
 800317e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003182:	d00b      	beq.n	800319c <UART_SetConfig+0x204>
 8003184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003188:	d811      	bhi.n	80031ae <UART_SetConfig+0x216>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <UART_SetConfig+0x1fe>
 800318e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003192:	d006      	beq.n	80031a2 <UART_SetConfig+0x20a>
 8003194:	e00b      	b.n	80031ae <UART_SetConfig+0x216>
 8003196:	2300      	movs	r3, #0
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e0a1      	b.n	80032e0 <UART_SetConfig+0x348>
 800319c:	2302      	movs	r3, #2
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e09e      	b.n	80032e0 <UART_SetConfig+0x348>
 80031a2:	2304      	movs	r3, #4
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	e09b      	b.n	80032e0 <UART_SetConfig+0x348>
 80031a8:	2308      	movs	r3, #8
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e098      	b.n	80032e0 <UART_SetConfig+0x348>
 80031ae:	2310      	movs	r3, #16
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e095      	b.n	80032e0 <UART_SetConfig+0x348>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2f      	ldr	r2, [pc, #188]	; (8003278 <UART_SetConfig+0x2e0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d125      	bne.n	800320a <UART_SetConfig+0x272>
 80031be:	4b29      	ldr	r3, [pc, #164]	; (8003264 <UART_SetConfig+0x2cc>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031cc:	d017      	beq.n	80031fe <UART_SetConfig+0x266>
 80031ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031d2:	d817      	bhi.n	8003204 <UART_SetConfig+0x26c>
 80031d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d8:	d00b      	beq.n	80031f2 <UART_SetConfig+0x25a>
 80031da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031de:	d811      	bhi.n	8003204 <UART_SetConfig+0x26c>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <UART_SetConfig+0x254>
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d006      	beq.n	80031f8 <UART_SetConfig+0x260>
 80031ea:	e00b      	b.n	8003204 <UART_SetConfig+0x26c>
 80031ec:	2301      	movs	r3, #1
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e076      	b.n	80032e0 <UART_SetConfig+0x348>
 80031f2:	2302      	movs	r3, #2
 80031f4:	77fb      	strb	r3, [r7, #31]
 80031f6:	e073      	b.n	80032e0 <UART_SetConfig+0x348>
 80031f8:	2304      	movs	r3, #4
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e070      	b.n	80032e0 <UART_SetConfig+0x348>
 80031fe:	2308      	movs	r3, #8
 8003200:	77fb      	strb	r3, [r7, #31]
 8003202:	e06d      	b.n	80032e0 <UART_SetConfig+0x348>
 8003204:	2310      	movs	r3, #16
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e06a      	b.n	80032e0 <UART_SetConfig+0x348>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1b      	ldr	r2, [pc, #108]	; (800327c <UART_SetConfig+0x2e4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d138      	bne.n	8003286 <UART_SetConfig+0x2ee>
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <UART_SetConfig+0x2cc>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800321e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003222:	d017      	beq.n	8003254 <UART_SetConfig+0x2bc>
 8003224:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003228:	d82a      	bhi.n	8003280 <UART_SetConfig+0x2e8>
 800322a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322e:	d00b      	beq.n	8003248 <UART_SetConfig+0x2b0>
 8003230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003234:	d824      	bhi.n	8003280 <UART_SetConfig+0x2e8>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <UART_SetConfig+0x2aa>
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323e:	d006      	beq.n	800324e <UART_SetConfig+0x2b6>
 8003240:	e01e      	b.n	8003280 <UART_SetConfig+0x2e8>
 8003242:	2300      	movs	r3, #0
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e04b      	b.n	80032e0 <UART_SetConfig+0x348>
 8003248:	2302      	movs	r3, #2
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e048      	b.n	80032e0 <UART_SetConfig+0x348>
 800324e:	2304      	movs	r3, #4
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e045      	b.n	80032e0 <UART_SetConfig+0x348>
 8003254:	2308      	movs	r3, #8
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e042      	b.n	80032e0 <UART_SetConfig+0x348>
 800325a:	bf00      	nop
 800325c:	efff69f3 	.word	0xefff69f3
 8003260:	40011000 	.word	0x40011000
 8003264:	40023800 	.word	0x40023800
 8003268:	40004400 	.word	0x40004400
 800326c:	40004800 	.word	0x40004800
 8003270:	40004c00 	.word	0x40004c00
 8003274:	40005000 	.word	0x40005000
 8003278:	40011400 	.word	0x40011400
 800327c:	40007800 	.word	0x40007800
 8003280:	2310      	movs	r3, #16
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e02c      	b.n	80032e0 <UART_SetConfig+0x348>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a72      	ldr	r2, [pc, #456]	; (8003454 <UART_SetConfig+0x4bc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d125      	bne.n	80032dc <UART_SetConfig+0x344>
 8003290:	4b71      	ldr	r3, [pc, #452]	; (8003458 <UART_SetConfig+0x4c0>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800329a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800329e:	d017      	beq.n	80032d0 <UART_SetConfig+0x338>
 80032a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032a4:	d817      	bhi.n	80032d6 <UART_SetConfig+0x33e>
 80032a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032aa:	d00b      	beq.n	80032c4 <UART_SetConfig+0x32c>
 80032ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b0:	d811      	bhi.n	80032d6 <UART_SetConfig+0x33e>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <UART_SetConfig+0x326>
 80032b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ba:	d006      	beq.n	80032ca <UART_SetConfig+0x332>
 80032bc:	e00b      	b.n	80032d6 <UART_SetConfig+0x33e>
 80032be:	2300      	movs	r3, #0
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e00d      	b.n	80032e0 <UART_SetConfig+0x348>
 80032c4:	2302      	movs	r3, #2
 80032c6:	77fb      	strb	r3, [r7, #31]
 80032c8:	e00a      	b.n	80032e0 <UART_SetConfig+0x348>
 80032ca:	2304      	movs	r3, #4
 80032cc:	77fb      	strb	r3, [r7, #31]
 80032ce:	e007      	b.n	80032e0 <UART_SetConfig+0x348>
 80032d0:	2308      	movs	r3, #8
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e004      	b.n	80032e0 <UART_SetConfig+0x348>
 80032d6:	2310      	movs	r3, #16
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e001      	b.n	80032e0 <UART_SetConfig+0x348>
 80032dc:	2310      	movs	r3, #16
 80032de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e8:	d15b      	bne.n	80033a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80032ea:	7ffb      	ldrb	r3, [r7, #31]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d828      	bhi.n	8003342 <UART_SetConfig+0x3aa>
 80032f0:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <UART_SetConfig+0x360>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	0800331d 	.word	0x0800331d
 80032fc:	08003325 	.word	0x08003325
 8003300:	0800332d 	.word	0x0800332d
 8003304:	08003343 	.word	0x08003343
 8003308:	08003333 	.word	0x08003333
 800330c:	08003343 	.word	0x08003343
 8003310:	08003343 	.word	0x08003343
 8003314:	08003343 	.word	0x08003343
 8003318:	0800333b 	.word	0x0800333b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7fe fee4 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8003320:	61b8      	str	r0, [r7, #24]
        break;
 8003322:	e013      	b.n	800334c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003324:	f7fe fef4 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 8003328:	61b8      	str	r0, [r7, #24]
        break;
 800332a:	e00f      	b.n	800334c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800332c:	4b4b      	ldr	r3, [pc, #300]	; (800345c <UART_SetConfig+0x4c4>)
 800332e:	61bb      	str	r3, [r7, #24]
        break;
 8003330:	e00c      	b.n	800334c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003332:	f7fe fdc7 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8003336:	61b8      	str	r0, [r7, #24]
        break;
 8003338:	e008      	b.n	800334c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333e:	61bb      	str	r3, [r7, #24]
        break;
 8003340:	e004      	b.n	800334c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	77bb      	strb	r3, [r7, #30]
        break;
 800334a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d074      	beq.n	800343c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	005a      	lsls	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	441a      	add	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b0f      	cmp	r3, #15
 800336c:	d916      	bls.n	800339c <UART_SetConfig+0x404>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d212      	bcs.n	800339c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f023 030f 	bic.w	r3, r3, #15
 800337e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	b29b      	uxth	r3, r3
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	b29a      	uxth	r2, r3
 800338c:	89fb      	ldrh	r3, [r7, #14]
 800338e:	4313      	orrs	r3, r2
 8003390:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	89fa      	ldrh	r2, [r7, #14]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	e04f      	b.n	800343c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	77bb      	strb	r3, [r7, #30]
 80033a0:	e04c      	b.n	800343c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d828      	bhi.n	80033fa <UART_SetConfig+0x462>
 80033a8:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <UART_SetConfig+0x418>)
 80033aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ae:	bf00      	nop
 80033b0:	080033d5 	.word	0x080033d5
 80033b4:	080033dd 	.word	0x080033dd
 80033b8:	080033e5 	.word	0x080033e5
 80033bc:	080033fb 	.word	0x080033fb
 80033c0:	080033eb 	.word	0x080033eb
 80033c4:	080033fb 	.word	0x080033fb
 80033c8:	080033fb 	.word	0x080033fb
 80033cc:	080033fb 	.word	0x080033fb
 80033d0:	080033f3 	.word	0x080033f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d4:	f7fe fe88 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 80033d8:	61b8      	str	r0, [r7, #24]
        break;
 80033da:	e013      	b.n	8003404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033dc:	f7fe fe98 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 80033e0:	61b8      	str	r0, [r7, #24]
        break;
 80033e2:	e00f      	b.n	8003404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <UART_SetConfig+0x4c4>)
 80033e6:	61bb      	str	r3, [r7, #24]
        break;
 80033e8:	e00c      	b.n	8003404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ea:	f7fe fd6b 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 80033ee:	61b8      	str	r0, [r7, #24]
        break;
 80033f0:	e008      	b.n	8003404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f6:	61bb      	str	r3, [r7, #24]
        break;
 80033f8:	e004      	b.n	8003404 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	77bb      	strb	r3, [r7, #30]
        break;
 8003402:	bf00      	nop
    }

    if (pclk != 0U)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d018      	beq.n	800343c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	085a      	lsrs	r2, r3, #1
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	441a      	add	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b0f      	cmp	r3, #15
 8003422:	d909      	bls.n	8003438 <UART_SetConfig+0x4a0>
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d205      	bcs.n	8003438 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	e001      	b.n	800343c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003448:	7fbb      	ldrb	r3, [r7, #30]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40007c00 	.word	0x40007c00
 8003458:	40023800 	.word	0x40023800
 800345c:	00f42400 	.word	0x00f42400

08003460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01a      	beq.n	8003576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800355e:	d10a      	bne.n	8003576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  }
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035b4:	f7fd fc04 	bl	8000dc0 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d10e      	bne.n	80035e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f81b 	bl	8003612 <UART_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e011      	b.n	800360a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b09c      	sub	sp, #112	; 0x70
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003622:	e0a7      	b.n	8003774 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362a:	f000 80a3 	beq.w	8003774 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fd fbc7 	bl	8000dc0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <UART_WaitOnFlagUntilTimeout+0x32>
 800363e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003640:	2b00      	cmp	r3, #0
 8003642:	d13f      	bne.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003658:	667b      	str	r3, [r7, #100]	; 0x64
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003664:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e6      	bne.n	8003644 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3308      	adds	r3, #8
 800367c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	663b      	str	r3, [r7, #96]	; 0x60
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3308      	adds	r3, #8
 8003694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003696:	64ba      	str	r2, [r7, #72]	; 0x48
 8003698:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800369c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e5      	bne.n	8003676 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2220      	movs	r2, #32
 80036ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e068      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d050      	beq.n	8003774 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e0:	d148      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003700:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
 800370c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e6      	bne.n	80036ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3308      	adds	r3, #8
 8003724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	613b      	str	r3, [r7, #16]
   return(result);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	66bb      	str	r3, [r7, #104]	; 0x68
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3308      	adds	r3, #8
 800373c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800373e:	623a      	str	r2, [r7, #32]
 8003740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	69f9      	ldr	r1, [r7, #28]
 8003744:	6a3a      	ldr	r2, [r7, #32]
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	61bb      	str	r3, [r7, #24]
   return(result);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e5      	bne.n	800371e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e010      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4013      	ands	r3, r2
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	429a      	cmp	r2, r3
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	429a      	cmp	r2, r3
 8003790:	f43f af48 	beq.w	8003624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3770      	adds	r7, #112	; 0x70
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800379e:	b480      	push	{r7}
 80037a0:	b095      	sub	sp, #84	; 0x54
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c4:	643b      	str	r3, [r7, #64]	; 0x40
 80037c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e6      	bne.n	80037a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3308      	adds	r3, #8
 80037f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003810:	2b01      	cmp	r3, #1
 8003812:	d118      	bne.n	8003846 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	60bb      	str	r3, [r7, #8]
   return(result);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f023 0310 	bic.w	r3, r3, #16
 8003828:	647b      	str	r3, [r7, #68]	; 0x44
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	613b      	str	r3, [r7, #16]
   return(result);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e6      	bne.n	8003814 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	669a      	str	r2, [r3, #104]	; 0x68
}
 800385a:	bf00      	nop
 800385c:	3754      	adds	r7, #84	; 0x54
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff fb71 	bl	8002f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b088      	sub	sp, #32
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6979      	ldr	r1, [r7, #20]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	613b      	str	r3, [r7, #16]
   return(result);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e6      	bne.n	800389a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff fb3d 	bl	8002f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038de:	bf00      	nop
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038e8:	b084      	sub	sp, #16
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	f107 001c 	add.w	r0, r7, #28
 80038f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d120      	bne.n	8003942 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <USB_CoreInit+0xac>)
 8003912:	4013      	ands	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fa96 	bl	8003e68 <USB_CoreReset>
 800393c:	4603      	mov	r3, r0
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e010      	b.n	8003964 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa8a 	bl	8003e68 <USB_CoreReset>
 8003954:	4603      	mov	r3, r0
 8003956:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	2b01      	cmp	r3, #1
 8003968:	d10b      	bne.n	8003982 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f043 0206 	orr.w	r2, r3, #6
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800398e:	b004      	add	sp, #16
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	ffbdffbf 	.word	0xffbdffbf

08003998 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 0201 	bic.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	460b      	mov	r3, r1
 80039c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d115      	bne.n	8003a08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039e8:	2001      	movs	r0, #1
 80039ea:	f7fd f9f5 	bl	8000dd8 <HAL_Delay>
      ms++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3301      	adds	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fa29 	bl	8003e4c <USB_GetMode>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d01e      	beq.n	8003a3e <USB_SetCurrentMode+0x84>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b31      	cmp	r3, #49	; 0x31
 8003a04:	d9f0      	bls.n	80039e8 <USB_SetCurrentMode+0x2e>
 8003a06:	e01a      	b.n	8003a3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d115      	bne.n	8003a3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f7fd f9dc 	bl	8000dd8 <HAL_Delay>
      ms++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3301      	adds	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fa10 	bl	8003e4c <USB_GetMode>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <USB_SetCurrentMode+0x84>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b31      	cmp	r3, #49	; 0x31
 8003a36:	d9f0      	bls.n	8003a1a <USB_SetCurrentMode+0x60>
 8003a38:	e001      	b.n	8003a3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e005      	b.n	8003a4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b32      	cmp	r3, #50	; 0x32
 8003a42:	d101      	bne.n	8003a48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a54:	b084      	sub	sp, #16
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b086      	sub	sp, #24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	e009      	b.n	8003a88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	3340      	adds	r3, #64	; 0x40
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	2200      	movs	r2, #0
 8003a80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	3301      	adds	r3, #1
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b0e      	cmp	r3, #14
 8003a8c:	d9f2      	bls.n	8003a74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11c      	bne.n	8003ace <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
 8003aa6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e005      	b.n	8003ada <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aec:	4619      	mov	r1, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af4:	461a      	mov	r2, r3
 8003af6:	680b      	ldr	r3, [r1, #0]
 8003af8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10c      	bne.n	8003b1a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d104      	bne.n	8003b10 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b06:	2100      	movs	r1, #0
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f965 	bl	8003dd8 <USB_SetDevSpeed>
 8003b0e:	e008      	b.n	8003b22 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b10:	2101      	movs	r1, #1
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f960 	bl	8003dd8 <USB_SetDevSpeed>
 8003b18:	e003      	b.n	8003b22 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b1a:	2103      	movs	r1, #3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f95b 	bl	8003dd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b22:	2110      	movs	r1, #16
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f8f3 	bl	8003d10 <USB_FlushTxFifo>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f91f 	bl	8003d78 <USB_FlushRxFifo>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	461a      	mov	r2, r3
 8003b58:	2300      	movs	r3, #0
 8003b5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b62:	461a      	mov	r2, r3
 8003b64:	2300      	movs	r3, #0
 8003b66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	e043      	b.n	8003bf6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b84:	d118      	bne.n	8003bb8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	e013      	b.n	8003bca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e008      	b.n	8003bca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be8:	461a      	mov	r2, r3
 8003bea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3b7      	bcc.n	8003b6e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	e043      	b.n	8003c8c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c1a:	d118      	bne.n	8003c4e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e013      	b.n	8003c60 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c44:	461a      	mov	r2, r3
 8003c46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	e008      	b.n	8003c60 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2300      	movs	r3, #0
 8003c70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d3b7      	bcc.n	8003c04 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f043 0210 	orr.w	r2, r3, #16
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <USB_DevInit+0x2b4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f043 0208 	orr.w	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <USB_DevInit+0x2b8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d04:	b004      	add	sp, #16
 8003d06:	4770      	bx	lr
 8003d08:	803c3800 	.word	0x803c3800
 8003d0c:	40000004 	.word	0x40000004

08003d10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3301      	adds	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <USB_FlushTxFifo+0x64>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e01b      	b.n	8003d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	daf2      	bge.n	8003d1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	019b      	lsls	r3, r3, #6
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <USB_FlushTxFifo+0x64>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e006      	b.n	8003d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d0f0      	beq.n	8003d48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	00030d40 	.word	0x00030d40

08003d78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <USB_FlushRxFifo+0x5c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e018      	b.n	8003dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	daf2      	bge.n	8003d84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2210      	movs	r2, #16
 8003da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <USB_FlushRxFifo+0x5c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e006      	b.n	8003dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d0f0      	beq.n	8003da8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	00030d40 	.word	0x00030d40

08003dd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e24:	f023 0303 	bic.w	r3, r3, #3
 8003e28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0301 	and.w	r3, r3, #1
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3301      	adds	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <USB_CoreReset+0x64>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e01b      	b.n	8003ebe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	daf2      	bge.n	8003e74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <USB_CoreReset+0x64>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e006      	b.n	8003ebe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d0f0      	beq.n	8003e9e <USB_CoreReset+0x36>

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	00030d40 	.word	0x00030d40

08003ed0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee6:	f3ef 8305 	mrs	r3, IPSR
 8003eea:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef6:	607b      	str	r3, [r7, #4]
  return(result);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003efe:	f3ef 8311 	mrs	r3, BASEPRI
 8003f02:	603b      	str	r3, [r7, #0]
  return(result);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <osKernelInitialize+0x3a>
 8003f0a:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <osKernelInitialize+0x64>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d103      	bne.n	8003f1a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f12:	f06f 0305 	mvn.w	r3, #5
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e00c      	b.n	8003f34 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <osKernelInitialize+0x64>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d105      	bne.n	8003f2e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <osKernelInitialize+0x64>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e002      	b.n	8003f34 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f34:	68fb      	ldr	r3, [r7, #12]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000630 	.word	0x20000630

08003f48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f4e:	f3ef 8305 	mrs	r3, IPSR
 8003f52:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10f      	bne.n	8003f7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f5e:	607b      	str	r3, [r7, #4]
  return(result);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f66:	f3ef 8311 	mrs	r3, BASEPRI
 8003f6a:	603b      	str	r3, [r7, #0]
  return(result);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <osKernelStart+0x3a>
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <osKernelStart+0x68>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d103      	bne.n	8003f82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f7a:	f06f 0305 	mvn.w	r3, #5
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	e010      	b.n	8003fa4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <osKernelStart+0x68>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d109      	bne.n	8003f9e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f8a:	f7ff ffa1 	bl	8003ed0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f8e:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <osKernelStart+0x68>)
 8003f90:	2202      	movs	r2, #2
 8003f92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f94:	f001 fa06 	bl	80053a4 <vTaskStartScheduler>
      stat = osOK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	e002      	b.n	8003fa4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000630 	.word	0x20000630

08003fb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b090      	sub	sp, #64	; 0x40
 8003fb8:	af04      	add	r7, sp, #16
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fc4:	f3ef 8305 	mrs	r3, IPSR
 8003fc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 808f 	bne.w	80040f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d105      	bne.n	8003fea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fde:	f3ef 8311 	mrs	r3, BASEPRI
 8003fe2:	617b      	str	r3, [r7, #20]
  return(result);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <osThreadNew+0x3e>
 8003fea:	4b44      	ldr	r3, [pc, #272]	; (80040fc <osThreadNew+0x148>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d07e      	beq.n	80040f0 <osThreadNew+0x13c>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d07b      	beq.n	80040f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003ffc:	2318      	movs	r3, #24
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004000:	2300      	movs	r3, #0
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004004:	f04f 33ff 	mov.w	r3, #4294967295
 8004008:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d045      	beq.n	800409c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <osThreadNew+0x6a>
        name = attr->name;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <osThreadNew+0x90>
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	2b38      	cmp	r3, #56	; 0x38
 8004036:	d805      	bhi.n	8004044 <osThreadNew+0x90>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <osThreadNew+0x94>
        return (NULL);
 8004044:	2300      	movs	r3, #0
 8004046:	e054      	b.n	80040f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00e      	beq.n	800407e <osThreadNew+0xca>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b5f      	cmp	r3, #95	; 0x5f
 8004066:	d90a      	bls.n	800407e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <osThreadNew+0xca>
        mem = 1;
 8004078:	2301      	movs	r3, #1
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	e010      	b.n	80040a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <osThreadNew+0xec>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <osThreadNew+0xec>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <osThreadNew+0xec>
          mem = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	623b      	str	r3, [r7, #32]
 800409a:	e001      	b.n	80040a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d110      	bne.n	80040c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040ae:	9202      	str	r2, [sp, #8]
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fe3f 	bl	8004d40 <xTaskCreateStatic>
 80040c2:	4603      	mov	r3, r0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	e013      	b.n	80040f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d110      	bne.n	80040f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	f107 0310 	add.w	r3, r7, #16
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fe90 	bl	8004e06 <xTaskCreate>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <osThreadNew+0x13c>
          hTask = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040f0:	693b      	ldr	r3, [r7, #16]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3730      	adds	r7, #48	; 0x30
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000630 	.word	0x20000630

08004100 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004108:	f3ef 8305 	mrs	r3, IPSR
 800410c:	613b      	str	r3, [r7, #16]
  return(result);
 800410e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10f      	bne.n	8004134 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004114:	f3ef 8310 	mrs	r3, PRIMASK
 8004118:	60fb      	str	r3, [r7, #12]
  return(result);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004120:	f3ef 8311 	mrs	r3, BASEPRI
 8004124:	60bb      	str	r3, [r7, #8]
  return(result);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <osDelay+0x3c>
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <osDelay+0x58>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d103      	bne.n	800413c <osDelay+0x3c>
    stat = osErrorISR;
 8004134:	f06f 0305 	mvn.w	r3, #5
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	e007      	b.n	800414c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f001 f842 	bl	80051d0 <vTaskDelay>
    }
  }

  return (stat);
 800414c:	697b      	ldr	r3, [r7, #20]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000630 	.word	0x20000630

0800415c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a07      	ldr	r2, [pc, #28]	; (8004188 <vApplicationGetIdleTaskMemory+0x2c>)
 800416c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4a06      	ldr	r2, [pc, #24]	; (800418c <vApplicationGetIdleTaskMemory+0x30>)
 8004172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2280      	movs	r2, #128	; 0x80
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20000634 	.word	0x20000634
 800418c:	20000694 	.word	0x20000694

08004190 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a07      	ldr	r2, [pc, #28]	; (80041bc <vApplicationGetTimerTaskMemory+0x2c>)
 80041a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <vApplicationGetTimerTaskMemory+0x30>)
 80041a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041ae:	601a      	str	r2, [r3, #0]
}
 80041b0:	bf00      	nop
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	20000894 	.word	0x20000894
 80041c0:	200008f4 	.word	0x200008f4

080041c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f103 0208 	add.w	r2, r3, #8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295
 80041dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f103 0208 	add.w	r2, r3, #8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f103 0208 	add.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d103      	bne.n	8004286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	e00c      	b.n	80042a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3308      	adds	r3, #8
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e002      	b.n	8004294 <vListInsert+0x2e>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	d2f6      	bcs.n	800428e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6892      	ldr	r2, [r2, #8]
 80042ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6852      	ldr	r2, [r2, #4]
 80042f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d103      	bne.n	800430c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	1e5a      	subs	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10c      	bne.n	800435a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	b672      	cpsid	i
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	b662      	cpsie	i
 8004354:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800435a:	f002 fa8f 	bl	800687c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	441a      	add	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	3b01      	subs	r3, #1
 800438c:	68f9      	ldr	r1, [r7, #12]
 800438e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	441a      	add	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	22ff      	movs	r2, #255	; 0xff
 800439e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	22ff      	movs	r2, #255	; 0xff
 80043a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d114      	bne.n	80043da <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01a      	beq.n	80043ee <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3310      	adds	r3, #16
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 fae9 	bl	8005994 <xTaskRemoveFromEventList>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d012      	beq.n	80043ee <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <xQueueGenericReset+0xd0>)
 80043ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	e009      	b.n	80043ee <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3310      	adds	r3, #16
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fef0 	bl	80041c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3324      	adds	r3, #36	; 0x24
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff feeb 	bl	80041c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043ee:	f002 fa79 	bl	80068e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043f2:	2301      	movs	r3, #1
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08e      	sub	sp, #56	; 0x38
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10c      	bne.n	800442e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	b672      	cpsid	i
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	b662      	cpsie	i
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10c      	bne.n	800444e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	b672      	cpsid	i
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	b662      	cpsie	i
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <xQueueGenericCreateStatic+0x5a>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <xQueueGenericCreateStatic+0x5e>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <xQueueGenericCreateStatic+0x60>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10c      	bne.n	800447e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	b672      	cpsid	i
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	b662      	cpsie	i
 8004478:	623b      	str	r3, [r7, #32]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <xQueueGenericCreateStatic+0x8a>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <xQueueGenericCreateStatic+0x8e>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <xQueueGenericCreateStatic+0x90>
 800448e:	2300      	movs	r3, #0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10c      	bne.n	80044ae <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	b672      	cpsid	i
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	b662      	cpsie	i
 80044a8:	61fb      	str	r3, [r7, #28]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044ae:	2350      	movs	r3, #80	; 0x50
 80044b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b50      	cmp	r3, #80	; 0x50
 80044b6:	d00c      	beq.n	80044d2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	b672      	cpsid	i
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	b662      	cpsie	i
 80044cc:	61bb      	str	r3, [r7, #24]
}
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	4613      	mov	r3, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f805 	bl	8004504 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3730      	adds	r7, #48	; 0x30
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d103      	bne.n	8004520 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e002      	b.n	8004526 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004532:	2101      	movs	r1, #1
 8004534:	69b8      	ldr	r0, [r7, #24]
 8004536:	f7ff fef9 	bl	800432c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08e      	sub	sp, #56	; 0x38
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800455a:	2300      	movs	r3, #0
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10c      	bne.n	8004582 <xQueueGenericSend+0x36>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	b672      	cpsid	i
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	b662      	cpsie	i
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d103      	bne.n	8004590 <xQueueGenericSend+0x44>
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <xQueueGenericSend+0x48>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <xQueueGenericSend+0x4a>
 8004594:	2300      	movs	r3, #0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10c      	bne.n	80045b4 <xQueueGenericSend+0x68>
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	b672      	cpsid	i
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	b662      	cpsie	i
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d103      	bne.n	80045c2 <xQueueGenericSend+0x76>
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <xQueueGenericSend+0x7a>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <xQueueGenericSend+0x7c>
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10c      	bne.n	80045e6 <xQueueGenericSend+0x9a>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	b672      	cpsid	i
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	b662      	cpsie	i
 80045e0:	623b      	str	r3, [r7, #32]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045e6:	f001 fbed 	bl	8005dc4 <xTaskGetSchedulerState>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <xQueueGenericSend+0xaa>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <xQueueGenericSend+0xae>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <xQueueGenericSend+0xb0>
 80045fa:	2300      	movs	r3, #0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10c      	bne.n	800461a <xQueueGenericSend+0xce>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	b672      	cpsid	i
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	b662      	cpsie	i
 8004614:	61fb      	str	r3, [r7, #28]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800461a:	f002 f92f 	bl	800687c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	429a      	cmp	r2, r3
 8004628:	d302      	bcc.n	8004630 <xQueueGenericSend+0xe4>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d129      	bne.n	8004684 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004636:	f000 fa15 	bl	8004a64 <prvCopyDataToQueue>
 800463a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	3324      	adds	r3, #36	; 0x24
 8004648:	4618      	mov	r0, r3
 800464a:	f001 f9a3 	bl	8005994 <xTaskRemoveFromEventList>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d013      	beq.n	800467c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004654:	4b3f      	ldr	r3, [pc, #252]	; (8004754 <xQueueGenericSend+0x208>)
 8004656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	e00a      	b.n	800467c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800466c:	4b39      	ldr	r3, [pc, #228]	; (8004754 <xQueueGenericSend+0x208>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800467c:	f002 f932 	bl	80068e4 <vPortExitCritical>
				return pdPASS;
 8004680:	2301      	movs	r3, #1
 8004682:	e063      	b.n	800474c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800468a:	f002 f92b 	bl	80068e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800468e:	2300      	movs	r3, #0
 8004690:	e05c      	b.n	800474c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	4618      	mov	r0, r3
 800469e:	f001 f9eb 	bl	8005a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046a2:	2301      	movs	r3, #1
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046a6:	f002 f91d 	bl	80068e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046aa:	f000 fef7 	bl	800549c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046ae:	f002 f8e5 	bl	800687c <vPortEnterCritical>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b8:	b25b      	sxtb	r3, r3
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d103      	bne.n	80046c8 <xQueueGenericSend+0x17c>
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ce:	b25b      	sxtb	r3, r3
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d103      	bne.n	80046de <xQueueGenericSend+0x192>
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046de:	f002 f901 	bl	80068e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046e2:	1d3a      	adds	r2, r7, #4
 80046e4:	f107 0314 	add.w	r3, r7, #20
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 f9da 	bl	8005aa4 <xTaskCheckForTimeOut>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d124      	bne.n	8004740 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f8:	f000 faac 	bl	8004c54 <prvIsQueueFull>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d018      	beq.n	8004734 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	3310      	adds	r3, #16
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f001 f8ee 	bl	80058ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004712:	f000 fa37 	bl	8004b84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004716:	f000 fecf 	bl	80054b8 <xTaskResumeAll>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	f47f af7c 	bne.w	800461a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <xQueueGenericSend+0x208>)
 8004724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	e772      	b.n	800461a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004736:	f000 fa25 	bl	8004b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800473a:	f000 febd 	bl	80054b8 <xTaskResumeAll>
 800473e:	e76c      	b.n	800461a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004742:	f000 fa1f 	bl	8004b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004746:	f000 feb7 	bl	80054b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800474a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800474c:	4618      	mov	r0, r3
 800474e:	3738      	adds	r7, #56	; 0x38
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08e      	sub	sp, #56	; 0x38
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10c      	bne.n	800478a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	b672      	cpsid	i
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	b662      	cpsie	i
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <xQueueGenericSendFromISR+0x40>
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <xQueueGenericSendFromISR+0x44>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <xQueueGenericSendFromISR+0x46>
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10c      	bne.n	80047bc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	b672      	cpsid	i
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	b662      	cpsie	i
 80047b6:	623b      	str	r3, [r7, #32]
}
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d103      	bne.n	80047ca <xQueueGenericSendFromISR+0x72>
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <xQueueGenericSendFromISR+0x76>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <xQueueGenericSendFromISR+0x78>
 80047ce:	2300      	movs	r3, #0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10c      	bne.n	80047ee <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	b672      	cpsid	i
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	b662      	cpsie	i
 80047e8:	61fb      	str	r3, [r7, #28]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ee:	f002 f92d 	bl	8006a4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047f2:	f3ef 8211 	mrs	r2, BASEPRI
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	b672      	cpsid	i
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	b662      	cpsie	i
 800480a:	61ba      	str	r2, [r7, #24]
 800480c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800480e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <xQueueGenericSendFromISR+0xcc>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d12c      	bne.n	800487e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800482a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004834:	f000 f916 	bl	8004a64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004838:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d112      	bne.n	8004868 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d016      	beq.n	8004878 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	3324      	adds	r3, #36	; 0x24
 800484e:	4618      	mov	r0, r3
 8004850:	f001 f8a0 	bl	8005994 <xTaskRemoveFromEventList>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00e      	beq.n	8004878 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e007      	b.n	8004878 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800486c:	3301      	adds	r3, #1
 800486e:	b2db      	uxtb	r3, r3
 8004870:	b25a      	sxtb	r2, r3
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004878:	2301      	movs	r3, #1
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800487c:	e001      	b.n	8004882 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800487e:	2300      	movs	r3, #0
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800488c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004890:	4618      	mov	r0, r3
 8004892:	3738      	adds	r7, #56	; 0x38
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08c      	sub	sp, #48	; 0x30
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10c      	bne.n	80048cc <xQueueReceive+0x34>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	b672      	cpsid	i
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	b662      	cpsie	i
 80048c6:	623b      	str	r3, [r7, #32]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <xQueueReceive+0x42>
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <xQueueReceive+0x46>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <xQueueReceive+0x48>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10c      	bne.n	80048fe <xQueueReceive+0x66>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	b672      	cpsid	i
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	b662      	cpsie	i
 80048f8:	61fb      	str	r3, [r7, #28]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048fe:	f001 fa61 	bl	8005dc4 <xTaskGetSchedulerState>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <xQueueReceive+0x76>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <xQueueReceive+0x7a>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <xQueueReceive+0x7c>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10c      	bne.n	8004932 <xQueueReceive+0x9a>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	b672      	cpsid	i
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	b662      	cpsie	i
 800492c:	61bb      	str	r3, [r7, #24]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004932:	f001 ffa3 	bl	800687c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01f      	beq.n	8004982 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004946:	f000 f8f7 	bl	8004b38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	1e5a      	subs	r2, r3, #1
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00f      	beq.n	800497a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	3310      	adds	r3, #16
 800495e:	4618      	mov	r0, r3
 8004960:	f001 f818 	bl	8005994 <xTaskRemoveFromEventList>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800496a:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <xQueueReceive+0x1c8>)
 800496c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800497a:	f001 ffb3 	bl	80068e4 <vPortExitCritical>
				return pdPASS;
 800497e:	2301      	movs	r3, #1
 8004980:	e069      	b.n	8004a56 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004988:	f001 ffac 	bl	80068e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800498c:	2300      	movs	r3, #0
 800498e:	e062      	b.n	8004a56 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004996:	f107 0310 	add.w	r3, r7, #16
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f86c 	bl	8005a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049a4:	f001 ff9e 	bl	80068e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049a8:	f000 fd78 	bl	800549c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049ac:	f001 ff66 	bl	800687c <vPortEnterCritical>
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b6:	b25b      	sxtb	r3, r3
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d103      	bne.n	80049c6 <xQueueReceive+0x12e>
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049cc:	b25b      	sxtb	r3, r3
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d103      	bne.n	80049dc <xQueueReceive+0x144>
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049dc:	f001 ff82 	bl	80068e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049e0:	1d3a      	adds	r2, r7, #4
 80049e2:	f107 0310 	add.w	r3, r7, #16
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 f85b 	bl	8005aa4 <xTaskCheckForTimeOut>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d123      	bne.n	8004a3c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f6:	f000 f917 	bl	8004c28 <prvIsQueueEmpty>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d017      	beq.n	8004a30 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	3324      	adds	r3, #36	; 0x24
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4611      	mov	r1, r2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 ff6f 	bl	80058ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a10:	f000 f8b8 	bl	8004b84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a14:	f000 fd50 	bl	80054b8 <xTaskResumeAll>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d189      	bne.n	8004932 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <xQueueReceive+0x1c8>)
 8004a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	e780      	b.n	8004932 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a32:	f000 f8a7 	bl	8004b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a36:	f000 fd3f 	bl	80054b8 <xTaskResumeAll>
 8004a3a:	e77a      	b.n	8004932 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3e:	f000 f8a1 	bl	8004b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a42:	f000 fd39 	bl	80054b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a48:	f000 f8ee 	bl	8004c28 <prvIsQueueEmpty>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f43f af6f 	beq.w	8004932 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3730      	adds	r7, #48	; 0x30
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10d      	bne.n	8004a9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d14d      	bne.n	8004b26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 f9b6 	bl	8005e00 <xTaskPriorityDisinherit>
 8004a94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	e043      	b.n	8004b26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d119      	bne.n	8004ad8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6858      	ldr	r0, [r3, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	461a      	mov	r2, r3
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	f002 fb8d 	bl	80071ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	441a      	add	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d32b      	bcc.n	8004b26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	605a      	str	r2, [r3, #4]
 8004ad6:	e026      	b.n	8004b26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68d8      	ldr	r0, [r3, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	f002 fb73 	bl	80071ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	425b      	negs	r3, r3
 8004af2:	441a      	add	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d207      	bcs.n	8004b14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	425b      	negs	r3, r3
 8004b0e:	441a      	add	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d105      	bne.n	8004b26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b2e:	697b      	ldr	r3, [r7, #20]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d018      	beq.n	8004b7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	441a      	add	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d303      	bcc.n	8004b6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68d9      	ldr	r1, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	461a      	mov	r2, r3
 8004b76:	6838      	ldr	r0, [r7, #0]
 8004b78:	f002 fb29 	bl	80071ce <memcpy>
	}
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b8c:	f001 fe76 	bl	800687c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b98:	e011      	b.n	8004bbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d012      	beq.n	8004bc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3324      	adds	r3, #36	; 0x24
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fef4 	bl	8005994 <xTaskRemoveFromEventList>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bb2:	f000 ffdd 	bl	8005b70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	dce9      	bgt.n	8004b9a <prvUnlockQueue+0x16>
 8004bc6:	e000      	b.n	8004bca <prvUnlockQueue+0x46>
					break;
 8004bc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bd2:	f001 fe87 	bl	80068e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bd6:	f001 fe51 	bl	800687c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004be0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004be2:	e011      	b.n	8004c08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d012      	beq.n	8004c12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3310      	adds	r3, #16
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fecf 	bl	8005994 <xTaskRemoveFromEventList>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bfc:	f000 ffb8 	bl	8005b70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c00:	7bbb      	ldrb	r3, [r7, #14]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	dce9      	bgt.n	8004be4 <prvUnlockQueue+0x60>
 8004c10:	e000      	b.n	8004c14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	22ff      	movs	r2, #255	; 0xff
 8004c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c1c:	f001 fe62 	bl	80068e4 <vPortExitCritical>
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c30:	f001 fe24 	bl	800687c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	e001      	b.n	8004c46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c46:	f001 fe4d 	bl	80068e4 <vPortExitCritical>

	return xReturn;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c5c:	f001 fe0e 	bl	800687c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d102      	bne.n	8004c72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e001      	b.n	8004c76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c76:	f001 fe35 	bl	80068e4 <vPortExitCritical>

	return xReturn;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	e014      	b.n	8004cbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c94:	4a0f      	ldr	r2, [pc, #60]	; (8004cd4 <vQueueAddToRegistry+0x50>)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ca0:	490c      	ldr	r1, [pc, #48]	; (8004cd4 <vQueueAddToRegistry+0x50>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004caa:	4a0a      	ldr	r2, [pc, #40]	; (8004cd4 <vQueueAddToRegistry+0x50>)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cb6:	e006      	b.n	8004cc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b07      	cmp	r3, #7
 8004cc2:	d9e7      	bls.n	8004c94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000cf4 	.word	0x20000cf4

08004cd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ce8:	f001 fdc8 	bl	800687c <vPortEnterCritical>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cf2:	b25b      	sxtb	r3, r3
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d103      	bne.n	8004d02 <vQueueWaitForMessageRestricted+0x2a>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d08:	b25b      	sxtb	r3, r3
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d103      	bne.n	8004d18 <vQueueWaitForMessageRestricted+0x40>
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d18:	f001 fde4 	bl	80068e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3324      	adds	r3, #36	; 0x24
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fe03 	bl	8005938 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d32:	6978      	ldr	r0, [r7, #20]
 8004d34:	f7ff ff26 	bl	8004b84 <prvUnlockQueue>
	}
 8004d38:	bf00      	nop
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08e      	sub	sp, #56	; 0x38
 8004d44:	af04      	add	r7, sp, #16
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10c      	bne.n	8004d6e <xTaskCreateStatic+0x2e>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	b672      	cpsid	i
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	b662      	cpsie	i
 8004d68:	623b      	str	r3, [r7, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10c      	bne.n	8004d8e <xTaskCreateStatic+0x4e>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	b672      	cpsid	i
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	b662      	cpsie	i
 8004d88:	61fb      	str	r3, [r7, #28]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d8e:	2360      	movs	r3, #96	; 0x60
 8004d90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b60      	cmp	r3, #96	; 0x60
 8004d96:	d00c      	beq.n	8004db2 <xTaskCreateStatic+0x72>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	b672      	cpsid	i
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	b662      	cpsie	i
 8004dac:	61bb      	str	r3, [r7, #24]
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004db2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01e      	beq.n	8004df8 <xTaskCreateStatic+0xb8>
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01b      	beq.n	8004df8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9303      	str	r3, [sp, #12]
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	f107 0314 	add.w	r3, r7, #20
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f850 	bl	8004e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004df2:	f000 f8ef 	bl	8004fd4 <prvAddNewTaskToReadyList>
 8004df6:	e001      	b.n	8004dfc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dfc:	697b      	ldr	r3, [r7, #20]
	}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3728      	adds	r7, #40	; 0x28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b08c      	sub	sp, #48	; 0x30
 8004e0a:	af04      	add	r7, sp, #16
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 fe5a 	bl	8006ad4 <pvPortMalloc>
 8004e20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00e      	beq.n	8004e46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e28:	2060      	movs	r0, #96	; 0x60
 8004e2a:	f001 fe53 	bl	8006ad4 <pvPortMalloc>
 8004e2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8004e3c:	e005      	b.n	8004e4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e3e:	6978      	ldr	r0, [r7, #20]
 8004e40:	f001 fe5a 	bl	8006af8 <vPortFree>
 8004e44:	e001      	b.n	8004e4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d017      	beq.n	8004e80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e58:	88fa      	ldrh	r2, [r7, #6]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9303      	str	r3, [sp, #12]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	9302      	str	r3, [sp, #8]
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f80e 	bl	8004e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e74:	69f8      	ldr	r0, [r7, #28]
 8004e76:	f000 f8ad 	bl	8004fd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	e002      	b.n	8004e86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e80:	f04f 33ff 	mov.w	r3, #4294967295
 8004e84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e86:	69bb      	ldr	r3, [r7, #24]
	}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	21a5      	movs	r1, #165	; 0xa5
 8004eaa:	f002 f904 	bl	80070b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004eb8:	440b      	add	r3, r1
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f023 0307 	bic.w	r3, r3, #7
 8004ec6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00c      	beq.n	8004eec <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	b672      	cpsid	i
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	b662      	cpsie	i
 8004ee6:	617b      	str	r3, [r7, #20]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01f      	beq.n	8004f32 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	e012      	b.n	8004f1e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	7819      	ldrb	r1, [r3, #0]
 8004f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	3334      	adds	r3, #52	; 0x34
 8004f08:	460a      	mov	r2, r1
 8004f0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2b0f      	cmp	r3, #15
 8004f22:	d9e9      	bls.n	8004ef8 <prvInitialiseNewTask+0x68>
 8004f24:	e000      	b.n	8004f28 <prvInitialiseNewTask+0x98>
			{
				break;
 8004f26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f30:	e003      	b.n	8004f3a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	2b37      	cmp	r3, #55	; 0x37
 8004f3e:	d901      	bls.n	8004f44 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f40:	2337      	movs	r3, #55	; 0x37
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	2200      	movs	r2, #0
 8004f54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff f952 	bl	8004204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	3318      	adds	r3, #24
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff f94d 	bl	8004204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e009      	b.n	8004f9a <prvInitialiseNewTask+0x10a>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8004f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3314      	adds	r3, #20
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	2200      	movs	r2, #0
 8004f92:	605a      	str	r2, [r3, #4]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	3301      	adds	r3, #1
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f2      	beq.n	8004f86 <prvInitialiseNewTask+0xf6>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	68f9      	ldr	r1, [r7, #12]
 8004fb2:	69b8      	ldr	r0, [r7, #24]
 8004fb4:	f001 fb52 	bl	800665c <pxPortInitialiseStack>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fca:	bf00      	nop
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fdc:	f001 fc4e 	bl	800687c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fe0:	4b38      	ldr	r3, [pc, #224]	; (80050c4 <prvAddNewTaskToReadyList+0xf0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	4a37      	ldr	r2, [pc, #220]	; (80050c4 <prvAddNewTaskToReadyList+0xf0>)
 8004fe8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fea:	4b37      	ldr	r3, [pc, #220]	; (80050c8 <prvAddNewTaskToReadyList+0xf4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ff2:	4a35      	ldr	r2, [pc, #212]	; (80050c8 <prvAddNewTaskToReadyList+0xf4>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ff8:	4b32      	ldr	r3, [pc, #200]	; (80050c4 <prvAddNewTaskToReadyList+0xf0>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d110      	bne.n	8005022 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005000:	f000 fe20 	bl	8005c44 <prvInitialiseTaskLists>
 8005004:	e00d      	b.n	8005022 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <prvAddNewTaskToReadyList+0xf8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800500e:	4b2e      	ldr	r3, [pc, #184]	; (80050c8 <prvAddNewTaskToReadyList+0xf4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	429a      	cmp	r2, r3
 800501a:	d802      	bhi.n	8005022 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800501c:	4a2a      	ldr	r2, [pc, #168]	; (80050c8 <prvAddNewTaskToReadyList+0xf4>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005022:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <prvAddNewTaskToReadyList+0xfc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3301      	adds	r3, #1
 8005028:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <prvAddNewTaskToReadyList+0xfc>)
 800502a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800502c:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <prvAddNewTaskToReadyList+0xfc>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005034:	2100      	movs	r1, #0
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fdde 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 800503c:	4603      	mov	r3, r0
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	2103      	movs	r1, #3
 8005044:	4823      	ldr	r0, [pc, #140]	; (80050d4 <prvAddNewTaskToReadyList+0x100>)
 8005046:	f001 fde7 	bl	8006c18 <log_trace_function>

		prvAddTaskToReadyList( pxNewTCB );
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504e:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <prvAddNewTaskToReadyList+0x104>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d903      	bls.n	800505e <prvAddNewTaskToReadyList+0x8a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <prvAddNewTaskToReadyList+0x104>)
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <prvAddNewTaskToReadyList+0x108>)
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3304      	adds	r3, #4
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f7ff f8d2 	bl	800421e <vListInsertEnd>
 800507a:	2100      	movs	r1, #0
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fdbb 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 8005082:	4603      	mov	r3, r0
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	2107      	movs	r1, #7
 800508a:	4815      	ldr	r0, [pc, #84]	; (80050e0 <prvAddNewTaskToReadyList+0x10c>)
 800508c:	f001 fdc4 	bl	8006c18 <log_trace_function>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005090:	f001 fc28 	bl	80068e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <prvAddNewTaskToReadyList+0xf8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00e      	beq.n	80050ba <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <prvAddNewTaskToReadyList+0xf4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d207      	bcs.n	80050ba <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050aa:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <prvAddNewTaskToReadyList+0x110>)
 80050ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20001208 	.word	0x20001208
 80050c8:	20000d34 	.word	0x20000d34
 80050cc:	20001214 	.word	0x20001214
 80050d0:	20001224 	.word	0x20001224
 80050d4:	080076a0 	.word	0x080076a0
 80050d8:	20001210 	.word	0x20001210
 80050dc:	20000d38 	.word	0x20000d38
 80050e0:	080076a8 	.word	0x080076a8
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80050f0:	f001 fbc4 	bl	800687c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <vTaskDelete+0x18>
 80050fa:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <vTaskDelete+0xc8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	e000      	b.n	8005102 <vTaskDelete+0x1a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3304      	adds	r3, #4
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff f8e5 	bl	80042d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3318      	adds	r3, #24
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff f8dc 	bl	80042d8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005120:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <vTaskDelete+0xcc>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <vTaskDelete+0xcc>)
 8005128:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800512a:	4b21      	ldr	r3, [pc, #132]	; (80051b0 <vTaskDelete+0xc8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	429a      	cmp	r2, r3
 8005132:	d10b      	bne.n	800514c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	481f      	ldr	r0, [pc, #124]	; (80051b8 <vTaskDelete+0xd0>)
 800513c:	f7ff f86f 	bl	800421e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <vTaskDelete+0xd4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <vTaskDelete+0xd4>)
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e009      	b.n	8005160 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800514c:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <vTaskDelete+0xd8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3b01      	subs	r3, #1
 8005152:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <vTaskDelete+0xd8>)
 8005154:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fde2 	bl	8005d20 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800515c:	f000 fe12 	bl	8005d84 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005160:	f001 fbc0 	bl	80068e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005164:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <vTaskDelete+0xdc>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01d      	beq.n	80051a8 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 800516c:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <vTaskDelete+0xc8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	429a      	cmp	r2, r3
 8005174:	d118      	bne.n	80051a8 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <vTaskDelete+0xe0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <vTaskDelete+0xb0>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	b672      	cpsid	i
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	b662      	cpsie	i
 8005192:	60bb      	str	r3, [r7, #8]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8005198:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <vTaskDelete+0xe4>)
 800519a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000d34 	.word	0x20000d34
 80051b4:	20001224 	.word	0x20001224
 80051b8:	200011dc 	.word	0x200011dc
 80051bc:	200011f0 	.word	0x200011f0
 80051c0:	20001208 	.word	0x20001208
 80051c4:	20001214 	.word	0x20001214
 80051c8:	20001230 	.word	0x20001230
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01e      	beq.n	8005220 <vTaskDelay+0x50>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <vTaskDelay+0x70>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00c      	beq.n	8005204 <vTaskDelay+0x34>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	b672      	cpsid	i
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	b662      	cpsie	i
 80051fe:	60bb      	str	r3, [r7, #8]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005204:	f000 f94a 	bl	800549c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005208:	2200      	movs	r2, #0
 800520a:	2106      	movs	r1, #6
 800520c:	480d      	ldr	r0, [pc, #52]	; (8005244 <vTaskDelay+0x74>)
 800520e:	f001 fd03 	bl	8006c18 <log_trace_function>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005212:	2100      	movs	r1, #0
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fe71 	bl	8005efc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800521a:	f000 f94d 	bl	80054b8 <xTaskResumeAll>
 800521e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d107      	bne.n	8005236 <vTaskDelay+0x66>
		{
			portYIELD_WITHIN_API();
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <vTaskDelay+0x78>)
 8005228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20001230 	.word	0x20001230
 8005244:	080076b4 	.word	0x080076b4
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005256:	2300      	movs	r3, #0
 8005258:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b37      	cmp	r3, #55	; 0x37
 800525e:	d90c      	bls.n	800527a <vTaskPrioritySet+0x2e>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	b672      	cpsid	i
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	b662      	cpsie	i
 8005274:	60fb      	str	r3, [r7, #12]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <vTaskPrioritySet+0x2c>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b37      	cmp	r3, #55	; 0x37
 800527e:	d901      	bls.n	8005284 <vTaskPrioritySet+0x38>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005280:	2337      	movs	r3, #55	; 0x37
 8005282:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005284:	f001 fafa 	bl	800687c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <vTaskPrioritySet+0x48>
 800528e:	4b40      	ldr	r3, [pc, #256]	; (8005390 <vTaskPrioritySet+0x144>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	e000      	b.n	8005296 <vTaskPrioritySet+0x4a>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529c:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d06e      	beq.n	8005384 <vTaskPrioritySet+0x138>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d90d      	bls.n	80052ca <vTaskPrioritySet+0x7e>
				{
					if( pxTCB != pxCurrentTCB )
 80052ae:	4b38      	ldr	r3, [pc, #224]	; (8005390 <vTaskPrioritySet+0x144>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d00f      	beq.n	80052d8 <vTaskPrioritySet+0x8c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80052b8:	4b35      	ldr	r3, [pc, #212]	; (8005390 <vTaskPrioritySet+0x144>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d309      	bcc.n	80052d8 <vTaskPrioritySet+0x8c>
						{
							xYieldRequired = pdTRUE;
 80052c4:	2301      	movs	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	e006      	b.n	80052d8 <vTaskPrioritySet+0x8c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80052ca:	4b31      	ldr	r3, [pc, #196]	; (8005390 <vTaskPrioritySet+0x144>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d101      	bne.n	80052d8 <vTaskPrioritySet+0x8c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80052d4:	2301      	movs	r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d102      	bne.n	80052f0 <vTaskPrioritySet+0xa4>
					{
						pxTCB->uxPriority = uxNewPriority;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	db04      	blt.n	8005308 <vTaskPrioritySet+0xbc>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	6959      	ldr	r1, [r3, #20]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <vTaskPrioritySet+0x148>)
 8005318:	4413      	add	r3, r2
 800531a:	4299      	cmp	r1, r3
 800531c:	d127      	bne.n	800536e <vTaskPrioritySet+0x122>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	3304      	adds	r3, #4
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe ffd8 	bl	80042d8 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532c:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <vTaskPrioritySet+0x14c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d903      	bls.n	800533c <vTaskPrioritySet+0xf0>
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	4a17      	ldr	r2, [pc, #92]	; (8005398 <vTaskPrioritySet+0x14c>)
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4a12      	ldr	r2, [pc, #72]	; (8005394 <vTaskPrioritySet+0x148>)
 800534a:	441a      	add	r2, r3
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	3304      	adds	r3, #4
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f7fe ff63 	bl	800421e <vListInsertEnd>
 8005358:	2100      	movs	r1, #0
 800535a:	69b8      	ldr	r0, [r7, #24]
 800535c:	f000 fc4c 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 8005360:	4603      	mov	r3, r0
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	2107      	movs	r1, #7
 8005368:	480c      	ldr	r0, [pc, #48]	; (800539c <vTaskPrioritySet+0x150>)
 800536a:	f001 fc55 	bl	8006c18 <log_trace_function>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <vTaskPrioritySet+0x138>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <vTaskPrioritySet+0x154>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005384:	f001 faae 	bl	80068e4 <vPortExitCritical>
	}
 8005388:	bf00      	nop
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000d34 	.word	0x20000d34
 8005394:	20000d38 	.word	0x20000d38
 8005398:	20001210 	.word	0x20001210
 800539c:	080076a8 	.word	0x080076a8
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053b2:	463a      	mov	r2, r7
 80053b4:	1d39      	adds	r1, r7, #4
 80053b6:	f107 0308 	add.w	r3, r7, #8
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe fece 	bl	800415c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	9202      	str	r2, [sp, #8]
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	2300      	movs	r3, #0
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	2300      	movs	r3, #0
 80053d0:	460a      	mov	r2, r1
 80053d2:	492a      	ldr	r1, [pc, #168]	; (800547c <vTaskStartScheduler+0xd8>)
 80053d4:	482a      	ldr	r0, [pc, #168]	; (8005480 <vTaskStartScheduler+0xdc>)
 80053d6:	f7ff fcb3 	bl	8004d40 <xTaskCreateStatic>
 80053da:	4603      	mov	r3, r0
 80053dc:	4a29      	ldr	r2, [pc, #164]	; (8005484 <vTaskStartScheduler+0xe0>)
 80053de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053e0:	4b28      	ldr	r3, [pc, #160]	; (8005484 <vTaskStartScheduler+0xe0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053e8:	2301      	movs	r3, #1
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e001      	b.n	80053f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d102      	bne.n	80053fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053f8:	f000 fdd4 	bl	8005fa4 <xTimerCreateTimerTask>
 80053fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d125      	bne.n	8005450 <vTaskStartScheduler+0xac>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	b672      	cpsid	i
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	b662      	cpsie	i
 8005418:	613b      	str	r3, [r7, #16]
}
 800541a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800541c:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <vTaskStartScheduler+0xe4>)
 800541e:	f04f 32ff 	mov.w	r2, #4294967295
 8005422:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005424:	4b19      	ldr	r3, [pc, #100]	; (800548c <vTaskStartScheduler+0xe8>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800542a:	4b19      	ldr	r3, [pc, #100]	; (8005490 <vTaskStartScheduler+0xec>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8005430:	4b18      	ldr	r3, [pc, #96]	; (8005494 <vTaskStartScheduler+0xf0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fbde 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 800543c:	4603      	mov	r3, r0
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	2104      	movs	r1, #4
 8005444:	4814      	ldr	r0, [pc, #80]	; (8005498 <vTaskStartScheduler+0xf4>)
 8005446:	f001 fbe7 	bl	8006c18 <log_trace_function>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800544a:	f001 f999 	bl	8006780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800544e:	e010      	b.n	8005472 <vTaskStartScheduler+0xce>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d10c      	bne.n	8005472 <vTaskStartScheduler+0xce>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	b672      	cpsid	i
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	b662      	cpsie	i
 800546c:	60fb      	str	r3, [r7, #12]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <vTaskStartScheduler+0xcc>
}
 8005472:	bf00      	nop
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	080076bc 	.word	0x080076bc
 8005480:	08005b89 	.word	0x08005b89
 8005484:	2000122c 	.word	0x2000122c
 8005488:	20001228 	.word	0x20001228
 800548c:	20001214 	.word	0x20001214
 8005490:	2000120c 	.word	0x2000120c
 8005494:	20000d34 	.word	0x20000d34
 8005498:	080076c4 	.word	0x080076c4

0800549c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054a0:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <vTaskSuspendAll+0x18>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	4a03      	ldr	r2, [pc, #12]	; (80054b4 <vTaskSuspendAll+0x18>)
 80054a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80054aa:	bf00      	nop
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	20001230 	.word	0x20001230

080054b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054c6:	4b48      	ldr	r3, [pc, #288]	; (80055e8 <xTaskResumeAll+0x130>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <xTaskResumeAll+0x30>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	b672      	cpsid	i
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	b662      	cpsie	i
 80054e2:	603b      	str	r3, [r7, #0]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054e8:	f001 f9c8 	bl	800687c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054ec:	4b3e      	ldr	r3, [pc, #248]	; (80055e8 <xTaskResumeAll+0x130>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	4a3d      	ldr	r2, [pc, #244]	; (80055e8 <xTaskResumeAll+0x130>)
 80054f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f6:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <xTaskResumeAll+0x130>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d16d      	bne.n	80055da <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054fe:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <xTaskResumeAll+0x134>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d069      	beq.n	80055da <xTaskResumeAll+0x122>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005506:	e03a      	b.n	800557e <xTaskResumeAll+0xc6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005508:	4b39      	ldr	r3, [pc, #228]	; (80055f0 <xTaskResumeAll+0x138>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3318      	adds	r3, #24
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe fedf 	bl	80042d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3304      	adds	r3, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe feda 	bl	80042d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	4b32      	ldr	r3, [pc, #200]	; (80055f4 <xTaskResumeAll+0x13c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d903      	bls.n	8005538 <xTaskResumeAll+0x80>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a2f      	ldr	r2, [pc, #188]	; (80055f4 <xTaskResumeAll+0x13c>)
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4a2c      	ldr	r2, [pc, #176]	; (80055f8 <xTaskResumeAll+0x140>)
 8005546:	441a      	add	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f7fe fe65 	bl	800421e <vListInsertEnd>
 8005554:	2100      	movs	r1, #0
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fb4e 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 800555c:	4603      	mov	r3, r0
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	2107      	movs	r1, #7
 8005564:	4825      	ldr	r0, [pc, #148]	; (80055fc <xTaskResumeAll+0x144>)
 8005566:	f001 fb57 	bl	8006c18 <log_trace_function>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556e:	4b24      	ldr	r3, [pc, #144]	; (8005600 <xTaskResumeAll+0x148>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	429a      	cmp	r2, r3
 8005576:	d302      	bcc.n	800557e <xTaskResumeAll+0xc6>
					{
						xYieldPending = pdTRUE;
 8005578:	4b22      	ldr	r3, [pc, #136]	; (8005604 <xTaskResumeAll+0x14c>)
 800557a:	2201      	movs	r2, #1
 800557c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800557e:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <xTaskResumeAll+0x138>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1c0      	bne.n	8005508 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800558c:	f000 fbfa 	bl	8005d84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <xTaskResumeAll+0x150>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800559c:	f000 f85a 	bl	8005654 <xTaskIncrementTick>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
 80055a6:	4b17      	ldr	r3, [pc, #92]	; (8005604 <xTaskResumeAll+0x14c>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f1      	bne.n	800559c <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
 80055b8:	4b13      	ldr	r3, [pc, #76]	; (8005608 <xTaskResumeAll+0x150>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055be:	4b11      	ldr	r3, [pc, #68]	; (8005604 <xTaskResumeAll+0x14c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <xTaskResumeAll+0x122>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055c6:	2301      	movs	r3, #1
 80055c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055ca:	4b10      	ldr	r3, [pc, #64]	; (800560c <xTaskResumeAll+0x154>)
 80055cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055da:	f001 f983 	bl	80068e4 <vPortExitCritical>

	return xAlreadyYielded;
 80055de:	68bb      	ldr	r3, [r7, #8]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20001230 	.word	0x20001230
 80055ec:	20001208 	.word	0x20001208
 80055f0:	200011c8 	.word	0x200011c8
 80055f4:	20001210 	.word	0x20001210
 80055f8:	20000d38 	.word	0x20000d38
 80055fc:	080076a8 	.word	0x080076a8
 8005600:	20000d34 	.word	0x20000d34
 8005604:	2000121c 	.word	0x2000121c
 8005608:	20001218 	.word	0x20001218
 800560c:	e000ed04 	.word	0xe000ed04

08005610 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005616:	4b05      	ldr	r3, [pc, #20]	; (800562c <xTaskGetTickCount+0x1c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800561c:	687b      	ldr	r3, [r7, #4]
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	2000120c 	.word	0x2000120c

08005630 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005636:	f001 fa09 	bl	8006a4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800563a:	2300      	movs	r3, #0
 800563c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800563e:	4b04      	ldr	r3, [pc, #16]	; (8005650 <xTaskGetTickCountFromISR+0x20>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005644:	683b      	ldr	r3, [r7, #0]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	2000120c 	.word	0x2000120c

08005654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565e:	4b59      	ldr	r3, [pc, #356]	; (80057c4 <xTaskIncrementTick+0x170>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 809c 	bne.w	80057a0 <xTaskIncrementTick+0x14c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005668:	4b57      	ldr	r3, [pc, #348]	; (80057c8 <xTaskIncrementTick+0x174>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3301      	adds	r3, #1
 800566e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005670:	4a55      	ldr	r2, [pc, #340]	; (80057c8 <xTaskIncrementTick+0x174>)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d122      	bne.n	80056c2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800567c:	4b53      	ldr	r3, [pc, #332]	; (80057cc <xTaskIncrementTick+0x178>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00c      	beq.n	80056a0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	b672      	cpsid	i
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	b662      	cpsie	i
 800569a:	603b      	str	r3, [r7, #0]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xTaskIncrementTick+0x4a>
 80056a0:	4b4a      	ldr	r3, [pc, #296]	; (80057cc <xTaskIncrementTick+0x178>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	4b4a      	ldr	r3, [pc, #296]	; (80057d0 <xTaskIncrementTick+0x17c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a48      	ldr	r2, [pc, #288]	; (80057cc <xTaskIncrementTick+0x178>)
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4a48      	ldr	r2, [pc, #288]	; (80057d0 <xTaskIncrementTick+0x17c>)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	4b47      	ldr	r3, [pc, #284]	; (80057d4 <xTaskIncrementTick+0x180>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3301      	adds	r3, #1
 80056ba:	4a46      	ldr	r2, [pc, #280]	; (80057d4 <xTaskIncrementTick+0x180>)
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	f000 fb61 	bl	8005d84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056c2:	4b45      	ldr	r3, [pc, #276]	; (80057d8 <xTaskIncrementTick+0x184>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d354      	bcc.n	8005776 <xTaskIncrementTick+0x122>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056cc:	4b3f      	ldr	r3, [pc, #252]	; (80057cc <xTaskIncrementTick+0x178>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d104      	bne.n	80056e0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d6:	4b40      	ldr	r3, [pc, #256]	; (80057d8 <xTaskIncrementTick+0x184>)
 80056d8:	f04f 32ff 	mov.w	r2, #4294967295
 80056dc:	601a      	str	r2, [r3, #0]
					break;
 80056de:	e04a      	b.n	8005776 <xTaskIncrementTick+0x122>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e0:	4b3a      	ldr	r3, [pc, #232]	; (80057cc <xTaskIncrementTick+0x178>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d203      	bcs.n	8005700 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056f8:	4a37      	ldr	r2, [pc, #220]	; (80057d8 <xTaskIncrementTick+0x184>)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056fe:	e03a      	b.n	8005776 <xTaskIncrementTick+0x122>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	3304      	adds	r3, #4
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe fde7 	bl	80042d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	3318      	adds	r3, #24
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe fdde 	bl	80042d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <xTaskIncrementTick+0x188>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d903      	bls.n	8005730 <xTaskIncrementTick+0xdc>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	4a2b      	ldr	r2, [pc, #172]	; (80057dc <xTaskIncrementTick+0x188>)
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4a28      	ldr	r2, [pc, #160]	; (80057e0 <xTaskIncrementTick+0x18c>)
 800573e:	441a      	add	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f7fe fd69 	bl	800421e <vListInsertEnd>
 800574c:	2100      	movs	r1, #0
 800574e:	68b8      	ldr	r0, [r7, #8]
 8005750:	f000 fa52 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 8005754:	4603      	mov	r3, r0
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	2107      	movs	r1, #7
 800575c:	4821      	ldr	r0, [pc, #132]	; (80057e4 <xTaskIncrementTick+0x190>)
 800575e:	f001 fa5b 	bl	8006c18 <log_trace_function>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005766:	4b20      	ldr	r3, [pc, #128]	; (80057e8 <xTaskIncrementTick+0x194>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	429a      	cmp	r2, r3
 800576e:	d3ad      	bcc.n	80056cc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005774:	e7aa      	b.n	80056cc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005776:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <xTaskIncrementTick+0x194>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	4918      	ldr	r1, [pc, #96]	; (80057e0 <xTaskIncrementTick+0x18c>)
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d901      	bls.n	8005792 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800578e:	2301      	movs	r3, #1
 8005790:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8005792:	4b16      	ldr	r3, [pc, #88]	; (80057ec <xTaskIncrementTick+0x198>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <xTaskIncrementTick+0x15a>
			{
				vApplicationTickHook();
 800579a:	f001 fab5 	bl	8006d08 <vApplicationTickHook>
 800579e:	e006      	b.n	80057ae <xTaskIncrementTick+0x15a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <xTaskIncrementTick+0x198>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3301      	adds	r3, #1
 80057a6:	4a11      	ldr	r2, [pc, #68]	; (80057ec <xTaskIncrementTick+0x198>)
 80057a8:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80057aa:	f001 faad 	bl	8006d08 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057ae:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <xTaskIncrementTick+0x19c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <xTaskIncrementTick+0x166>
		{
			xSwitchRequired = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057ba:	697b      	ldr	r3, [r7, #20]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20001230 	.word	0x20001230
 80057c8:	2000120c 	.word	0x2000120c
 80057cc:	200011c0 	.word	0x200011c0
 80057d0:	200011c4 	.word	0x200011c4
 80057d4:	20001220 	.word	0x20001220
 80057d8:	20001228 	.word	0x20001228
 80057dc:	20001210 	.word	0x20001210
 80057e0:	20000d38 	.word	0x20000d38
 80057e4:	080076a8 	.word	0x080076a8
 80057e8:	20000d34 	.word	0x20000d34
 80057ec:	20001218 	.word	0x20001218
 80057f0:	2000121c 	.word	0x2000121c

080057f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057fa:	4b35      	ldr	r3, [pc, #212]	; (80058d0 <vTaskSwitchContext+0xdc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005802:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <vTaskSwitchContext+0xe0>)
 8005804:	2201      	movs	r2, #1
 8005806:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005808:	e05d      	b.n	80058c6 <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 800580a:	4b32      	ldr	r3, [pc, #200]	; (80058d4 <vTaskSwitchContext+0xe0>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8005810:	4b31      	ldr	r3, [pc, #196]	; (80058d8 <vTaskSwitchContext+0xe4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f000 f9ee 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 800581c:	4603      	mov	r3, r0
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	2105      	movs	r1, #5
 8005824:	482d      	ldr	r0, [pc, #180]	; (80058dc <vTaskSwitchContext+0xe8>)
 8005826:	f001 f9f7 	bl	8006c18 <log_trace_function>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582a:	4b2d      	ldr	r3, [pc, #180]	; (80058e0 <vTaskSwitchContext+0xec>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e012      	b.n	8005858 <vTaskSwitchContext+0x64>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10c      	bne.n	8005852 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	b672      	cpsid	i
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	b662      	cpsie	i
 800584c:	607b      	str	r3, [r7, #4]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <vTaskSwitchContext+0x5c>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b01      	subs	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	4922      	ldr	r1, [pc, #136]	; (80058e4 <vTaskSwitchContext+0xf0>)
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0e2      	beq.n	8005832 <vTaskSwitchContext+0x3e>
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4a1b      	ldr	r2, [pc, #108]	; (80058e4 <vTaskSwitchContext+0xf0>)
 8005878:	4413      	add	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	3308      	adds	r3, #8
 800588e:	429a      	cmp	r2, r3
 8005890:	d104      	bne.n	800589c <vTaskSwitchContext+0xa8>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <vTaskSwitchContext+0xe4>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4a0e      	ldr	r2, [pc, #56]	; (80058e0 <vTaskSwitchContext+0xec>)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <vTaskSwitchContext+0xe4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f9a0 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 80058b8:	4603      	mov	r3, r0
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	2104      	movs	r1, #4
 80058c0:	4809      	ldr	r0, [pc, #36]	; (80058e8 <vTaskSwitchContext+0xf4>)
 80058c2:	f001 f9a9 	bl	8006c18 <log_trace_function>
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20001230 	.word	0x20001230
 80058d4:	2000121c 	.word	0x2000121c
 80058d8:	20000d34 	.word	0x20000d34
 80058dc:	080076d0 	.word	0x080076d0
 80058e0:	20001210 	.word	0x20001210
 80058e4:	20000d38 	.word	0x20000d38
 80058e8:	080076c4 	.word	0x080076c4

080058ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10c      	bne.n	8005916 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	b672      	cpsid	i
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	b662      	cpsie	i
 8005910:	60fb      	str	r3, [r7, #12]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005916:	4b07      	ldr	r3, [pc, #28]	; (8005934 <vTaskPlaceOnEventList+0x48>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3318      	adds	r3, #24
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fe fca1 	bl	8004266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005924:	2101      	movs	r1, #1
 8005926:	6838      	ldr	r0, [r7, #0]
 8005928:	f000 fae8 	bl	8005efc <prvAddCurrentTaskToDelayedList>
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000d34 	.word	0x20000d34

08005938 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10c      	bne.n	8005964 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	b672      	cpsid	i
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	b662      	cpsie	i
 800595e:	617b      	str	r3, [r7, #20]
}
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <vTaskPlaceOnEventListRestricted+0x58>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3318      	adds	r3, #24
 800596a:	4619      	mov	r1, r3
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7fe fc56 	bl	800421e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
 800597c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	68b8      	ldr	r0, [r7, #8]
 8005982:	f000 fabb 	bl	8005efc <prvAddCurrentTaskToDelayedList>
	}
 8005986:	bf00      	nop
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000d34 	.word	0x20000d34

08005994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10c      	bne.n	80059c4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	b672      	cpsid	i
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	b662      	cpsie	i
 80059be:	60fb      	str	r3, [r7, #12]
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	3318      	adds	r3, #24
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe fc85 	bl	80042d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ce:	4b23      	ldr	r3, [pc, #140]	; (8005a5c <xTaskRemoveFromEventList+0xc8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d128      	bne.n	8005a28 <xTaskRemoveFromEventList+0x94>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	3304      	adds	r3, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe fc7c 	bl	80042d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e4:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <xTaskRemoveFromEventList+0xcc>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d903      	bls.n	80059f4 <xTaskRemoveFromEventList+0x60>
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <xTaskRemoveFromEventList+0xcc>)
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <xTaskRemoveFromEventList+0xd0>)
 8005a02:	441a      	add	r2, r3
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	3304      	adds	r3, #4
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f7fe fc07 	bl	800421e <vListInsertEnd>
 8005a10:	2100      	movs	r1, #0
 8005a12:	6938      	ldr	r0, [r7, #16]
 8005a14:	f000 f8f0 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2107      	movs	r1, #7
 8005a20:	4811      	ldr	r0, [pc, #68]	; (8005a68 <xTaskRemoveFromEventList+0xd4>)
 8005a22:	f001 f8f9 	bl	8006c18 <log_trace_function>
 8005a26:	e005      	b.n	8005a34 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	3318      	adds	r3, #24
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	480f      	ldr	r0, [pc, #60]	; (8005a6c <xTaskRemoveFromEventList+0xd8>)
 8005a30:	f7fe fbf5 	bl	800421e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a38:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <xTaskRemoveFromEventList+0xdc>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d905      	bls.n	8005a4e <xTaskRemoveFromEventList+0xba>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a42:	2301      	movs	r3, #1
 8005a44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <xTaskRemoveFromEventList+0xe0>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	e001      	b.n	8005a52 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a52:	697b      	ldr	r3, [r7, #20]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20001230 	.word	0x20001230
 8005a60:	20001210 	.word	0x20001210
 8005a64:	20000d38 	.word	0x20000d38
 8005a68:	080076a8 	.word	0x080076a8
 8005a6c:	200011c8 	.word	0x200011c8
 8005a70:	20000d34 	.word	0x20000d34
 8005a74:	2000121c 	.word	0x2000121c

08005a78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a80:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <vTaskInternalSetTimeOutState+0x24>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a88:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <vTaskInternalSetTimeOutState+0x28>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	605a      	str	r2, [r3, #4]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	20001220 	.word	0x20001220
 8005aa0:	2000120c 	.word	0x2000120c

08005aa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10c      	bne.n	8005ace <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	b672      	cpsid	i
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	b662      	cpsie	i
 8005ac8:	613b      	str	r3, [r7, #16]
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10c      	bne.n	8005aee <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	b672      	cpsid	i
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	b662      	cpsie	i
 8005ae8:	60fb      	str	r3, [r7, #12]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005aee:	f000 fec5 	bl	800687c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005af2:	4b1d      	ldr	r3, [pc, #116]	; (8005b68 <xTaskCheckForTimeOut+0xc4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d102      	bne.n	8005b12 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	e023      	b.n	8005b5a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <xTaskCheckForTimeOut+0xc8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d007      	beq.n	8005b2e <xTaskCheckForTimeOut+0x8a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d302      	bcc.n	8005b2e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	e015      	b.n	8005b5a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d20b      	bcs.n	8005b50 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	1ad2      	subs	r2, r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff ff97 	bl	8005a78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	e004      	b.n	8005b5a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b56:	2301      	movs	r3, #1
 8005b58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b5a:	f000 fec3 	bl	80068e4 <vPortExitCritical>

	return xReturn;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3720      	adds	r7, #32
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	2000120c 	.word	0x2000120c
 8005b6c:	20001220 	.word	0x20001220

08005b70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b74:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <vTaskMissedYield+0x14>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	2000121c 	.word	0x2000121c

08005b88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b90:	f000 f898 	bl	8005cc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b94:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <prvIdleTask+0x28>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d9f9      	bls.n	8005b90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <prvIdleTask+0x2c>)
 8005b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bac:	e7f0      	b.n	8005b90 <prvIdleTask+0x8>
 8005bae:	bf00      	nop
 8005bb0:	20000d38 	.word	0x20000d38
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	dc0e      	bgt.n	8005be8 <vTaskSetThreadLocalStoragePointer+0x30>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <vTaskSetThreadLocalStoragePointer+0x1e>
 8005bd0:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <vTaskSetThreadLocalStoragePointer+0x3c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	e000      	b.n	8005bd8 <vTaskSetThreadLocalStoragePointer+0x20>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	617b      	str	r3, [r7, #20]
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	3314      	adds	r3, #20
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	605a      	str	r2, [r3, #4]
		}
	}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	20000d34 	.word	0x20000d34

08005bf8 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	dc0f      	bgt.n	8005c2c <pvTaskGetThreadLocalStoragePointer+0x34>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <pvTaskGetThreadLocalStoragePointer+0x20>
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <pvTaskGetThreadLocalStoragePointer+0x48>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	e000      	b.n	8005c1a <pvTaskGetThreadLocalStoragePointer+0x22>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	3314      	adds	r3, #20
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e001      	b.n	8005c30 <pvTaskGetThreadLocalStoragePointer+0x38>
		}
		else
		{
			pvReturn = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 8005c30:	68fb      	ldr	r3, [r7, #12]
	}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20000d34 	.word	0x20000d34

08005c44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	607b      	str	r3, [r7, #4]
 8005c4e:	e00c      	b.n	8005c6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <prvInitialiseTaskLists+0x60>)
 8005c5c:	4413      	add	r3, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe fab0 	bl	80041c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3301      	adds	r3, #1
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b37      	cmp	r3, #55	; 0x37
 8005c6e:	d9ef      	bls.n	8005c50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c70:	480d      	ldr	r0, [pc, #52]	; (8005ca8 <prvInitialiseTaskLists+0x64>)
 8005c72:	f7fe faa7 	bl	80041c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c76:	480d      	ldr	r0, [pc, #52]	; (8005cac <prvInitialiseTaskLists+0x68>)
 8005c78:	f7fe faa4 	bl	80041c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c7c:	480c      	ldr	r0, [pc, #48]	; (8005cb0 <prvInitialiseTaskLists+0x6c>)
 8005c7e:	f7fe faa1 	bl	80041c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c82:	480c      	ldr	r0, [pc, #48]	; (8005cb4 <prvInitialiseTaskLists+0x70>)
 8005c84:	f7fe fa9e 	bl	80041c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c88:	480b      	ldr	r0, [pc, #44]	; (8005cb8 <prvInitialiseTaskLists+0x74>)
 8005c8a:	f7fe fa9b 	bl	80041c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <prvInitialiseTaskLists+0x78>)
 8005c90:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <prvInitialiseTaskLists+0x64>)
 8005c92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <prvInitialiseTaskLists+0x7c>)
 8005c96:	4a05      	ldr	r2, [pc, #20]	; (8005cac <prvInitialiseTaskLists+0x68>)
 8005c98:	601a      	str	r2, [r3, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000d38 	.word	0x20000d38
 8005ca8:	20001198 	.word	0x20001198
 8005cac:	200011ac 	.word	0x200011ac
 8005cb0:	200011c8 	.word	0x200011c8
 8005cb4:	200011dc 	.word	0x200011dc
 8005cb8:	200011f4 	.word	0x200011f4
 8005cbc:	200011c0 	.word	0x200011c0
 8005cc0:	200011c4 	.word	0x200011c4

08005cc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cca:	e019      	b.n	8005d00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ccc:	f000 fdd6 	bl	800687c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd0:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <prvCheckTasksWaitingTermination+0x50>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe fafb 	bl	80042d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ce2:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <prvCheckTasksWaitingTermination+0x54>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <prvCheckTasksWaitingTermination+0x54>)
 8005cea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <prvCheckTasksWaitingTermination+0x58>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <prvCheckTasksWaitingTermination+0x58>)
 8005cf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cf6:	f000 fdf5 	bl	80068e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f810 	bl	8005d20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <prvCheckTasksWaitingTermination+0x58>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e1      	bne.n	8005ccc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200011dc 	.word	0x200011dc
 8005d18:	20001208 	.word	0x20001208
 8005d1c:	200011f0 	.word	0x200011f0

08005d20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d108      	bne.n	8005d44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fede 	bl	8006af8 <vPortFree>
				vPortFree( pxTCB );
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fedb 	bl	8006af8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d42:	e01a      	b.n	8005d7a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d103      	bne.n	8005d56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fed2 	bl	8006af8 <vPortFree>
	}
 8005d54:	e011      	b.n	8005d7a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d00c      	beq.n	8005d7a <prvDeleteTCB+0x5a>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	b672      	cpsid	i
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	b662      	cpsie	i
 8005d74:	60fb      	str	r3, [r7, #12]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <prvDeleteTCB+0x58>
	}
 8005d7a:	bf00      	nop
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <prvResetNextTaskUnblockTime+0x38>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d104      	bne.n	8005d9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d94:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <prvResetNextTaskUnblockTime+0x3c>)
 8005d96:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d9c:	e008      	b.n	8005db0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9e:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <prvResetNextTaskUnblockTime+0x38>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	4a04      	ldr	r2, [pc, #16]	; (8005dc0 <prvResetNextTaskUnblockTime+0x3c>)
 8005dae:	6013      	str	r3, [r2, #0]
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	200011c0 	.word	0x200011c0
 8005dc0:	20001228 	.word	0x20001228

08005dc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <xTaskGetSchedulerState+0x34>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d102      	bne.n	8005dd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	607b      	str	r3, [r7, #4]
 8005dd6:	e008      	b.n	8005dea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd8:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <xTaskGetSchedulerState+0x38>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005de0:	2302      	movs	r3, #2
 8005de2:	607b      	str	r3, [r7, #4]
 8005de4:	e001      	b.n	8005dea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dea:	687b      	ldr	r3, [r7, #4]
	}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	20001214 	.word	0x20001214
 8005dfc:	20001230 	.word	0x20001230

08005e00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d065      	beq.n	8005ee2 <xTaskPriorityDisinherit+0xe2>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e16:	4b35      	ldr	r3, [pc, #212]	; (8005eec <xTaskPriorityDisinherit+0xec>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d00c      	beq.n	8005e3a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	b672      	cpsid	i
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	b662      	cpsie	i
 8005e34:	60fb      	str	r3, [r7, #12]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10c      	bne.n	8005e5c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	b672      	cpsid	i
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	b662      	cpsie	i
 8005e56:	60bb      	str	r3, [r7, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e60:	1e5a      	subs	r2, r3, #1
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d037      	beq.n	8005ee2 <xTaskPriorityDisinherit+0xe2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d133      	bne.n	8005ee2 <xTaskPriorityDisinherit+0xe2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe fa2a 	bl	80042d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9c:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <xTaskPriorityDisinherit+0xf0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d903      	bls.n	8005eac <xTaskPriorityDisinherit+0xac>
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	4a11      	ldr	r2, [pc, #68]	; (8005ef0 <xTaskPriorityDisinherit+0xf0>)
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4a0e      	ldr	r2, [pc, #56]	; (8005ef4 <xTaskPriorityDisinherit+0xf4>)
 8005eba:	441a      	add	r2, r3
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	f7fe f9ab 	bl	800421e <vListInsertEnd>
 8005ec8:	2100      	movs	r1, #0
 8005eca:	6938      	ldr	r0, [r7, #16]
 8005ecc:	f7ff fe94 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2107      	movs	r1, #7
 8005ed8:	4807      	ldr	r0, [pc, #28]	; (8005ef8 <xTaskPriorityDisinherit+0xf8>)
 8005eda:	f000 fe9d 	bl	8006c18 <log_trace_function>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ee2:	697b      	ldr	r3, [r7, #20]
	}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000d34 	.word	0x20000d34
 8005ef0:	20001210 	.word	0x20001210
 8005ef4:	20000d38 	.word	0x20000d38
 8005ef8:	080076a8 	.word	0x080076a8

08005efc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f06:	4b21      	ldr	r3, [pc, #132]	; (8005f8c <prvAddCurrentTaskToDelayedList+0x90>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f0c:	4b20      	ldr	r3, [pc, #128]	; (8005f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fe f9e0 	bl	80042d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d10a      	bne.n	8005f36 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d007      	beq.n	8005f36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f26:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4819      	ldr	r0, [pc, #100]	; (8005f94 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f30:	f7fe f975 	bl	800421e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f34:	e026      	b.n	8005f84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f3e:	4b14      	ldr	r3, [pc, #80]	; (8005f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d209      	bcs.n	8005f62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f7fe f983 	bl	8004266 <vListInsert>
}
 8005f60:	e010      	b.n	8005f84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f62:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	f7fe f979 	bl	8004266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d202      	bcs.n	8005f84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f7e:	4a08      	ldr	r2, [pc, #32]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6013      	str	r3, [r2, #0]
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	2000120c 	.word	0x2000120c
 8005f90:	20000d34 	.word	0x20000d34
 8005f94:	200011f4 	.word	0x200011f4
 8005f98:	200011c4 	.word	0x200011c4
 8005f9c:	200011c0 	.word	0x200011c0
 8005fa0:	20001228 	.word	0x20001228

08005fa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fae:	f000 fb15 	bl	80065dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fb2:	4b1d      	ldr	r3, [pc, #116]	; (8006028 <xTimerCreateTimerTask+0x84>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d021      	beq.n	8005ffe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fc2:	1d3a      	adds	r2, r7, #4
 8005fc4:	f107 0108 	add.w	r1, r7, #8
 8005fc8:	f107 030c 	add.w	r3, r7, #12
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe f8df 	bl	8004190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	9202      	str	r2, [sp, #8]
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	2302      	movs	r3, #2
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	460a      	mov	r2, r1
 8005fe4:	4911      	ldr	r1, [pc, #68]	; (800602c <xTimerCreateTimerTask+0x88>)
 8005fe6:	4812      	ldr	r0, [pc, #72]	; (8006030 <xTimerCreateTimerTask+0x8c>)
 8005fe8:	f7fe feaa 	bl	8004d40 <xTaskCreateStatic>
 8005fec:	4603      	mov	r3, r0
 8005fee:	4a11      	ldr	r2, [pc, #68]	; (8006034 <xTimerCreateTimerTask+0x90>)
 8005ff0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ff2:	4b10      	ldr	r3, [pc, #64]	; (8006034 <xTimerCreateTimerTask+0x90>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10c      	bne.n	800601e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	b672      	cpsid	i
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	b662      	cpsie	i
 8006018:	613b      	str	r3, [r7, #16]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800601e:	697b      	ldr	r3, [r7, #20]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20001264 	.word	0x20001264
 800602c:	080076dc 	.word	0x080076dc
 8006030:	08006175 	.word	0x08006175
 8006034:	20001268 	.word	0x20001268

08006038 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10c      	bne.n	800606a <xTimerGenericCommand+0x32>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	b672      	cpsid	i
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	b662      	cpsie	i
 8006064:	623b      	str	r3, [r7, #32]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800606a:	4b1a      	ldr	r3, [pc, #104]	; (80060d4 <xTimerGenericCommand+0x9c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d02a      	beq.n	80060c8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b05      	cmp	r3, #5
 8006082:	dc18      	bgt.n	80060b6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006084:	f7ff fe9e 	bl	8005dc4 <xTaskGetSchedulerState>
 8006088:	4603      	mov	r3, r0
 800608a:	2b02      	cmp	r3, #2
 800608c:	d109      	bne.n	80060a2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800608e:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <xTimerGenericCommand+0x9c>)
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	f107 0110 	add.w	r1, r7, #16
 8006096:	2300      	movs	r3, #0
 8006098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609a:	f7fe fa57 	bl	800454c <xQueueGenericSend>
 800609e:	6278      	str	r0, [r7, #36]	; 0x24
 80060a0:	e012      	b.n	80060c8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <xTimerGenericCommand+0x9c>)
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	f107 0110 	add.w	r1, r7, #16
 80060aa:	2300      	movs	r3, #0
 80060ac:	2200      	movs	r2, #0
 80060ae:	f7fe fa4d 	bl	800454c <xQueueGenericSend>
 80060b2:	6278      	str	r0, [r7, #36]	; 0x24
 80060b4:	e008      	b.n	80060c8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <xTimerGenericCommand+0x9c>)
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	f107 0110 	add.w	r1, r7, #16
 80060be:	2300      	movs	r3, #0
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	f7fe fb49 	bl	8004758 <xQueueGenericSendFromISR>
 80060c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3728      	adds	r7, #40	; 0x28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20001264 	.word	0x20001264

080060d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af02      	add	r7, sp, #8
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e2:	4b23      	ldr	r3, [pc, #140]	; (8006170 <prvProcessExpiredTimer+0x98>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe f8f1 	bl	80042d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d024      	beq.n	800614e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	18d1      	adds	r1, r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	6978      	ldr	r0, [r7, #20]
 8006112:	f000 f8d3 	bl	80062bc <prvInsertTimerInActiveList>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d021      	beq.n	8006160 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800611c:	2300      	movs	r3, #0
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	2300      	movs	r3, #0
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	2100      	movs	r1, #0
 8006126:	6978      	ldr	r0, [r7, #20]
 8006128:	f7ff ff86 	bl	8006038 <xTimerGenericCommand>
 800612c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d115      	bne.n	8006160 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	b672      	cpsid	i
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	b662      	cpsie	i
 8006148:	60fb      	str	r3, [r7, #12]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006154:	f023 0301 	bic.w	r3, r3, #1
 8006158:	b2da      	uxtb	r2, r3
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	6978      	ldr	r0, [r7, #20]
 8006166:	4798      	blx	r3
}
 8006168:	bf00      	nop
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	2000125c 	.word	0x2000125c

08006174 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800617c:	f107 0308 	add.w	r3, r7, #8
 8006180:	4618      	mov	r0, r3
 8006182:	f000 f857 	bl	8006234 <prvGetNextExpireTime>
 8006186:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4619      	mov	r1, r3
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f803 	bl	8006198 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006192:	f000 f8d5 	bl	8006340 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006196:	e7f1      	b.n	800617c <prvTimerTask+0x8>

08006198 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061a2:	f7ff f97b 	bl	800549c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061a6:	f107 0308 	add.w	r3, r7, #8
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f866 	bl	800627c <prvSampleTimeNow>
 80061b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d130      	bne.n	800621a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <prvProcessTimerOrBlockTask+0x3c>
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d806      	bhi.n	80061d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061c6:	f7ff f977 	bl	80054b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff ff83 	bl	80060d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061d2:	e024      	b.n	800621e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d008      	beq.n	80061ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061da:	4b13      	ldr	r3, [pc, #76]	; (8006228 <prvProcessTimerOrBlockTask+0x90>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <prvProcessTimerOrBlockTask+0x50>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <prvProcessTimerOrBlockTask+0x52>
 80061e8:	2300      	movs	r3, #0
 80061ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061ec:	4b0f      	ldr	r3, [pc, #60]	; (800622c <prvProcessTimerOrBlockTask+0x94>)
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	f7fe fd6d 	bl	8004cd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061fe:	f7ff f95b 	bl	80054b8 <xTaskResumeAll>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006208:	4b09      	ldr	r3, [pc, #36]	; (8006230 <prvProcessTimerOrBlockTask+0x98>)
 800620a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	f3bf 8f6f 	isb	sy
}
 8006218:	e001      	b.n	800621e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800621a:	f7ff f94d 	bl	80054b8 <xTaskResumeAll>
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20001260 	.word	0x20001260
 800622c:	20001264 	.word	0x20001264
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800623c:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <prvGetNextExpireTime+0x44>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <prvGetNextExpireTime+0x16>
 8006246:	2201      	movs	r2, #1
 8006248:	e000      	b.n	800624c <prvGetNextExpireTime+0x18>
 800624a:	2200      	movs	r2, #0
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d105      	bne.n	8006264 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006258:	4b07      	ldr	r3, [pc, #28]	; (8006278 <prvGetNextExpireTime+0x44>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e001      	b.n	8006268 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006268:	68fb      	ldr	r3, [r7, #12]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	2000125c 	.word	0x2000125c

0800627c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006284:	f7ff f9c4 	bl	8005610 <xTaskGetTickCount>
 8006288:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800628a:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <prvSampleTimeNow+0x3c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	429a      	cmp	r2, r3
 8006292:	d205      	bcs.n	80062a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006294:	f000 f93c 	bl	8006510 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e002      	b.n	80062a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062a6:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <prvSampleTimeNow+0x3c>)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062ac:	68fb      	ldr	r3, [r7, #12]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	2000126c 	.word	0x2000126c

080062bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d812      	bhi.n	8006308 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	1ad2      	subs	r2, r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d302      	bcc.n	80062f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062f0:	2301      	movs	r3, #1
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	e01b      	b.n	800632e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062f6:	4b10      	ldr	r3, [pc, #64]	; (8006338 <prvInsertTimerInActiveList+0x7c>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3304      	adds	r3, #4
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f7fd ffb0 	bl	8004266 <vListInsert>
 8006306:	e012      	b.n	800632e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d206      	bcs.n	800631e <prvInsertTimerInActiveList+0x62>
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d302      	bcc.n	800631e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	e007      	b.n	800632e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800631e:	4b07      	ldr	r3, [pc, #28]	; (800633c <prvInsertTimerInActiveList+0x80>)
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3304      	adds	r3, #4
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7fd ff9c 	bl	8004266 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800632e:	697b      	ldr	r3, [r7, #20]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20001260 	.word	0x20001260
 800633c:	2000125c 	.word	0x2000125c

08006340 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08e      	sub	sp, #56	; 0x38
 8006344:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006346:	e0d0      	b.n	80064ea <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	da1a      	bge.n	8006384 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800634e:	1d3b      	adds	r3, r7, #4
 8006350:	3304      	adds	r3, #4
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10c      	bne.n	8006374 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	b672      	cpsid	i
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	b662      	cpsie	i
 800636e:	61fb      	str	r3, [r7, #28]
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637a:	6850      	ldr	r0, [r2, #4]
 800637c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637e:	6892      	ldr	r2, [r2, #8]
 8006380:	4611      	mov	r1, r2
 8006382:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f2c0 80af 	blt.w	80064ea <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	3304      	adds	r3, #4
 800639c:	4618      	mov	r0, r3
 800639e:	f7fd ff9b 	bl	80042d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063a2:	463b      	mov	r3, r7
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff ff69 	bl	800627c <prvSampleTimeNow>
 80063aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b09      	cmp	r3, #9
 80063b0:	f200 809a 	bhi.w	80064e8 <prvProcessReceivedCommands+0x1a8>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <prvProcessReceivedCommands+0x7c>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063e5 	.word	0x080063e5
 80063c0:	080063e5 	.word	0x080063e5
 80063c4:	080063e5 	.word	0x080063e5
 80063c8:	0800645d 	.word	0x0800645d
 80063cc:	08006471 	.word	0x08006471
 80063d0:	080064bf 	.word	0x080064bf
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	080063e5 	.word	0x080063e5
 80063dc:	0800645d 	.word	0x0800645d
 80063e0:	08006471 	.word	0x08006471
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	18d1      	adds	r1, r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006404:	f7ff ff5a 	bl	80062bc <prvInsertTimerInActiveList>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d06d      	beq.n	80064ea <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006414:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d062      	beq.n	80064ea <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	441a      	add	r2, r3
 800642c:	2300      	movs	r3, #0
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	2300      	movs	r3, #0
 8006432:	2100      	movs	r1, #0
 8006434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006436:	f7ff fdff 	bl	8006038 <xTimerGenericCommand>
 800643a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d153      	bne.n	80064ea <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	b672      	cpsid	i
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	b662      	cpsie	i
 8006456:	61bb      	str	r3, [r7, #24]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006462:	f023 0301 	bic.w	r3, r3, #1
 8006466:	b2da      	uxtb	r2, r3
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800646e:	e03c      	b.n	80064ea <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	b2da      	uxtb	r2, r3
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10c      	bne.n	80064aa <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	b672      	cpsid	i
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	b662      	cpsie	i
 80064a4:	617b      	str	r3, [r7, #20]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	699a      	ldr	r2, [r3, #24]
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	18d1      	adds	r1, r2, r3
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b8:	f7ff ff00 	bl	80062bc <prvInsertTimerInActiveList>
					break;
 80064bc:	e015      	b.n	80064ea <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d103      	bne.n	80064d4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80064cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ce:	f000 fb13 	bl	8006af8 <vPortFree>
 80064d2:	e00a      	b.n	80064ea <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064e6:	e000      	b.n	80064ea <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80064e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064ea:	4b08      	ldr	r3, [pc, #32]	; (800650c <prvProcessReceivedCommands+0x1cc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	1d39      	adds	r1, r7, #4
 80064f0:	2200      	movs	r2, #0
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe f9d0 	bl	8004898 <xQueueReceive>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f47f af24 	bne.w	8006348 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	3730      	adds	r7, #48	; 0x30
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20001264 	.word	0x20001264

08006510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006516:	e04a      	b.n	80065ae <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006518:	4b2e      	ldr	r3, [pc, #184]	; (80065d4 <prvSwitchTimerLists+0xc4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006522:	4b2c      	ldr	r3, [pc, #176]	; (80065d4 <prvSwitchTimerLists+0xc4>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3304      	adds	r3, #4
 8006530:	4618      	mov	r0, r3
 8006532:	f7fd fed1 	bl	80042d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d030      	beq.n	80065ae <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4413      	add	r3, r2
 8006554:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	429a      	cmp	r2, r3
 800655c:	d90e      	bls.n	800657c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800656a:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <prvSwitchTimerLists+0xc4>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3304      	adds	r3, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f7fd fe76 	bl	8004266 <vListInsert>
 800657a:	e018      	b.n	80065ae <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800657c:	2300      	movs	r3, #0
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	2300      	movs	r3, #0
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	2100      	movs	r1, #0
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff fd56 	bl	8006038 <xTimerGenericCommand>
 800658c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10c      	bne.n	80065ae <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	b672      	cpsid	i
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	b662      	cpsie	i
 80065a8:	603b      	str	r3, [r7, #0]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <prvSwitchTimerLists+0xc4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1af      	bne.n	8006518 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065b8:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <prvSwitchTimerLists+0xc4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <prvSwitchTimerLists+0xc8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a04      	ldr	r2, [pc, #16]	; (80065d4 <prvSwitchTimerLists+0xc4>)
 80065c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065c6:	4a04      	ldr	r2, [pc, #16]	; (80065d8 <prvSwitchTimerLists+0xc8>)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	6013      	str	r3, [r2, #0]
}
 80065cc:	bf00      	nop
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	2000125c 	.word	0x2000125c
 80065d8:	20001260 	.word	0x20001260

080065dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065e2:	f000 f94b 	bl	800687c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065e6:	4b15      	ldr	r3, [pc, #84]	; (800663c <prvCheckForValidListAndQueue+0x60>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d120      	bne.n	8006630 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065ee:	4814      	ldr	r0, [pc, #80]	; (8006640 <prvCheckForValidListAndQueue+0x64>)
 80065f0:	f7fd fde8 	bl	80041c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065f4:	4813      	ldr	r0, [pc, #76]	; (8006644 <prvCheckForValidListAndQueue+0x68>)
 80065f6:	f7fd fde5 	bl	80041c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065fa:	4b13      	ldr	r3, [pc, #76]	; (8006648 <prvCheckForValidListAndQueue+0x6c>)
 80065fc:	4a10      	ldr	r2, [pc, #64]	; (8006640 <prvCheckForValidListAndQueue+0x64>)
 80065fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006600:	4b12      	ldr	r3, [pc, #72]	; (800664c <prvCheckForValidListAndQueue+0x70>)
 8006602:	4a10      	ldr	r2, [pc, #64]	; (8006644 <prvCheckForValidListAndQueue+0x68>)
 8006604:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006606:	2300      	movs	r3, #0
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	4b11      	ldr	r3, [pc, #68]	; (8006650 <prvCheckForValidListAndQueue+0x74>)
 800660c:	4a11      	ldr	r2, [pc, #68]	; (8006654 <prvCheckForValidListAndQueue+0x78>)
 800660e:	2110      	movs	r1, #16
 8006610:	200a      	movs	r0, #10
 8006612:	f7fd fef5 	bl	8004400 <xQueueGenericCreateStatic>
 8006616:	4603      	mov	r3, r0
 8006618:	4a08      	ldr	r2, [pc, #32]	; (800663c <prvCheckForValidListAndQueue+0x60>)
 800661a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800661c:	4b07      	ldr	r3, [pc, #28]	; (800663c <prvCheckForValidListAndQueue+0x60>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <prvCheckForValidListAndQueue+0x60>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	490b      	ldr	r1, [pc, #44]	; (8006658 <prvCheckForValidListAndQueue+0x7c>)
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe fb2a 	bl	8004c84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006630:	f000 f958 	bl	80068e4 <vPortExitCritical>
}
 8006634:	bf00      	nop
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20001264 	.word	0x20001264
 8006640:	20001234 	.word	0x20001234
 8006644:	20001248 	.word	0x20001248
 8006648:	2000125c 	.word	0x2000125c
 800664c:	20001260 	.word	0x20001260
 8006650:	20001310 	.word	0x20001310
 8006654:	20001270 	.word	0x20001270
 8006658:	080076e4 	.word	0x080076e4

0800665c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3b04      	subs	r3, #4
 800666c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3b04      	subs	r3, #4
 800667a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f023 0201 	bic.w	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3b04      	subs	r3, #4
 800668a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800668c:	4a0c      	ldr	r2, [pc, #48]	; (80066c0 <pxPortInitialiseStack+0x64>)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3b14      	subs	r3, #20
 8006696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3b04      	subs	r3, #4
 80066a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f06f 0202 	mvn.w	r2, #2
 80066aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3b20      	subs	r3, #32
 80066b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066b2:	68fb      	ldr	r3, [r7, #12]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	080066c5 	.word	0x080066c5

080066c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066ce:	4b14      	ldr	r3, [pc, #80]	; (8006720 <prvTaskExitError+0x5c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d00c      	beq.n	80066f2 <prvTaskExitError+0x2e>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	b672      	cpsid	i
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	b662      	cpsie	i
 80066ec:	60fb      	str	r3, [r7, #12]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <prvTaskExitError+0x2c>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	b672      	cpsid	i
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	b662      	cpsie	i
 8006706:	60bb      	str	r3, [r7, #8]
}
 8006708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800670a:	bf00      	nop
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0fc      	beq.n	800670c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006712:	bf00      	nop
 8006714:	bf00      	nop
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	2000000c 	.word	0x2000000c
	...

08006730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006730:	4b07      	ldr	r3, [pc, #28]	; (8006750 <pxCurrentTCBConst2>)
 8006732:	6819      	ldr	r1, [r3, #0]
 8006734:	6808      	ldr	r0, [r1, #0]
 8006736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673a:	f380 8809 	msr	PSP, r0
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f380 8811 	msr	BASEPRI, r0
 800674a:	4770      	bx	lr
 800674c:	f3af 8000 	nop.w

08006750 <pxCurrentTCBConst2>:
 8006750:	20000d34 	.word	0x20000d34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop

08006758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006758:	4808      	ldr	r0, [pc, #32]	; (800677c <prvPortStartFirstTask+0x24>)
 800675a:	6800      	ldr	r0, [r0, #0]
 800675c:	6800      	ldr	r0, [r0, #0]
 800675e:	f380 8808 	msr	MSP, r0
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8814 	msr	CONTROL, r0
 800676a:	b662      	cpsie	i
 800676c:	b661      	cpsie	f
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	df00      	svc	0
 8006778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800677a:	bf00      	nop
 800677c:	e000ed08 	.word	0xe000ed08

08006780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006786:	4b37      	ldr	r3, [pc, #220]	; (8006864 <xPortStartScheduler+0xe4>)
 8006788:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	b2db      	uxtb	r3, r3
 8006790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	22ff      	movs	r2, #255	; 0xff
 8006796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <xPortStartScheduler+0xe8>)
 80067ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067ae:	4b2f      	ldr	r3, [pc, #188]	; (800686c <xPortStartScheduler+0xec>)
 80067b0:	2207      	movs	r2, #7
 80067b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067b4:	e009      	b.n	80067ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80067b6:	4b2d      	ldr	r3, [pc, #180]	; (800686c <xPortStartScheduler+0xec>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	4a2b      	ldr	r2, [pc, #172]	; (800686c <xPortStartScheduler+0xec>)
 80067be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ca:	78fb      	ldrb	r3, [r7, #3]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d2:	2b80      	cmp	r3, #128	; 0x80
 80067d4:	d0ef      	beq.n	80067b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067d6:	4b25      	ldr	r3, [pc, #148]	; (800686c <xPortStartScheduler+0xec>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f1c3 0307 	rsb	r3, r3, #7
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d00c      	beq.n	80067fc <xPortStartScheduler+0x7c>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	b672      	cpsid	i
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	b662      	cpsie	i
 80067f6:	60bb      	str	r3, [r7, #8]
}
 80067f8:	bf00      	nop
 80067fa:	e7fe      	b.n	80067fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067fc:	4b1b      	ldr	r3, [pc, #108]	; (800686c <xPortStartScheduler+0xec>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	4a1a      	ldr	r2, [pc, #104]	; (800686c <xPortStartScheduler+0xec>)
 8006804:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006806:	4b19      	ldr	r3, [pc, #100]	; (800686c <xPortStartScheduler+0xec>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800680e:	4a17      	ldr	r2, [pc, #92]	; (800686c <xPortStartScheduler+0xec>)
 8006810:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800681a:	4b15      	ldr	r3, [pc, #84]	; (8006870 <xPortStartScheduler+0xf0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a14      	ldr	r2, [pc, #80]	; (8006870 <xPortStartScheduler+0xf0>)
 8006820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006824:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006826:	4b12      	ldr	r3, [pc, #72]	; (8006870 <xPortStartScheduler+0xf0>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a11      	ldr	r2, [pc, #68]	; (8006870 <xPortStartScheduler+0xf0>)
 800682c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006830:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006832:	f000 f8dd 	bl	80069f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006836:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <xPortStartScheduler+0xf4>)
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800683c:	f000 f8fc 	bl	8006a38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006840:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <xPortStartScheduler+0xf8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a0c      	ldr	r2, [pc, #48]	; (8006878 <xPortStartScheduler+0xf8>)
 8006846:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800684a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800684c:	f7ff ff84 	bl	8006758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006850:	f7fe ffd0 	bl	80057f4 <vTaskSwitchContext>
	prvTaskExitError();
 8006854:	f7ff ff36 	bl	80066c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	e000e400 	.word	0xe000e400
 8006868:	20001360 	.word	0x20001360
 800686c:	20001364 	.word	0x20001364
 8006870:	e000ed20 	.word	0xe000ed20
 8006874:	2000000c 	.word	0x2000000c
 8006878:	e000ef34 	.word	0xe000ef34

0800687c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	b672      	cpsid	i
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	b662      	cpsie	i
 8006896:	607b      	str	r3, [r7, #4]
}
 8006898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <vPortEnterCritical+0x60>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3301      	adds	r3, #1
 80068a0:	4a0e      	ldr	r2, [pc, #56]	; (80068dc <vPortEnterCritical+0x60>)
 80068a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068a4:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <vPortEnterCritical+0x60>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d111      	bne.n	80068d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068ac:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <vPortEnterCritical+0x64>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00c      	beq.n	80068d0 <vPortEnterCritical+0x54>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	b672      	cpsid	i
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	b662      	cpsie	i
 80068ca:	603b      	str	r3, [r7, #0]
}
 80068cc:	bf00      	nop
 80068ce:	e7fe      	b.n	80068ce <vPortEnterCritical+0x52>
	}
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	2000000c 	.word	0x2000000c
 80068e0:	e000ed04 	.word	0xe000ed04

080068e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068ea:	4b13      	ldr	r3, [pc, #76]	; (8006938 <vPortExitCritical+0x54>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10c      	bne.n	800690c <vPortExitCritical+0x28>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	b672      	cpsid	i
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	b662      	cpsie	i
 8006906:	607b      	str	r3, [r7, #4]
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800690c:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <vPortExitCritical+0x54>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3b01      	subs	r3, #1
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <vPortExitCritical+0x54>)
 8006914:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006916:	4b08      	ldr	r3, [pc, #32]	; (8006938 <vPortExitCritical+0x54>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d105      	bne.n	800692a <vPortExitCritical+0x46>
 800691e:	2300      	movs	r3, #0
 8006920:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	f383 8811 	msr	BASEPRI, r3
}
 8006928:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	2000000c 	.word	0x2000000c
 800693c:	00000000 	.word	0x00000000

08006940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006940:	f3ef 8009 	mrs	r0, PSP
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <pxCurrentTCBConst>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	f01e 0f10 	tst.w	lr, #16
 8006950:	bf08      	it	eq
 8006952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695a:	6010      	str	r0, [r2, #0]
 800695c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006964:	b672      	cpsid	i
 8006966:	f380 8811 	msr	BASEPRI, r0
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	b662      	cpsie	i
 8006974:	f7fe ff3e 	bl	80057f4 <vTaskSwitchContext>
 8006978:	f04f 0000 	mov.w	r0, #0
 800697c:	f380 8811 	msr	BASEPRI, r0
 8006980:	bc09      	pop	{r0, r3}
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	6808      	ldr	r0, [r1, #0]
 8006986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	f01e 0f10 	tst.w	lr, #16
 800698e:	bf08      	it	eq
 8006990:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006994:	f380 8809 	msr	PSP, r0
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop

080069a0 <pxCurrentTCBConst>:
 80069a0:	20000d34 	.word	0x20000d34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	b672      	cpsid	i
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	b662      	cpsie	i
 80069c2:	607b      	str	r3, [r7, #4]
}
 80069c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069c6:	f7fe fe45 	bl	8005654 <xTaskIncrementTick>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069d0:	4b06      	ldr	r3, [pc, #24]	; (80069ec <xPortSysTickHandler+0x44>)
 80069d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	2300      	movs	r3, #0
 80069da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f383 8811 	msr	BASEPRI, r3
}
 80069e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069e4:	bf00      	nop
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	e000ed04 	.word	0xe000ed04

080069f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069f4:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <vPortSetupTimerInterrupt+0x34>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <vPortSetupTimerInterrupt+0x38>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <vPortSetupTimerInterrupt+0x3c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <vPortSetupTimerInterrupt+0x40>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	099b      	lsrs	r3, r3, #6
 8006a0c:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <vPortSetupTimerInterrupt+0x44>)
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a12:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <vPortSetupTimerInterrupt+0x34>)
 8006a14:	2207      	movs	r2, #7
 8006a16:	601a      	str	r2, [r3, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	e000e010 	.word	0xe000e010
 8006a28:	e000e018 	.word	0xe000e018
 8006a2c:	20000000 	.word	0x20000000
 8006a30:	10624dd3 	.word	0x10624dd3
 8006a34:	e000e014 	.word	0xe000e014

08006a38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a48 <vPortEnableVFP+0x10>
 8006a3c:	6801      	ldr	r1, [r0, #0]
 8006a3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a42:	6001      	str	r1, [r0, #0]
 8006a44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a46:	bf00      	nop
 8006a48:	e000ed88 	.word	0xe000ed88

08006a4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a52:	f3ef 8305 	mrs	r3, IPSR
 8006a56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b0f      	cmp	r3, #15
 8006a5c:	d916      	bls.n	8006a8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a5e:	4a19      	ldr	r2, [pc, #100]	; (8006ac4 <vPortValidateInterruptPriority+0x78>)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a68:	4b17      	ldr	r3, [pc, #92]	; (8006ac8 <vPortValidateInterruptPriority+0x7c>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	7afa      	ldrb	r2, [r7, #11]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d20c      	bcs.n	8006a8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	b672      	cpsid	i
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	b662      	cpsie	i
 8006a86:	607b      	str	r3, [r7, #4]
}
 8006a88:	bf00      	nop
 8006a8a:	e7fe      	b.n	8006a8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <vPortValidateInterruptPriority+0x80>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a94:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <vPortValidateInterruptPriority+0x84>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d90c      	bls.n	8006ab6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	b672      	cpsid	i
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	b662      	cpsie	i
 8006ab0:	603b      	str	r3, [r7, #0]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <vPortValidateInterruptPriority+0x68>
	}
 8006ab6:	bf00      	nop
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	e000e3f0 	.word	0xe000e3f0
 8006ac8:	20001360 	.word	0x20001360
 8006acc:	e000ed0c 	.word	0xe000ed0c
 8006ad0:	20001364 	.word	0x20001364

08006ad4 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8006adc:	f7fe fcde 	bl	800549c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f91f 	bl	8006d24 <malloc>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006aea:	f7fe fce5 	bl	80054b8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8006aee:	68fb      	ldr	r3, [r7, #12]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	if( pv )
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d006      	beq.n	8006b14 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8006b06:	f7fe fcc9 	bl	800549c <vTaskSuspendAll>
		{
			free( pv );
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f912 	bl	8006d34 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8006b10:	f7fe fcd2 	bl	80054b8 <xTaskResumeAll>
	}
}
 8006b14:	bf00      	nop
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <rtg_init>:
#include "log.h"
TaskHandle_t xTask1_handle;
TaskHandle_t xTask2_handle;

void rtg_init()
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af02      	add	r7, sp, #8
	log_init_function();
 8006b22:	f000 f863 	bl	8006bec <log_init_function>
	xTaskCreate(rtgTask, "my_task", 128 * 4, (void*)1, 0 ,&xTask1_handle);
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <rtg_init+0x3c>)
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b34:	4909      	ldr	r1, [pc, #36]	; (8006b5c <rtg_init+0x40>)
 8006b36:	480a      	ldr	r0, [pc, #40]	; (8006b60 <rtg_init+0x44>)
 8006b38:	f7fe f965 	bl	8004e06 <xTaskCreate>
	xTaskCreate(rtgTask, "my_task1", 128 * 4, (void*)2, 1, &xTask2_handle);
 8006b3c:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <rtg_init+0x48>)
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	2301      	movs	r3, #1
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	2302      	movs	r3, #2
 8006b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b4a:	4907      	ldr	r1, [pc, #28]	; (8006b68 <rtg_init+0x4c>)
 8006b4c:	4804      	ldr	r0, [pc, #16]	; (8006b60 <rtg_init+0x44>)
 8006b4e:	f7fe f95a 	bl	8004e06 <xTaskCreate>

}
 8006b52:	bf00      	nop
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20001368 	.word	0x20001368
 8006b5c:	080076ec 	.word	0x080076ec
 8006b60:	08006b6d 	.word	0x08006b6d
 8006b64:	2000136c 	.word	0x2000136c
 8006b68:	080076f4 	.word	0x080076f4

08006b6c <rtgTask>:
unsigned int taskIDs[] = {1,2};
void rtgTask(void *argument)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
	unsigned int value;
	unsigned int count = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]

	value = (unsigned int )argument;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60bb      	str	r3, [r7, #8]
	vTaskSetThreadLocalStoragePointer(NULL, 0, (void*)&taskIDs[value]);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4a17      	ldr	r2, [pc, #92]	; (8006be0 <rtgTask+0x74>)
 8006b82:	4413      	add	r3, r2
 8006b84:	461a      	mov	r2, r3
 8006b86:	2100      	movs	r1, #0
 8006b88:	2000      	movs	r0, #0
 8006b8a:	f7ff f815 	bl	8005bb8 <vTaskSetThreadLocalStoragePointer>
	log_trace_function("task create",LOG_TASK_CREATE,0);
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	4814      	ldr	r0, [pc, #80]	; (8006be4 <rtgTask+0x78>)
 8006b94:	f000 f840 	bl	8006c18 <log_trace_function>
	while(1)
	{
		count++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]
		log_trace_function("task loop start",LOG_TASK_START,count);
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4811      	ldr	r0, [pc, #68]	; (8006be8 <rtgTask+0x7c>)
 8006ba4:	f000 f838 	bl	8006c18 <log_trace_function>
		switch(value)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d003      	beq.n	8006bb6 <rtgTask+0x4a>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d007      	beq.n	8006bc4 <rtgTask+0x58>
 8006bb4:	e00d      	b.n	8006bd2 <rtgTask+0x66>
		{
		case 1:
			printf("1");
 8006bb6:	2031      	movs	r0, #49	; 0x31
 8006bb8:	f000 fa32 	bl	8007020 <putchar>
			osDelay(1);
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	f7fd fa9f 	bl	8004100 <osDelay>

		    break;
 8006bc2:	e006      	b.n	8006bd2 <rtgTask+0x66>
		case 2:
			printf("2");
 8006bc4:	2032      	movs	r0, #50	; 0x32
 8006bc6:	f000 fa2b 	bl	8007020 <putchar>
			osDelay(2);
 8006bca:	2002      	movs	r0, #2
 8006bcc:	f7fd fa98 	bl	8004100 <osDelay>
			break;
 8006bd0:	bf00      	nop

		}
		log_trace_function("task loop start",LOG_TASK_END,count);
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	2102      	movs	r1, #2
 8006bd6:	4804      	ldr	r0, [pc, #16]	; (8006be8 <rtgTask+0x7c>)
 8006bd8:	f000 f81e 	bl	8006c18 <log_trace_function>
		count++;
 8006bdc:	e7dc      	b.n	8006b98 <rtgTask+0x2c>
 8006bde:	bf00      	nop
 8006be0:	20000010 	.word	0x20000010
 8006be4:	08007700 	.word	0x08007700
 8006be8:	0800770c 	.word	0x0800770c

08006bec <log_init_function>:
unsigned long log_index;
unsigned char log_mode;
unsigned char log_running = 1;

void log_init_function(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
	log_index = 0;
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <log_init_function+0x20>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
	log_mode = LOG_MODE_ONESHOT;
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <log_init_function+0x24>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	701a      	strb	r2, [r3, #0]
	log_running = 1;
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <log_init_function+0x28>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	701a      	strb	r2, [r3, #0]
}
 8006c02:	bf00      	nop
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	20001b70 	.word	0x20001b70
 8006c10:	20001b74 	.word	0x20001b74
 8006c14:	20000018 	.word	0x20000018

08006c18 <log_trace_function>:
int log_trace_function(char *fmt,unsigned char key,unsigned long payload)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	460b      	mov	r3, r1
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	72fb      	strb	r3, [r7, #11]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c26:	f3ef 8310 	mrs	r3, PRIMASK
 8006c2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c2c:	69bb      	ldr	r3, [r7, #24]

    uint32_t primask = __get_PRIMASK();  // Save current interrupt state
 8006c2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c30:	b672      	cpsid	i
}
 8006c32:	bf00      	nop
    __disable_irq();                     // Globally disable interrupts

	if(log_running) {
 8006c34:	4b30      	ldr	r3, [pc, #192]	; (8006cf8 <log_trace_function+0xe0>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d051      	beq.n	8006ce0 <log_trace_function+0xc8>
		log_buffer[log_index].key = key;
 8006c3c:	4b2f      	ldr	r3, [pc, #188]	; (8006cfc <log_trace_function+0xe4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	492f      	ldr	r1, [pc, #188]	; (8006d00 <log_trace_function+0xe8>)
 8006c42:	7afa      	ldrb	r2, [r7, #11]
 8006c44:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
		log_buffer[log_index].payload = payload;
 8006c48:	4b2c      	ldr	r3, [pc, #176]	; (8006cfc <log_trace_function+0xe4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a2c      	ldr	r2, [pc, #176]	; (8006d00 <log_trace_function+0xe8>)
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4413      	add	r3, r2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c56:	f3ef 8305 	mrs	r3, IPSR
 8006c5a:	617b      	str	r3, [r7, #20]
  return(result);
 8006c5c:	697b      	ldr	r3, [r7, #20]
		if (portCHECK_IF_IN_ISR()) {
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d012      	beq.n	8006c88 <log_trace_function+0x70>
			log_buffer[log_index].who = LOG_IN_ISR;
 8006c62:	4b26      	ldr	r3, [pc, #152]	; (8006cfc <log_trace_function+0xe4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a26      	ldr	r2, [pc, #152]	; (8006d00 <log_trace_function+0xe8>)
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	22ff      	movs	r2, #255	; 0xff
 8006c6e:	705a      	strb	r2, [r3, #1]
			log_buffer[log_index].tick = xTaskGetTickCountFromISR();
 8006c70:	f7fe fcde 	bl	8005630 <xTaskGetTickCountFromISR>
 8006c74:	4602      	mov	r2, r0
 8006c76:	4b21      	ldr	r3, [pc, #132]	; (8006cfc <log_trace_function+0xe4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	b291      	uxth	r1, r2
 8006c7c:	4a20      	ldr	r2, [pc, #128]	; (8006d00 <log_trace_function+0xe8>)
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	4413      	add	r3, r2
 8006c82:	460a      	mov	r2, r1
 8006c84:	805a      	strh	r2, [r3, #2]
 8006c86:	e017      	b.n	8006cb8 <log_trace_function+0xa0>

		} else {
			log_buffer[log_index].who = *(unsigned char*)pvTaskGetThreadLocalStoragePointer(NULL, 0);
 8006c88:	2100      	movs	r1, #0
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	f7fe ffb4 	bl	8005bf8 <pvTaskGetThreadLocalStoragePointer>
 8006c90:	4602      	mov	r2, r0
 8006c92:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <log_trace_function+0xe4>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	7811      	ldrb	r1, [r2, #0]
 8006c98:	4a19      	ldr	r2, [pc, #100]	; (8006d00 <log_trace_function+0xe8>)
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	460a      	mov	r2, r1
 8006ca0:	705a      	strb	r2, [r3, #1]
;
			log_buffer[log_index].tick = xTaskGetTickCount();
 8006ca2:	f7fe fcb5 	bl	8005610 <xTaskGetTickCount>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	4b14      	ldr	r3, [pc, #80]	; (8006cfc <log_trace_function+0xe4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	b291      	uxth	r1, r2
 8006cae:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <log_trace_function+0xe8>)
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	460a      	mov	r2, r1
 8006cb6:	805a      	strh	r2, [r3, #2]

		}
			log_index++;
 8006cb8:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <log_trace_function+0xe4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	4a0f      	ldr	r2, [pc, #60]	; (8006cfc <log_trace_function+0xe4>)
 8006cc0:	6013      	str	r3, [r2, #0]
		if(log_index >= LOG_MAX_SIZE-1){
 8006cc2:	4b0e      	ldr	r3, [pc, #56]	; (8006cfc <log_trace_function+0xe4>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2bfe      	cmp	r3, #254	; 0xfe
 8006cc8:	d90a      	bls.n	8006ce0 <log_trace_function+0xc8>
			if(log_mode == LOG_MODE_ONESHOT) {
 8006cca:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <log_trace_function+0xec>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d103      	bne.n	8006cda <log_trace_function+0xc2>
				log_running = 0;
 8006cd2:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <log_trace_function+0xe0>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	e002      	b.n	8006ce0 <log_trace_function+0xc8>
			} else {
				log_index = 0;
 8006cda:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <log_trace_function+0xe4>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f383 8810 	msr	PRIMASK, r3
}
 8006cea:	bf00      	nop
			}
		}
	}
	__set_PRIMASK(primask);             // Restore previous interrupt state
	return 0;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000018 	.word	0x20000018
 8006cfc:	20001b70 	.word	0x20001b70
 8006d00:	20001370 	.word	0x20001370
 8006d04:	20001b74 	.word	0x20001b74

08006d08 <vApplicationTickHook>:
void vApplicationTickHook(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
   log_trace_function("tick", LOG_KRRNEL_TICK_ISR,xTaskGetTickCount() );  // Or define a new key like LOG_TICK
 8006d0c:	f7fe fc80 	bl	8005610 <xTaskGetTickCount>
 8006d10:	4603      	mov	r3, r0
 8006d12:	461a      	mov	r2, r3
 8006d14:	2108      	movs	r1, #8
 8006d16:	4802      	ldr	r0, [pc, #8]	; (8006d20 <vApplicationTickHook+0x18>)
 8006d18:	f7ff ff7e 	bl	8006c18 <log_trace_function>
}
 8006d1c:	bf00      	nop
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	0800771c 	.word	0x0800771c

08006d24 <malloc>:
 8006d24:	4b02      	ldr	r3, [pc, #8]	; (8006d30 <malloc+0xc>)
 8006d26:	4601      	mov	r1, r0
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	f000 b82b 	b.w	8006d84 <_malloc_r>
 8006d2e:	bf00      	nop
 8006d30:	20000074 	.word	0x20000074

08006d34 <free>:
 8006d34:	4b02      	ldr	r3, [pc, #8]	; (8006d40 <free+0xc>)
 8006d36:	4601      	mov	r1, r0
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	f000 ba57 	b.w	80071ec <_free_r>
 8006d3e:	bf00      	nop
 8006d40:	20000074 	.word	0x20000074

08006d44 <sbrk_aligned>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	4e0e      	ldr	r6, [pc, #56]	; (8006d80 <sbrk_aligned+0x3c>)
 8006d48:	460c      	mov	r4, r1
 8006d4a:	6831      	ldr	r1, [r6, #0]
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	b911      	cbnz	r1, 8006d56 <sbrk_aligned+0x12>
 8006d50:	f000 f9ee 	bl	8007130 <_sbrk_r>
 8006d54:	6030      	str	r0, [r6, #0]
 8006d56:	4621      	mov	r1, r4
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f000 f9e9 	bl	8007130 <_sbrk_r>
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	d00a      	beq.n	8006d78 <sbrk_aligned+0x34>
 8006d62:	1cc4      	adds	r4, r0, #3
 8006d64:	f024 0403 	bic.w	r4, r4, #3
 8006d68:	42a0      	cmp	r0, r4
 8006d6a:	d007      	beq.n	8006d7c <sbrk_aligned+0x38>
 8006d6c:	1a21      	subs	r1, r4, r0
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f000 f9de 	bl	8007130 <_sbrk_r>
 8006d74:	3001      	adds	r0, #1
 8006d76:	d101      	bne.n	8006d7c <sbrk_aligned+0x38>
 8006d78:	f04f 34ff 	mov.w	r4, #4294967295
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	20001b7c 	.word	0x20001b7c

08006d84 <_malloc_r>:
 8006d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d88:	1ccd      	adds	r5, r1, #3
 8006d8a:	f025 0503 	bic.w	r5, r5, #3
 8006d8e:	3508      	adds	r5, #8
 8006d90:	2d0c      	cmp	r5, #12
 8006d92:	bf38      	it	cc
 8006d94:	250c      	movcc	r5, #12
 8006d96:	2d00      	cmp	r5, #0
 8006d98:	4607      	mov	r7, r0
 8006d9a:	db01      	blt.n	8006da0 <_malloc_r+0x1c>
 8006d9c:	42a9      	cmp	r1, r5
 8006d9e:	d905      	bls.n	8006dac <_malloc_r+0x28>
 8006da0:	230c      	movs	r3, #12
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	2600      	movs	r6, #0
 8006da6:	4630      	mov	r0, r6
 8006da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e80 <_malloc_r+0xfc>
 8006db0:	f000 f868 	bl	8006e84 <__malloc_lock>
 8006db4:	f8d8 3000 	ldr.w	r3, [r8]
 8006db8:	461c      	mov	r4, r3
 8006dba:	bb5c      	cbnz	r4, 8006e14 <_malloc_r+0x90>
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	f7ff ffc0 	bl	8006d44 <sbrk_aligned>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	d155      	bne.n	8006e76 <_malloc_r+0xf2>
 8006dca:	f8d8 4000 	ldr.w	r4, [r8]
 8006dce:	4626      	mov	r6, r4
 8006dd0:	2e00      	cmp	r6, #0
 8006dd2:	d145      	bne.n	8006e60 <_malloc_r+0xdc>
 8006dd4:	2c00      	cmp	r4, #0
 8006dd6:	d048      	beq.n	8006e6a <_malloc_r+0xe6>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4638      	mov	r0, r7
 8006dde:	eb04 0903 	add.w	r9, r4, r3
 8006de2:	f000 f9a5 	bl	8007130 <_sbrk_r>
 8006de6:	4581      	cmp	r9, r0
 8006de8:	d13f      	bne.n	8006e6a <_malloc_r+0xe6>
 8006dea:	6821      	ldr	r1, [r4, #0]
 8006dec:	1a6d      	subs	r5, r5, r1
 8006dee:	4629      	mov	r1, r5
 8006df0:	4638      	mov	r0, r7
 8006df2:	f7ff ffa7 	bl	8006d44 <sbrk_aligned>
 8006df6:	3001      	adds	r0, #1
 8006df8:	d037      	beq.n	8006e6a <_malloc_r+0xe6>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	442b      	add	r3, r5
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	f8d8 3000 	ldr.w	r3, [r8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d038      	beq.n	8006e7a <_malloc_r+0xf6>
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	42a2      	cmp	r2, r4
 8006e0c:	d12b      	bne.n	8006e66 <_malloc_r+0xe2>
 8006e0e:	2200      	movs	r2, #0
 8006e10:	605a      	str	r2, [r3, #4]
 8006e12:	e00f      	b.n	8006e34 <_malloc_r+0xb0>
 8006e14:	6822      	ldr	r2, [r4, #0]
 8006e16:	1b52      	subs	r2, r2, r5
 8006e18:	d41f      	bmi.n	8006e5a <_malloc_r+0xd6>
 8006e1a:	2a0b      	cmp	r2, #11
 8006e1c:	d917      	bls.n	8006e4e <_malloc_r+0xca>
 8006e1e:	1961      	adds	r1, r4, r5
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	6025      	str	r5, [r4, #0]
 8006e24:	bf18      	it	ne
 8006e26:	6059      	strne	r1, [r3, #4]
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	bf08      	it	eq
 8006e2c:	f8c8 1000 	streq.w	r1, [r8]
 8006e30:	5162      	str	r2, [r4, r5]
 8006e32:	604b      	str	r3, [r1, #4]
 8006e34:	4638      	mov	r0, r7
 8006e36:	f104 060b 	add.w	r6, r4, #11
 8006e3a:	f000 f829 	bl	8006e90 <__malloc_unlock>
 8006e3e:	f026 0607 	bic.w	r6, r6, #7
 8006e42:	1d23      	adds	r3, r4, #4
 8006e44:	1af2      	subs	r2, r6, r3
 8006e46:	d0ae      	beq.n	8006da6 <_malloc_r+0x22>
 8006e48:	1b9b      	subs	r3, r3, r6
 8006e4a:	50a3      	str	r3, [r4, r2]
 8006e4c:	e7ab      	b.n	8006da6 <_malloc_r+0x22>
 8006e4e:	42a3      	cmp	r3, r4
 8006e50:	6862      	ldr	r2, [r4, #4]
 8006e52:	d1dd      	bne.n	8006e10 <_malloc_r+0x8c>
 8006e54:	f8c8 2000 	str.w	r2, [r8]
 8006e58:	e7ec      	b.n	8006e34 <_malloc_r+0xb0>
 8006e5a:	4623      	mov	r3, r4
 8006e5c:	6864      	ldr	r4, [r4, #4]
 8006e5e:	e7ac      	b.n	8006dba <_malloc_r+0x36>
 8006e60:	4634      	mov	r4, r6
 8006e62:	6876      	ldr	r6, [r6, #4]
 8006e64:	e7b4      	b.n	8006dd0 <_malloc_r+0x4c>
 8006e66:	4613      	mov	r3, r2
 8006e68:	e7cc      	b.n	8006e04 <_malloc_r+0x80>
 8006e6a:	230c      	movs	r3, #12
 8006e6c:	603b      	str	r3, [r7, #0]
 8006e6e:	4638      	mov	r0, r7
 8006e70:	f000 f80e 	bl	8006e90 <__malloc_unlock>
 8006e74:	e797      	b.n	8006da6 <_malloc_r+0x22>
 8006e76:	6025      	str	r5, [r4, #0]
 8006e78:	e7dc      	b.n	8006e34 <_malloc_r+0xb0>
 8006e7a:	605b      	str	r3, [r3, #4]
 8006e7c:	deff      	udf	#255	; 0xff
 8006e7e:	bf00      	nop
 8006e80:	20001b78 	.word	0x20001b78

08006e84 <__malloc_lock>:
 8006e84:	4801      	ldr	r0, [pc, #4]	; (8006e8c <__malloc_lock+0x8>)
 8006e86:	f000 b9a0 	b.w	80071ca <__retarget_lock_acquire_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	20001cc0 	.word	0x20001cc0

08006e90 <__malloc_unlock>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__malloc_unlock+0x8>)
 8006e92:	f000 b99b 	b.w	80071cc <__retarget_lock_release_recursive>
 8006e96:	bf00      	nop
 8006e98:	20001cc0 	.word	0x20001cc0

08006e9c <std>:
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eaa:	6083      	str	r3, [r0, #8]
 8006eac:	8181      	strh	r1, [r0, #12]
 8006eae:	6643      	str	r3, [r0, #100]	; 0x64
 8006eb0:	81c2      	strh	r2, [r0, #14]
 8006eb2:	6183      	str	r3, [r0, #24]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	305c      	adds	r0, #92	; 0x5c
 8006eba:	f000 f8fc 	bl	80070b6 <memset>
 8006ebe:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <std+0x58>)
 8006ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ec2:	4b0d      	ldr	r3, [pc, #52]	; (8006ef8 <std+0x5c>)
 8006ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ec6:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <std+0x60>)
 8006ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eca:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <std+0x64>)
 8006ecc:	6323      	str	r3, [r4, #48]	; 0x30
 8006ece:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <std+0x68>)
 8006ed0:	6224      	str	r4, [r4, #32]
 8006ed2:	429c      	cmp	r4, r3
 8006ed4:	d006      	beq.n	8006ee4 <std+0x48>
 8006ed6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006eda:	4294      	cmp	r4, r2
 8006edc:	d002      	beq.n	8006ee4 <std+0x48>
 8006ede:	33d0      	adds	r3, #208	; 0xd0
 8006ee0:	429c      	cmp	r4, r3
 8006ee2:	d105      	bne.n	8006ef0 <std+0x54>
 8006ee4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eec:	f000 b96c 	b.w	80071c8 <__retarget_lock_init_recursive>
 8006ef0:	bd10      	pop	{r4, pc}
 8006ef2:	bf00      	nop
 8006ef4:	08007031 	.word	0x08007031
 8006ef8:	08007053 	.word	0x08007053
 8006efc:	0800708b 	.word	0x0800708b
 8006f00:	080070af 	.word	0x080070af
 8006f04:	20001b80 	.word	0x20001b80

08006f08 <stdio_exit_handler>:
 8006f08:	4a02      	ldr	r2, [pc, #8]	; (8006f14 <stdio_exit_handler+0xc>)
 8006f0a:	4903      	ldr	r1, [pc, #12]	; (8006f18 <stdio_exit_handler+0x10>)
 8006f0c:	4803      	ldr	r0, [pc, #12]	; (8006f1c <stdio_exit_handler+0x14>)
 8006f0e:	f000 b869 	b.w	8006fe4 <_fwalk_sglue>
 8006f12:	bf00      	nop
 8006f14:	2000001c 	.word	0x2000001c
 8006f18:	08007391 	.word	0x08007391
 8006f1c:	20000028 	.word	0x20000028

08006f20 <cleanup_stdio>:
 8006f20:	6841      	ldr	r1, [r0, #4]
 8006f22:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <cleanup_stdio+0x34>)
 8006f24:	4299      	cmp	r1, r3
 8006f26:	b510      	push	{r4, lr}
 8006f28:	4604      	mov	r4, r0
 8006f2a:	d001      	beq.n	8006f30 <cleanup_stdio+0x10>
 8006f2c:	f000 fa30 	bl	8007390 <_fflush_r>
 8006f30:	68a1      	ldr	r1, [r4, #8]
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <cleanup_stdio+0x38>)
 8006f34:	4299      	cmp	r1, r3
 8006f36:	d002      	beq.n	8006f3e <cleanup_stdio+0x1e>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 fa29 	bl	8007390 <_fflush_r>
 8006f3e:	68e1      	ldr	r1, [r4, #12]
 8006f40:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <cleanup_stdio+0x3c>)
 8006f42:	4299      	cmp	r1, r3
 8006f44:	d004      	beq.n	8006f50 <cleanup_stdio+0x30>
 8006f46:	4620      	mov	r0, r4
 8006f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f4c:	f000 ba20 	b.w	8007390 <_fflush_r>
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	bf00      	nop
 8006f54:	20001b80 	.word	0x20001b80
 8006f58:	20001be8 	.word	0x20001be8
 8006f5c:	20001c50 	.word	0x20001c50

08006f60 <global_stdio_init.part.0>:
 8006f60:	b510      	push	{r4, lr}
 8006f62:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <global_stdio_init.part.0+0x30>)
 8006f64:	4c0b      	ldr	r4, [pc, #44]	; (8006f94 <global_stdio_init.part.0+0x34>)
 8006f66:	4a0c      	ldr	r2, [pc, #48]	; (8006f98 <global_stdio_init.part.0+0x38>)
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2104      	movs	r1, #4
 8006f70:	f7ff ff94 	bl	8006e9c <std>
 8006f74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f78:	2201      	movs	r2, #1
 8006f7a:	2109      	movs	r1, #9
 8006f7c:	f7ff ff8e 	bl	8006e9c <std>
 8006f80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f84:	2202      	movs	r2, #2
 8006f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f8a:	2112      	movs	r1, #18
 8006f8c:	f7ff bf86 	b.w	8006e9c <std>
 8006f90:	20001cb8 	.word	0x20001cb8
 8006f94:	20001b80 	.word	0x20001b80
 8006f98:	08006f09 	.word	0x08006f09

08006f9c <__sfp_lock_acquire>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__sfp_lock_acquire+0x8>)
 8006f9e:	f000 b914 	b.w	80071ca <__retarget_lock_acquire_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	20001cc1 	.word	0x20001cc1

08006fa8 <__sfp_lock_release>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__sfp_lock_release+0x8>)
 8006faa:	f000 b90f 	b.w	80071cc <__retarget_lock_release_recursive>
 8006fae:	bf00      	nop
 8006fb0:	20001cc1 	.word	0x20001cc1

08006fb4 <__sinit>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	f7ff fff0 	bl	8006f9c <__sfp_lock_acquire>
 8006fbc:	6a23      	ldr	r3, [r4, #32]
 8006fbe:	b11b      	cbz	r3, 8006fc8 <__sinit+0x14>
 8006fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc4:	f7ff bff0 	b.w	8006fa8 <__sfp_lock_release>
 8006fc8:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <__sinit+0x28>)
 8006fca:	6223      	str	r3, [r4, #32]
 8006fcc:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <__sinit+0x2c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f5      	bne.n	8006fc0 <__sinit+0xc>
 8006fd4:	f7ff ffc4 	bl	8006f60 <global_stdio_init.part.0>
 8006fd8:	e7f2      	b.n	8006fc0 <__sinit+0xc>
 8006fda:	bf00      	nop
 8006fdc:	08006f21 	.word	0x08006f21
 8006fe0:	20001cb8 	.word	0x20001cb8

08006fe4 <_fwalk_sglue>:
 8006fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe8:	4607      	mov	r7, r0
 8006fea:	4688      	mov	r8, r1
 8006fec:	4614      	mov	r4, r2
 8006fee:	2600      	movs	r6, #0
 8006ff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ff4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ff8:	d505      	bpl.n	8007006 <_fwalk_sglue+0x22>
 8006ffa:	6824      	ldr	r4, [r4, #0]
 8006ffc:	2c00      	cmp	r4, #0
 8006ffe:	d1f7      	bne.n	8006ff0 <_fwalk_sglue+0xc>
 8007000:	4630      	mov	r0, r6
 8007002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007006:	89ab      	ldrh	r3, [r5, #12]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d907      	bls.n	800701c <_fwalk_sglue+0x38>
 800700c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007010:	3301      	adds	r3, #1
 8007012:	d003      	beq.n	800701c <_fwalk_sglue+0x38>
 8007014:	4629      	mov	r1, r5
 8007016:	4638      	mov	r0, r7
 8007018:	47c0      	blx	r8
 800701a:	4306      	orrs	r6, r0
 800701c:	3568      	adds	r5, #104	; 0x68
 800701e:	e7e9      	b.n	8006ff4 <_fwalk_sglue+0x10>

08007020 <putchar>:
 8007020:	4b02      	ldr	r3, [pc, #8]	; (800702c <putchar+0xc>)
 8007022:	4601      	mov	r1, r0
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	6882      	ldr	r2, [r0, #8]
 8007028:	f000 b9da 	b.w	80073e0 <_putc_r>
 800702c:	20000074 	.word	0x20000074

08007030 <__sread>:
 8007030:	b510      	push	{r4, lr}
 8007032:	460c      	mov	r4, r1
 8007034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007038:	f000 f868 	bl	800710c <_read_r>
 800703c:	2800      	cmp	r0, #0
 800703e:	bfab      	itete	ge
 8007040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007042:	89a3      	ldrhlt	r3, [r4, #12]
 8007044:	181b      	addge	r3, r3, r0
 8007046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800704a:	bfac      	ite	ge
 800704c:	6563      	strge	r3, [r4, #84]	; 0x54
 800704e:	81a3      	strhlt	r3, [r4, #12]
 8007050:	bd10      	pop	{r4, pc}

08007052 <__swrite>:
 8007052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	461f      	mov	r7, r3
 8007058:	898b      	ldrh	r3, [r1, #12]
 800705a:	05db      	lsls	r3, r3, #23
 800705c:	4605      	mov	r5, r0
 800705e:	460c      	mov	r4, r1
 8007060:	4616      	mov	r6, r2
 8007062:	d505      	bpl.n	8007070 <__swrite+0x1e>
 8007064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007068:	2302      	movs	r3, #2
 800706a:	2200      	movs	r2, #0
 800706c:	f000 f83c 	bl	80070e8 <_lseek_r>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	4632      	mov	r2, r6
 800707e:	463b      	mov	r3, r7
 8007080:	4628      	mov	r0, r5
 8007082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007086:	f000 b863 	b.w	8007150 <_write_r>

0800708a <__sseek>:
 800708a:	b510      	push	{r4, lr}
 800708c:	460c      	mov	r4, r1
 800708e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007092:	f000 f829 	bl	80070e8 <_lseek_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	bf15      	itete	ne
 800709c:	6560      	strne	r0, [r4, #84]	; 0x54
 800709e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070a6:	81a3      	strheq	r3, [r4, #12]
 80070a8:	bf18      	it	ne
 80070aa:	81a3      	strhne	r3, [r4, #12]
 80070ac:	bd10      	pop	{r4, pc}

080070ae <__sclose>:
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 b809 	b.w	80070c8 <_close_r>

080070b6 <memset>:
 80070b6:	4402      	add	r2, r0
 80070b8:	4603      	mov	r3, r0
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d100      	bne.n	80070c0 <memset+0xa>
 80070be:	4770      	bx	lr
 80070c0:	f803 1b01 	strb.w	r1, [r3], #1
 80070c4:	e7f9      	b.n	80070ba <memset+0x4>
	...

080070c8 <_close_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d06      	ldr	r5, [pc, #24]	; (80070e4 <_close_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	f7f9 fd7d 	bl	8000bd2 <_close>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_close_r+0x1a>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_close_r+0x1a>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20001cbc 	.word	0x20001cbc

080070e8 <_lseek_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d07      	ldr	r5, [pc, #28]	; (8007108 <_lseek_r+0x20>)
 80070ec:	4604      	mov	r4, r0
 80070ee:	4608      	mov	r0, r1
 80070f0:	4611      	mov	r1, r2
 80070f2:	2200      	movs	r2, #0
 80070f4:	602a      	str	r2, [r5, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f7f9 fd92 	bl	8000c20 <_lseek>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_lseek_r+0x1e>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_lseek_r+0x1e>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	20001cbc 	.word	0x20001cbc

0800710c <_read_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	; (800712c <_read_r+0x20>)
 8007110:	4604      	mov	r4, r0
 8007112:	4608      	mov	r0, r1
 8007114:	4611      	mov	r1, r2
 8007116:	2200      	movs	r2, #0
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f7f9 fd20 	bl	8000b60 <_read>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_read_r+0x1e>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_read_r+0x1e>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	20001cbc 	.word	0x20001cbc

08007130 <_sbrk_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d06      	ldr	r5, [pc, #24]	; (800714c <_sbrk_r+0x1c>)
 8007134:	2300      	movs	r3, #0
 8007136:	4604      	mov	r4, r0
 8007138:	4608      	mov	r0, r1
 800713a:	602b      	str	r3, [r5, #0]
 800713c:	f7f9 fd7e 	bl	8000c3c <_sbrk>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_sbrk_r+0x1a>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_sbrk_r+0x1a>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	20001cbc 	.word	0x20001cbc

08007150 <_write_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4d07      	ldr	r5, [pc, #28]	; (8007170 <_write_r+0x20>)
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	2200      	movs	r2, #0
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f7f9 fd1b 	bl	8000b9a <_write>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_write_r+0x1e>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_write_r+0x1e>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	20001cbc 	.word	0x20001cbc

08007174 <__errno>:
 8007174:	4b01      	ldr	r3, [pc, #4]	; (800717c <__errno+0x8>)
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000074 	.word	0x20000074

08007180 <__libc_init_array>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4d0d      	ldr	r5, [pc, #52]	; (80071b8 <__libc_init_array+0x38>)
 8007184:	4c0d      	ldr	r4, [pc, #52]	; (80071bc <__libc_init_array+0x3c>)
 8007186:	1b64      	subs	r4, r4, r5
 8007188:	10a4      	asrs	r4, r4, #2
 800718a:	2600      	movs	r6, #0
 800718c:	42a6      	cmp	r6, r4
 800718e:	d109      	bne.n	80071a4 <__libc_init_array+0x24>
 8007190:	4d0b      	ldr	r5, [pc, #44]	; (80071c0 <__libc_init_array+0x40>)
 8007192:	4c0c      	ldr	r4, [pc, #48]	; (80071c4 <__libc_init_array+0x44>)
 8007194:	f000 fa72 	bl	800767c <_init>
 8007198:	1b64      	subs	r4, r4, r5
 800719a:	10a4      	asrs	r4, r4, #2
 800719c:	2600      	movs	r6, #0
 800719e:	42a6      	cmp	r6, r4
 80071a0:	d105      	bne.n	80071ae <__libc_init_array+0x2e>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a8:	4798      	blx	r3
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7ee      	b.n	800718c <__libc_init_array+0xc>
 80071ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b2:	4798      	blx	r3
 80071b4:	3601      	adds	r6, #1
 80071b6:	e7f2      	b.n	800719e <__libc_init_array+0x1e>
 80071b8:	08007768 	.word	0x08007768
 80071bc:	08007768 	.word	0x08007768
 80071c0:	08007768 	.word	0x08007768
 80071c4:	0800776c 	.word	0x0800776c

080071c8 <__retarget_lock_init_recursive>:
 80071c8:	4770      	bx	lr

080071ca <__retarget_lock_acquire_recursive>:
 80071ca:	4770      	bx	lr

080071cc <__retarget_lock_release_recursive>:
 80071cc:	4770      	bx	lr

080071ce <memcpy>:
 80071ce:	440a      	add	r2, r1
 80071d0:	4291      	cmp	r1, r2
 80071d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d6:	d100      	bne.n	80071da <memcpy+0xc>
 80071d8:	4770      	bx	lr
 80071da:	b510      	push	{r4, lr}
 80071dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e4:	4291      	cmp	r1, r2
 80071e6:	d1f9      	bne.n	80071dc <memcpy+0xe>
 80071e8:	bd10      	pop	{r4, pc}
	...

080071ec <_free_r>:
 80071ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ee:	2900      	cmp	r1, #0
 80071f0:	d044      	beq.n	800727c <_free_r+0x90>
 80071f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f6:	9001      	str	r0, [sp, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f1a1 0404 	sub.w	r4, r1, #4
 80071fe:	bfb8      	it	lt
 8007200:	18e4      	addlt	r4, r4, r3
 8007202:	f7ff fe3f 	bl	8006e84 <__malloc_lock>
 8007206:	4a1e      	ldr	r2, [pc, #120]	; (8007280 <_free_r+0x94>)
 8007208:	9801      	ldr	r0, [sp, #4]
 800720a:	6813      	ldr	r3, [r2, #0]
 800720c:	b933      	cbnz	r3, 800721c <_free_r+0x30>
 800720e:	6063      	str	r3, [r4, #4]
 8007210:	6014      	str	r4, [r2, #0]
 8007212:	b003      	add	sp, #12
 8007214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007218:	f7ff be3a 	b.w	8006e90 <__malloc_unlock>
 800721c:	42a3      	cmp	r3, r4
 800721e:	d908      	bls.n	8007232 <_free_r+0x46>
 8007220:	6825      	ldr	r5, [r4, #0]
 8007222:	1961      	adds	r1, r4, r5
 8007224:	428b      	cmp	r3, r1
 8007226:	bf01      	itttt	eq
 8007228:	6819      	ldreq	r1, [r3, #0]
 800722a:	685b      	ldreq	r3, [r3, #4]
 800722c:	1949      	addeq	r1, r1, r5
 800722e:	6021      	streq	r1, [r4, #0]
 8007230:	e7ed      	b.n	800720e <_free_r+0x22>
 8007232:	461a      	mov	r2, r3
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	b10b      	cbz	r3, 800723c <_free_r+0x50>
 8007238:	42a3      	cmp	r3, r4
 800723a:	d9fa      	bls.n	8007232 <_free_r+0x46>
 800723c:	6811      	ldr	r1, [r2, #0]
 800723e:	1855      	adds	r5, r2, r1
 8007240:	42a5      	cmp	r5, r4
 8007242:	d10b      	bne.n	800725c <_free_r+0x70>
 8007244:	6824      	ldr	r4, [r4, #0]
 8007246:	4421      	add	r1, r4
 8007248:	1854      	adds	r4, r2, r1
 800724a:	42a3      	cmp	r3, r4
 800724c:	6011      	str	r1, [r2, #0]
 800724e:	d1e0      	bne.n	8007212 <_free_r+0x26>
 8007250:	681c      	ldr	r4, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	6053      	str	r3, [r2, #4]
 8007256:	440c      	add	r4, r1
 8007258:	6014      	str	r4, [r2, #0]
 800725a:	e7da      	b.n	8007212 <_free_r+0x26>
 800725c:	d902      	bls.n	8007264 <_free_r+0x78>
 800725e:	230c      	movs	r3, #12
 8007260:	6003      	str	r3, [r0, #0]
 8007262:	e7d6      	b.n	8007212 <_free_r+0x26>
 8007264:	6825      	ldr	r5, [r4, #0]
 8007266:	1961      	adds	r1, r4, r5
 8007268:	428b      	cmp	r3, r1
 800726a:	bf04      	itt	eq
 800726c:	6819      	ldreq	r1, [r3, #0]
 800726e:	685b      	ldreq	r3, [r3, #4]
 8007270:	6063      	str	r3, [r4, #4]
 8007272:	bf04      	itt	eq
 8007274:	1949      	addeq	r1, r1, r5
 8007276:	6021      	streq	r1, [r4, #0]
 8007278:	6054      	str	r4, [r2, #4]
 800727a:	e7ca      	b.n	8007212 <_free_r+0x26>
 800727c:	b003      	add	sp, #12
 800727e:	bd30      	pop	{r4, r5, pc}
 8007280:	20001b78 	.word	0x20001b78

08007284 <__sflush_r>:
 8007284:	898a      	ldrh	r2, [r1, #12]
 8007286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728a:	4605      	mov	r5, r0
 800728c:	0710      	lsls	r0, r2, #28
 800728e:	460c      	mov	r4, r1
 8007290:	d458      	bmi.n	8007344 <__sflush_r+0xc0>
 8007292:	684b      	ldr	r3, [r1, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	dc05      	bgt.n	80072a4 <__sflush_r+0x20>
 8007298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	dc02      	bgt.n	80072a4 <__sflush_r+0x20>
 800729e:	2000      	movs	r0, #0
 80072a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072a6:	2e00      	cmp	r6, #0
 80072a8:	d0f9      	beq.n	800729e <__sflush_r+0x1a>
 80072aa:	2300      	movs	r3, #0
 80072ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072b0:	682f      	ldr	r7, [r5, #0]
 80072b2:	6a21      	ldr	r1, [r4, #32]
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	d032      	beq.n	800731e <__sflush_r+0x9a>
 80072b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	075a      	lsls	r2, r3, #29
 80072be:	d505      	bpl.n	80072cc <__sflush_r+0x48>
 80072c0:	6863      	ldr	r3, [r4, #4]
 80072c2:	1ac0      	subs	r0, r0, r3
 80072c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072c6:	b10b      	cbz	r3, 80072cc <__sflush_r+0x48>
 80072c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072ca:	1ac0      	subs	r0, r0, r3
 80072cc:	2300      	movs	r3, #0
 80072ce:	4602      	mov	r2, r0
 80072d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072d2:	6a21      	ldr	r1, [r4, #32]
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b0      	blx	r6
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	d106      	bne.n	80072ec <__sflush_r+0x68>
 80072de:	6829      	ldr	r1, [r5, #0]
 80072e0:	291d      	cmp	r1, #29
 80072e2:	d82b      	bhi.n	800733c <__sflush_r+0xb8>
 80072e4:	4a29      	ldr	r2, [pc, #164]	; (800738c <__sflush_r+0x108>)
 80072e6:	410a      	asrs	r2, r1
 80072e8:	07d6      	lsls	r6, r2, #31
 80072ea:	d427      	bmi.n	800733c <__sflush_r+0xb8>
 80072ec:	2200      	movs	r2, #0
 80072ee:	6062      	str	r2, [r4, #4]
 80072f0:	04d9      	lsls	r1, r3, #19
 80072f2:	6922      	ldr	r2, [r4, #16]
 80072f4:	6022      	str	r2, [r4, #0]
 80072f6:	d504      	bpl.n	8007302 <__sflush_r+0x7e>
 80072f8:	1c42      	adds	r2, r0, #1
 80072fa:	d101      	bne.n	8007300 <__sflush_r+0x7c>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	b903      	cbnz	r3, 8007302 <__sflush_r+0x7e>
 8007300:	6560      	str	r0, [r4, #84]	; 0x54
 8007302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007304:	602f      	str	r7, [r5, #0]
 8007306:	2900      	cmp	r1, #0
 8007308:	d0c9      	beq.n	800729e <__sflush_r+0x1a>
 800730a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800730e:	4299      	cmp	r1, r3
 8007310:	d002      	beq.n	8007318 <__sflush_r+0x94>
 8007312:	4628      	mov	r0, r5
 8007314:	f7ff ff6a 	bl	80071ec <_free_r>
 8007318:	2000      	movs	r0, #0
 800731a:	6360      	str	r0, [r4, #52]	; 0x34
 800731c:	e7c0      	b.n	80072a0 <__sflush_r+0x1c>
 800731e:	2301      	movs	r3, #1
 8007320:	4628      	mov	r0, r5
 8007322:	47b0      	blx	r6
 8007324:	1c41      	adds	r1, r0, #1
 8007326:	d1c8      	bne.n	80072ba <__sflush_r+0x36>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0c5      	beq.n	80072ba <__sflush_r+0x36>
 800732e:	2b1d      	cmp	r3, #29
 8007330:	d001      	beq.n	8007336 <__sflush_r+0xb2>
 8007332:	2b16      	cmp	r3, #22
 8007334:	d101      	bne.n	800733a <__sflush_r+0xb6>
 8007336:	602f      	str	r7, [r5, #0]
 8007338:	e7b1      	b.n	800729e <__sflush_r+0x1a>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	e7ad      	b.n	80072a0 <__sflush_r+0x1c>
 8007344:	690f      	ldr	r7, [r1, #16]
 8007346:	2f00      	cmp	r7, #0
 8007348:	d0a9      	beq.n	800729e <__sflush_r+0x1a>
 800734a:	0793      	lsls	r3, r2, #30
 800734c:	680e      	ldr	r6, [r1, #0]
 800734e:	bf08      	it	eq
 8007350:	694b      	ldreq	r3, [r1, #20]
 8007352:	600f      	str	r7, [r1, #0]
 8007354:	bf18      	it	ne
 8007356:	2300      	movne	r3, #0
 8007358:	eba6 0807 	sub.w	r8, r6, r7
 800735c:	608b      	str	r3, [r1, #8]
 800735e:	f1b8 0f00 	cmp.w	r8, #0
 8007362:	dd9c      	ble.n	800729e <__sflush_r+0x1a>
 8007364:	6a21      	ldr	r1, [r4, #32]
 8007366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007368:	4643      	mov	r3, r8
 800736a:	463a      	mov	r2, r7
 800736c:	4628      	mov	r0, r5
 800736e:	47b0      	blx	r6
 8007370:	2800      	cmp	r0, #0
 8007372:	dc06      	bgt.n	8007382 <__sflush_r+0xfe>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800737a:	81a3      	strh	r3, [r4, #12]
 800737c:	f04f 30ff 	mov.w	r0, #4294967295
 8007380:	e78e      	b.n	80072a0 <__sflush_r+0x1c>
 8007382:	4407      	add	r7, r0
 8007384:	eba8 0800 	sub.w	r8, r8, r0
 8007388:	e7e9      	b.n	800735e <__sflush_r+0xda>
 800738a:	bf00      	nop
 800738c:	dfbffffe 	.word	0xdfbffffe

08007390 <_fflush_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	690b      	ldr	r3, [r1, #16]
 8007394:	4605      	mov	r5, r0
 8007396:	460c      	mov	r4, r1
 8007398:	b913      	cbnz	r3, 80073a0 <_fflush_r+0x10>
 800739a:	2500      	movs	r5, #0
 800739c:	4628      	mov	r0, r5
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	b118      	cbz	r0, 80073aa <_fflush_r+0x1a>
 80073a2:	6a03      	ldr	r3, [r0, #32]
 80073a4:	b90b      	cbnz	r3, 80073aa <_fflush_r+0x1a>
 80073a6:	f7ff fe05 	bl	8006fb4 <__sinit>
 80073aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0f3      	beq.n	800739a <_fflush_r+0xa>
 80073b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073b4:	07d0      	lsls	r0, r2, #31
 80073b6:	d404      	bmi.n	80073c2 <_fflush_r+0x32>
 80073b8:	0599      	lsls	r1, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_fflush_r+0x32>
 80073bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073be:	f7ff ff04 	bl	80071ca <__retarget_lock_acquire_recursive>
 80073c2:	4628      	mov	r0, r5
 80073c4:	4621      	mov	r1, r4
 80073c6:	f7ff ff5d 	bl	8007284 <__sflush_r>
 80073ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073cc:	07da      	lsls	r2, r3, #31
 80073ce:	4605      	mov	r5, r0
 80073d0:	d4e4      	bmi.n	800739c <_fflush_r+0xc>
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	059b      	lsls	r3, r3, #22
 80073d6:	d4e1      	bmi.n	800739c <_fflush_r+0xc>
 80073d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073da:	f7ff fef7 	bl	80071cc <__retarget_lock_release_recursive>
 80073de:	e7dd      	b.n	800739c <_fflush_r+0xc>

080073e0 <_putc_r>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	460d      	mov	r5, r1
 80073e4:	4614      	mov	r4, r2
 80073e6:	4606      	mov	r6, r0
 80073e8:	b118      	cbz	r0, 80073f2 <_putc_r+0x12>
 80073ea:	6a03      	ldr	r3, [r0, #32]
 80073ec:	b90b      	cbnz	r3, 80073f2 <_putc_r+0x12>
 80073ee:	f7ff fde1 	bl	8006fb4 <__sinit>
 80073f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073f4:	07d8      	lsls	r0, r3, #31
 80073f6:	d405      	bmi.n	8007404 <_putc_r+0x24>
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	0599      	lsls	r1, r3, #22
 80073fc:	d402      	bmi.n	8007404 <_putc_r+0x24>
 80073fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007400:	f7ff fee3 	bl	80071ca <__retarget_lock_acquire_recursive>
 8007404:	68a3      	ldr	r3, [r4, #8]
 8007406:	3b01      	subs	r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	60a3      	str	r3, [r4, #8]
 800740c:	da05      	bge.n	800741a <_putc_r+0x3a>
 800740e:	69a2      	ldr	r2, [r4, #24]
 8007410:	4293      	cmp	r3, r2
 8007412:	db12      	blt.n	800743a <_putc_r+0x5a>
 8007414:	b2eb      	uxtb	r3, r5
 8007416:	2b0a      	cmp	r3, #10
 8007418:	d00f      	beq.n	800743a <_putc_r+0x5a>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	6022      	str	r2, [r4, #0]
 8007420:	701d      	strb	r5, [r3, #0]
 8007422:	b2ed      	uxtb	r5, r5
 8007424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007426:	07da      	lsls	r2, r3, #31
 8007428:	d405      	bmi.n	8007436 <_putc_r+0x56>
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	059b      	lsls	r3, r3, #22
 800742e:	d402      	bmi.n	8007436 <_putc_r+0x56>
 8007430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007432:	f7ff fecb 	bl	80071cc <__retarget_lock_release_recursive>
 8007436:	4628      	mov	r0, r5
 8007438:	bd70      	pop	{r4, r5, r6, pc}
 800743a:	4629      	mov	r1, r5
 800743c:	4622      	mov	r2, r4
 800743e:	4630      	mov	r0, r6
 8007440:	f000 f802 	bl	8007448 <__swbuf_r>
 8007444:	4605      	mov	r5, r0
 8007446:	e7ed      	b.n	8007424 <_putc_r+0x44>

08007448 <__swbuf_r>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	460e      	mov	r6, r1
 800744c:	4614      	mov	r4, r2
 800744e:	4605      	mov	r5, r0
 8007450:	b118      	cbz	r0, 800745a <__swbuf_r+0x12>
 8007452:	6a03      	ldr	r3, [r0, #32]
 8007454:	b90b      	cbnz	r3, 800745a <__swbuf_r+0x12>
 8007456:	f7ff fdad 	bl	8006fb4 <__sinit>
 800745a:	69a3      	ldr	r3, [r4, #24]
 800745c:	60a3      	str	r3, [r4, #8]
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	071a      	lsls	r2, r3, #28
 8007462:	d525      	bpl.n	80074b0 <__swbuf_r+0x68>
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	b31b      	cbz	r3, 80074b0 <__swbuf_r+0x68>
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	6922      	ldr	r2, [r4, #16]
 800746c:	1a98      	subs	r0, r3, r2
 800746e:	6963      	ldr	r3, [r4, #20]
 8007470:	b2f6      	uxtb	r6, r6
 8007472:	4283      	cmp	r3, r0
 8007474:	4637      	mov	r7, r6
 8007476:	dc04      	bgt.n	8007482 <__swbuf_r+0x3a>
 8007478:	4621      	mov	r1, r4
 800747a:	4628      	mov	r0, r5
 800747c:	f7ff ff88 	bl	8007390 <_fflush_r>
 8007480:	b9e0      	cbnz	r0, 80074bc <__swbuf_r+0x74>
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	3b01      	subs	r3, #1
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	6022      	str	r2, [r4, #0]
 800748e:	701e      	strb	r6, [r3, #0]
 8007490:	6962      	ldr	r2, [r4, #20]
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	429a      	cmp	r2, r3
 8007496:	d004      	beq.n	80074a2 <__swbuf_r+0x5a>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	07db      	lsls	r3, r3, #31
 800749c:	d506      	bpl.n	80074ac <__swbuf_r+0x64>
 800749e:	2e0a      	cmp	r6, #10
 80074a0:	d104      	bne.n	80074ac <__swbuf_r+0x64>
 80074a2:	4621      	mov	r1, r4
 80074a4:	4628      	mov	r0, r5
 80074a6:	f7ff ff73 	bl	8007390 <_fflush_r>
 80074aa:	b938      	cbnz	r0, 80074bc <__swbuf_r+0x74>
 80074ac:	4638      	mov	r0, r7
 80074ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b0:	4621      	mov	r1, r4
 80074b2:	4628      	mov	r0, r5
 80074b4:	f000 f806 	bl	80074c4 <__swsetup_r>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d0d5      	beq.n	8007468 <__swbuf_r+0x20>
 80074bc:	f04f 37ff 	mov.w	r7, #4294967295
 80074c0:	e7f4      	b.n	80074ac <__swbuf_r+0x64>
	...

080074c4 <__swsetup_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	4b2a      	ldr	r3, [pc, #168]	; (8007570 <__swsetup_r+0xac>)
 80074c8:	4605      	mov	r5, r0
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	460c      	mov	r4, r1
 80074ce:	b118      	cbz	r0, 80074d8 <__swsetup_r+0x14>
 80074d0:	6a03      	ldr	r3, [r0, #32]
 80074d2:	b90b      	cbnz	r3, 80074d8 <__swsetup_r+0x14>
 80074d4:	f7ff fd6e 	bl	8006fb4 <__sinit>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074de:	0718      	lsls	r0, r3, #28
 80074e0:	d422      	bmi.n	8007528 <__swsetup_r+0x64>
 80074e2:	06d9      	lsls	r1, r3, #27
 80074e4:	d407      	bmi.n	80074f6 <__swsetup_r+0x32>
 80074e6:	2309      	movs	r3, #9
 80074e8:	602b      	str	r3, [r5, #0]
 80074ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	e034      	b.n	8007560 <__swsetup_r+0x9c>
 80074f6:	0758      	lsls	r0, r3, #29
 80074f8:	d512      	bpl.n	8007520 <__swsetup_r+0x5c>
 80074fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074fc:	b141      	cbz	r1, 8007510 <__swsetup_r+0x4c>
 80074fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007502:	4299      	cmp	r1, r3
 8007504:	d002      	beq.n	800750c <__swsetup_r+0x48>
 8007506:	4628      	mov	r0, r5
 8007508:	f7ff fe70 	bl	80071ec <_free_r>
 800750c:	2300      	movs	r3, #0
 800750e:	6363      	str	r3, [r4, #52]	; 0x34
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	2300      	movs	r3, #0
 800751a:	6063      	str	r3, [r4, #4]
 800751c:	6923      	ldr	r3, [r4, #16]
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f043 0308 	orr.w	r3, r3, #8
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	b94b      	cbnz	r3, 8007540 <__swsetup_r+0x7c>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007536:	d003      	beq.n	8007540 <__swsetup_r+0x7c>
 8007538:	4621      	mov	r1, r4
 800753a:	4628      	mov	r0, r5
 800753c:	f000 f840 	bl	80075c0 <__smakebuf_r>
 8007540:	89a0      	ldrh	r0, [r4, #12]
 8007542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007546:	f010 0301 	ands.w	r3, r0, #1
 800754a:	d00a      	beq.n	8007562 <__swsetup_r+0x9e>
 800754c:	2300      	movs	r3, #0
 800754e:	60a3      	str	r3, [r4, #8]
 8007550:	6963      	ldr	r3, [r4, #20]
 8007552:	425b      	negs	r3, r3
 8007554:	61a3      	str	r3, [r4, #24]
 8007556:	6923      	ldr	r3, [r4, #16]
 8007558:	b943      	cbnz	r3, 800756c <__swsetup_r+0xa8>
 800755a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800755e:	d1c4      	bne.n	80074ea <__swsetup_r+0x26>
 8007560:	bd38      	pop	{r3, r4, r5, pc}
 8007562:	0781      	lsls	r1, r0, #30
 8007564:	bf58      	it	pl
 8007566:	6963      	ldrpl	r3, [r4, #20]
 8007568:	60a3      	str	r3, [r4, #8]
 800756a:	e7f4      	b.n	8007556 <__swsetup_r+0x92>
 800756c:	2000      	movs	r0, #0
 800756e:	e7f7      	b.n	8007560 <__swsetup_r+0x9c>
 8007570:	20000074 	.word	0x20000074

08007574 <__swhatbuf_r>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	460c      	mov	r4, r1
 8007578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757c:	2900      	cmp	r1, #0
 800757e:	b096      	sub	sp, #88	; 0x58
 8007580:	4615      	mov	r5, r2
 8007582:	461e      	mov	r6, r3
 8007584:	da0d      	bge.n	80075a2 <__swhatbuf_r+0x2e>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	f013 0f80 	tst.w	r3, #128	; 0x80
 800758c:	f04f 0100 	mov.w	r1, #0
 8007590:	bf0c      	ite	eq
 8007592:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007596:	2340      	movne	r3, #64	; 0x40
 8007598:	2000      	movs	r0, #0
 800759a:	6031      	str	r1, [r6, #0]
 800759c:	602b      	str	r3, [r5, #0]
 800759e:	b016      	add	sp, #88	; 0x58
 80075a0:	bd70      	pop	{r4, r5, r6, pc}
 80075a2:	466a      	mov	r2, sp
 80075a4:	f000 f848 	bl	8007638 <_fstat_r>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	dbec      	blt.n	8007586 <__swhatbuf_r+0x12>
 80075ac:	9901      	ldr	r1, [sp, #4]
 80075ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075b6:	4259      	negs	r1, r3
 80075b8:	4159      	adcs	r1, r3
 80075ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075be:	e7eb      	b.n	8007598 <__swhatbuf_r+0x24>

080075c0 <__smakebuf_r>:
 80075c0:	898b      	ldrh	r3, [r1, #12]
 80075c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075c4:	079d      	lsls	r5, r3, #30
 80075c6:	4606      	mov	r6, r0
 80075c8:	460c      	mov	r4, r1
 80075ca:	d507      	bpl.n	80075dc <__smakebuf_r+0x1c>
 80075cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	2301      	movs	r3, #1
 80075d6:	6163      	str	r3, [r4, #20]
 80075d8:	b002      	add	sp, #8
 80075da:	bd70      	pop	{r4, r5, r6, pc}
 80075dc:	ab01      	add	r3, sp, #4
 80075de:	466a      	mov	r2, sp
 80075e0:	f7ff ffc8 	bl	8007574 <__swhatbuf_r>
 80075e4:	9900      	ldr	r1, [sp, #0]
 80075e6:	4605      	mov	r5, r0
 80075e8:	4630      	mov	r0, r6
 80075ea:	f7ff fbcb 	bl	8006d84 <_malloc_r>
 80075ee:	b948      	cbnz	r0, 8007604 <__smakebuf_r+0x44>
 80075f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f4:	059a      	lsls	r2, r3, #22
 80075f6:	d4ef      	bmi.n	80075d8 <__smakebuf_r+0x18>
 80075f8:	f023 0303 	bic.w	r3, r3, #3
 80075fc:	f043 0302 	orr.w	r3, r3, #2
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	e7e3      	b.n	80075cc <__smakebuf_r+0xc>
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	6020      	str	r0, [r4, #0]
 8007608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	9b00      	ldr	r3, [sp, #0]
 8007610:	6163      	str	r3, [r4, #20]
 8007612:	9b01      	ldr	r3, [sp, #4]
 8007614:	6120      	str	r0, [r4, #16]
 8007616:	b15b      	cbz	r3, 8007630 <__smakebuf_r+0x70>
 8007618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800761c:	4630      	mov	r0, r6
 800761e:	f000 f81d 	bl	800765c <_isatty_r>
 8007622:	b128      	cbz	r0, 8007630 <__smakebuf_r+0x70>
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	f043 0301 	orr.w	r3, r3, #1
 800762e:	81a3      	strh	r3, [r4, #12]
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	431d      	orrs	r5, r3
 8007634:	81a5      	strh	r5, [r4, #12]
 8007636:	e7cf      	b.n	80075d8 <__smakebuf_r+0x18>

08007638 <_fstat_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d07      	ldr	r5, [pc, #28]	; (8007658 <_fstat_r+0x20>)
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	602b      	str	r3, [r5, #0]
 8007646:	f7f9 fad0 	bl	8000bea <_fstat>
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	d102      	bne.n	8007654 <_fstat_r+0x1c>
 800764e:	682b      	ldr	r3, [r5, #0]
 8007650:	b103      	cbz	r3, 8007654 <_fstat_r+0x1c>
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	bd38      	pop	{r3, r4, r5, pc}
 8007656:	bf00      	nop
 8007658:	20001cbc 	.word	0x20001cbc

0800765c <_isatty_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d06      	ldr	r5, [pc, #24]	; (8007678 <_isatty_r+0x1c>)
 8007660:	2300      	movs	r3, #0
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	f7f9 facf 	bl	8000c0a <_isatty>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_isatty_r+0x1a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_isatty_r+0x1a>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	20001cbc 	.word	0x20001cbc

0800767c <_init>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr

08007688 <_fini>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	bf00      	nop
 800768c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768e:	bc08      	pop	{r3}
 8007690:	469e      	mov	lr, r3
 8007692:	4770      	bx	lr
