
freertos-yield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007394  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007564  08007564  00008564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007648  08007648  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007648  08007648  00008648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007650  08007650  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007650  08007650  00008650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007654  08007654  00008654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007658  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c44  2000006c  080076c4  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cb0  080076c4  00009cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d90  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab6  00000000  00000000  00021e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  000258e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e91  00000000  00000000  00026be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000048a4  00000000  00000000  00027a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018613  00000000  00000000  0002c31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2f14  00000000  00000000  00044930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137844  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005188  00000000  00000000  00137888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013ca10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800754c 	.word	0x0800754c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800754c 	.word	0x0800754c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fb95 	bl	8000c6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f81a 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f8de 	bl	8000708 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800054c:	f000 f87e 	bl	800064c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000550:	f000 f8ac 	bl	80006ac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000554:	f003 fc90 	bl	8003e78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000558:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <main+0x34>)
 800055a:	2100      	movs	r1, #0
 800055c:	4805      	ldr	r0, [pc, #20]	@ (8000574 <main+0x38>)
 800055e:	f003 fcf5 	bl	8003f4c <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a04      	ldr	r2, [pc, #16]	@ (8000578 <main+0x3c>)
 8000566:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000568:	f003 fcba 	bl	8003ee0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <main+0x30>
 8000570:	0800760c 	.word	0x0800760c
 8000574:	080008e5 	.word	0x080008e5
 8000578:	20000618 	.word	0x20000618

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	@ 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 ff42 	bl	8007414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a0:	f001 f8bc 	bl	800171c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	4b27      	ldr	r3, [pc, #156]	@ (8000644 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	4a26      	ldr	r2, [pc, #152]	@ (8000644 <SystemClock_Config+0xc8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b0:	4b24      	ldr	r3, [pc, #144]	@ (8000644 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c4:	4a20      	ldr	r2, [pc, #128]	@ (8000648 <SystemClock_Config+0xcc>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f0:	2348      	movs	r3, #72	@ 0x48
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005f8:	2303      	movs	r3, #3
 80005fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f89b 	bl	800173c <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 f97b 	bl	8000906 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fb29 	bl	8001c84 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000638:	f000 f965 	bl	8000906 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	@ 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	@ (80006a8 <MX_USART3_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000656:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_USART3_UART_Init+0x58>)
 8000690:	f002 f90e 	bl	80028b0 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 f934 	bl	8000906 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000088 	.word	0x20000088
 80006a8:	40004800 	.word	0x40004800

080006ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006b0:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ba:	2206      	movs	r2, #6
 80006bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f0:	f000 fecb 	bl	800148a <HAL_PCD_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f904 	bl	8000906 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000110 	.word	0x20000110

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	@ 0x30
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b6c      	ldr	r3, [pc, #432]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a6b      	ldr	r2, [pc, #428]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b69      	ldr	r3, [pc, #420]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b66      	ldr	r3, [pc, #408]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a65      	ldr	r2, [pc, #404]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b63      	ldr	r3, [pc, #396]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b60      	ldr	r3, [pc, #384]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a5f      	ldr	r2, [pc, #380]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b5d      	ldr	r3, [pc, #372]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b5a      	ldr	r3, [pc, #360]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a59      	ldr	r2, [pc, #356]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b57      	ldr	r3, [pc, #348]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	4b54      	ldr	r3, [pc, #336]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a53      	ldr	r2, [pc, #332]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b51      	ldr	r3, [pc, #324]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	4b4e      	ldr	r3, [pc, #312]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a4d      	ldr	r2, [pc, #308]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b4b      	ldr	r3, [pc, #300]	@ (80008d0 <MX_GPIO_Init+0x1c8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007b4:	4847      	ldr	r0, [pc, #284]	@ (80008d4 <MX_GPIO_Init+0x1cc>)
 80007b6:	f000 fe2b 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2140      	movs	r1, #64	@ 0x40
 80007be:	4846      	ldr	r0, [pc, #280]	@ (80008d8 <MX_GPIO_Init+0x1d0>)
 80007c0:	f000 fe26 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4840      	ldr	r0, [pc, #256]	@ (80008dc <MX_GPIO_Init+0x1d4>)
 80007dc:	f000 fc6c 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007e0:	2332      	movs	r3, #50	@ 0x32
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f0:	230b      	movs	r3, #11
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4838      	ldr	r0, [pc, #224]	@ (80008dc <MX_GPIO_Init+0x1d4>)
 80007fc:	f000 fc5c 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000800:	2386      	movs	r3, #134	@ 0x86
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000810:	230b      	movs	r3, #11
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4831      	ldr	r0, [pc, #196]	@ (80008e0 <MX_GPIO_Init+0x1d8>)
 800081c:	f000 fc4c 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000820:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4826      	ldr	r0, [pc, #152]	@ (80008d4 <MX_GPIO_Init+0x1cc>)
 800083a:	f000 fc3d 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800083e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000850:	230b      	movs	r3, #11
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	481e      	ldr	r0, [pc, #120]	@ (80008d4 <MX_GPIO_Init+0x1cc>)
 800085c:	f000 fc2c 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000860:	2340      	movs	r3, #64	@ 0x40
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4818      	ldr	r0, [pc, #96]	@ (80008d8 <MX_GPIO_Init+0x1d0>)
 8000878:	f000 fc1e 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800087c:	2380      	movs	r3, #128	@ 0x80
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4812      	ldr	r0, [pc, #72]	@ (80008d8 <MX_GPIO_Init+0x1d0>)
 8000890:	f000 fc12 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000894:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a6:	230b      	movs	r3, #11
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4809      	ldr	r0, [pc, #36]	@ (80008d8 <MX_GPIO_Init+0x1d0>)
 80008b2:	f000 fc01 	bl	80010b8 <HAL_GPIO_Init>


  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2106      	movs	r1, #6
 80008ba:	2028      	movs	r0, #40	@ 0x28
 80008bc:	f000 fb33 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008c0:	2028      	movs	r0, #40	@ 0x28
 80008c2:	f000 fb4c 	bl	8000f5e <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3730      	adds	r7, #48	@ 0x30
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020400 	.word	0x40020400
 80008d8:	40021800 	.word	0x40021800
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020000 	.word	0x40020000

080008e4 <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */


void StartDefaultTask(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  vTaskSuspendAll();
 80008ec:	f004 feea 	bl	80056c4 <vTaskSuspendAll>
  rtg_init();
 80008f0:	f006 fb7c 	bl	8006fec <rtg_init>
  xTaskResumeAll();
 80008f4:	f004 fef4 	bl	80056e0 <xTaskResumeAll>
  vTaskDelete(NULL);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f004 fdb3 	bl	8005464 <vTaskDelete>


  /* USER CODE END 5 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
}
 800090c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090e:	bf00      	nop
 8000910:	e7fd      	b.n	800090e <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	4a10      	ldr	r2, [pc, #64]	@ (8000960 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	@ 0x40
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093c:	6453      	str	r3, [r2, #68]	@ 0x44
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	f06f 0001 	mvn.w	r0, #1
 8000952:	f000 fae8 	bl	8000f26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0aa      	sub	sp, #168	@ 0xa8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2284      	movs	r2, #132	@ 0x84
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f006 fd45 	bl	8007414 <memset>
  if(huart->Instance==USART3)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a26      	ldr	r2, [pc, #152]	@ (8000a28 <HAL_UART_MspInit+0xc4>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d144      	bne.n	8000a1e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000994:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000998:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800099a:	2300      	movs	r3, #0
 800099c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fb94 	bl	80020d0 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ae:	f7ff ffaa 	bl	8000906 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009b2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <HAL_UART_MspInit+0xc8>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <HAL_UART_MspInit+0xc8>)
 80009b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <HAL_UART_MspInit+0xc8>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <HAL_UART_MspInit+0xc8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <HAL_UART_MspInit+0xc8>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <HAL_UART_MspInit+0xc8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009fc:	2307      	movs	r3, #7
 80009fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a02:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a06:	4619      	mov	r1, r3
 8000a08:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <HAL_UART_MspInit+0xcc>)
 8000a0a:	f000 fb55 	bl	80010b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2105      	movs	r1, #5
 8000a12:	2027      	movs	r0, #39	@ 0x27
 8000a14:	f000 fa87 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a18:	2027      	movs	r0, #39	@ 0x27
 8000a1a:	f000 faa0 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	37a8      	adds	r7, #168	@ 0xa8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0ac      	sub	sp, #176	@ 0xb0
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	2284      	movs	r2, #132	@ 0x84
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f006 fcdd 	bl	8007414 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a62:	d159      	bne.n	8000b18 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000a68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fb2b 	bl	80020d0 <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a80:	f7ff ff41 	bl	8000906 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b26      	ldr	r3, [pc, #152]	@ (8000b20 <HAL_PCD_MspInit+0xec>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a88:	4a25      	ldr	r2, [pc, #148]	@ (8000b20 <HAL_PCD_MspInit+0xec>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a90:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <HAL_PCD_MspInit+0xec>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a9c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000aa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4818      	ldr	r0, [pc, #96]	@ (8000b24 <HAL_PCD_MspInit+0xf0>)
 8000ac4:	f000 faf8 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ac8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000acc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4810      	ldr	r0, [pc, #64]	@ (8000b24 <HAL_PCD_MspInit+0xf0>)
 8000ae4:	f000 fae8 	bl	80010b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <HAL_PCD_MspInit+0xec>)
 8000aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aec:	4a0c      	ldr	r2, [pc, #48]	@ (8000b20 <HAL_PCD_MspInit+0xec>)
 8000aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <HAL_PCD_MspInit+0xec>)
 8000af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <HAL_PCD_MspInit+0xec>)
 8000b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b04:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <HAL_PCD_MspInit+0xec>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0c:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <HAL_PCD_MspInit+0xec>)
 8000b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	37b0      	adds	r7, #176	@ 0xb0
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <NMI_Handler+0x4>

08000b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <MemManage_Handler+0x4>

08000b40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b62:	f000 f8c1 	bl	8000ce8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b66:	f005 fa4b 	bl	8006000 <xTaskGetSchedulerState>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d001      	beq.n	8000b74 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b70:	f006 f962 	bl	8006e38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <USART3_IRQHandler+0x10>)
 8000b7e:	f001 fee5 	bl	800294c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000088 	.word	0x20000088

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f006 fc42 	bl	8007444 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20050000 	.word	0x20050000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	2000061c 	.word	0x2000061c
 8000bf4:	20001cb0 	.word	0x20001cb0

08000bf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c22:	490e      	ldr	r1, [pc, #56]	@ (8000c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c24:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0b      	ldr	r2, [pc, #44]	@ (8000c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c38:	4c0b      	ldr	r4, [pc, #44]	@ (8000c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c46:	f7ff ffd7 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f006 fc01 	bl	8007450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4e:	f7ff fc75 	bl	800053c <main>
  bx  lr    
 8000c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c60:	08007658 	.word	0x08007658
  ldr r2, =_sbss
 8000c64:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c68:	20001cb0 	.word	0x20001cb0

08000c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>

08000c6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c72:	2003      	movs	r0, #3
 8000c74:	f000 f94c 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c78:	200f      	movs	r0, #15
 8000c7a:	f000 f805 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7e:	f7ff fe49 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f967 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f92f 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000620 	.word	0x20000620

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000620 	.word	0x20000620

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x40>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x40>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	05fa0000 	.word	0x05fa0000

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff feb6 	bl	8000d10 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d008      	beq.n	8000fc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2280      	movs	r2, #128	@ 0x80
 8000fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e052      	b.n	800106a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0216 	bic.w	r2, r2, #22
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fe2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <HAL_DMA_Abort+0x62>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0208 	bic.w	r2, r2, #8
 8001002:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001014:	e013      	b.n	800103e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001016:	f7ff fe7b 	bl	8000d10 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b05      	cmp	r3, #5
 8001022:	d90c      	bls.n	800103e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2220      	movs	r2, #32
 8001028:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2203      	movs	r2, #3
 800102e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e015      	b.n	800106a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e4      	bne.n	8001016 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001050:	223f      	movs	r2, #63	@ 0x3f
 8001052:	409a      	lsls	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d004      	beq.n	8001090 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e00c      	b.n	80010aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2205      	movs	r2, #5
 8001094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0201 	bic.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e175      	b.n	80013c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8164 	bne.w	80013be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x56>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80be 	beq.w	80013be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	4b66      	ldr	r3, [pc, #408]	@ (80013dc <HAL_GPIO_Init+0x324>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	4a65      	ldr	r2, [pc, #404]	@ (80013dc <HAL_GPIO_Init+0x324>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124c:	6453      	str	r3, [r2, #68]	@ 0x44
 800124e:	4b63      	ldr	r3, [pc, #396]	@ (80013dc <HAL_GPIO_Init+0x324>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800125a:	4a61      	ldr	r2, [pc, #388]	@ (80013e0 <HAL_GPIO_Init+0x328>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a58      	ldr	r2, [pc, #352]	@ (80013e4 <HAL_GPIO_Init+0x32c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d037      	beq.n	80012f6 <HAL_GPIO_Init+0x23e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a57      	ldr	r2, [pc, #348]	@ (80013e8 <HAL_GPIO_Init+0x330>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d031      	beq.n	80012f2 <HAL_GPIO_Init+0x23a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a56      	ldr	r2, [pc, #344]	@ (80013ec <HAL_GPIO_Init+0x334>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d02b      	beq.n	80012ee <HAL_GPIO_Init+0x236>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a55      	ldr	r2, [pc, #340]	@ (80013f0 <HAL_GPIO_Init+0x338>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d025      	beq.n	80012ea <HAL_GPIO_Init+0x232>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a54      	ldr	r2, [pc, #336]	@ (80013f4 <HAL_GPIO_Init+0x33c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01f      	beq.n	80012e6 <HAL_GPIO_Init+0x22e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a53      	ldr	r2, [pc, #332]	@ (80013f8 <HAL_GPIO_Init+0x340>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_GPIO_Init+0x22a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a52      	ldr	r2, [pc, #328]	@ (80013fc <HAL_GPIO_Init+0x344>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0x226>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a51      	ldr	r2, [pc, #324]	@ (8001400 <HAL_GPIO_Init+0x348>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00d      	beq.n	80012da <HAL_GPIO_Init+0x222>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a50      	ldr	r2, [pc, #320]	@ (8001404 <HAL_GPIO_Init+0x34c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d007      	beq.n	80012d6 <HAL_GPIO_Init+0x21e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001408 <HAL_GPIO_Init+0x350>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_GPIO_Init+0x21a>
 80012ce:	2309      	movs	r3, #9
 80012d0:	e012      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012d2:	230a      	movs	r3, #10
 80012d4:	e010      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012d6:	2308      	movs	r3, #8
 80012d8:	e00e      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012da:	2307      	movs	r3, #7
 80012dc:	e00c      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012de:	2306      	movs	r3, #6
 80012e0:	e00a      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012f6:	2300      	movs	r3, #0
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001308:	4935      	ldr	r1, [pc, #212]	@ (80013e0 <HAL_GPIO_Init+0x328>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <HAL_GPIO_Init+0x354>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a34      	ldr	r2, [pc, #208]	@ (800140c <HAL_GPIO_Init+0x354>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b32      	ldr	r3, [pc, #200]	@ (800140c <HAL_GPIO_Init+0x354>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a29      	ldr	r2, [pc, #164]	@ (800140c <HAL_GPIO_Init+0x354>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136a:	4b28      	ldr	r3, [pc, #160]	@ (800140c <HAL_GPIO_Init+0x354>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138e:	4a1f      	ldr	r2, [pc, #124]	@ (800140c <HAL_GPIO_Init+0x354>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <HAL_GPIO_Init+0x354>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b8:	4a14      	ldr	r2, [pc, #80]	@ (800140c <HAL_GPIO_Init+0x354>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	f67f ae86 	bls.w	80010d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021c00 	.word	0x40021c00
 8001404:	40022000 	.word	0x40022000
 8001408:	40022400 	.word	0x40022400
 800140c:	40013c00 	.word	0x40013c00

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800142c:	e003      	b.n	8001436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f806 	bl	8001474 <HAL_GPIO_EXTI_Callback>
  }
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40013c00 	.word	0x40013c00

08001474 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800148a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148c:	b08f      	sub	sp, #60	@ 0x3c
 800148e:	af0a      	add	r7, sp, #40	@ 0x28
 8001490:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e116      	b.n	80016ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fabc 	bl	8000a34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fa28 	bl	8003930 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	687e      	ldr	r6, [r7, #4]
 80014e8:	466d      	mov	r5, sp
 80014ea:	f106 0410 	add.w	r4, r6, #16
 80014ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80014fe:	1d33      	adds	r3, r6, #4
 8001500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001502:	6838      	ldr	r0, [r7, #0]
 8001504:	f002 f9bc 	bl	8003880 <USB_CoreInit>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2202      	movs	r2, #2
 8001512:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0d7      	b.n	80016ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fa16 	bl	8003952 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e04a      	b.n	80015c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	333d      	adds	r3, #61	@ 0x3d
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	333c      	adds	r3, #60	@ 0x3c
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	b298      	uxth	r0, r3
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3344      	adds	r3, #68	@ 0x44
 8001568:	4602      	mov	r2, r0
 800156a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	3340      	adds	r3, #64	@ 0x40
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3348      	adds	r3, #72	@ 0x48
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	334c      	adds	r3, #76	@ 0x4c
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3354      	adds	r3, #84	@ 0x54
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	3301      	adds	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3af      	bcc.n	800152c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e044      	b.n	800165c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3301      	adds	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d3b5      	bcc.n	80015d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	687e      	ldr	r6, [r7, #4]
 800166e:	466d      	mov	r5, sp
 8001670:	f106 0410 	add.w	r4, r6, #16
 8001674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800167c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001680:	e885 0003 	stmia.w	r5, {r0, r1}
 8001684:	1d33      	adds	r3, r6, #4
 8001686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001688:	6838      	ldr	r0, [r7, #0]
 800168a:	f002 f9af 	bl	80039ec <USB_DevInit>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e014      	b.n	80016ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d102      	bne.n	80016be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f80b 	bl	80016d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fb6d 	bl	8003da2 <USB_DevDisconnect>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_PCDEx_ActivateLPM+0x44>)
 8001704:	4313      	orrs	r3, r2
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	10000003 	.word	0x10000003

0800171c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40007000 	.word	0x40007000

0800173c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e291      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8087 	beq.w	800186e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001760:	4b96      	ldr	r3, [pc, #600]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b04      	cmp	r3, #4
 800176a:	d00c      	beq.n	8001786 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176c:	4b93      	ldr	r3, [pc, #588]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d112      	bne.n	800179e <HAL_RCC_OscConfig+0x62>
 8001778:	4b90      	ldr	r3, [pc, #576]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001784:	d10b      	bne.n	800179e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001786:	4b8d      	ldr	r3, [pc, #564]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d06c      	beq.n	800186c <HAL_RCC_OscConfig+0x130>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d168      	bne.n	800186c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e26b      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x7a>
 80017a8:	4b84      	ldr	r3, [pc, #528]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a83      	ldr	r2, [pc, #524]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	e02e      	b.n	8001814 <HAL_RCC_OscConfig+0xd8>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x9c>
 80017be:	4b7f      	ldr	r3, [pc, #508]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7e      	ldr	r2, [pc, #504]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b7c      	ldr	r3, [pc, #496]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7b      	ldr	r2, [pc, #492]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e01d      	b.n	8001814 <HAL_RCC_OscConfig+0xd8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0xc0>
 80017e2:	4b76      	ldr	r3, [pc, #472]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a75      	ldr	r2, [pc, #468]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b73      	ldr	r3, [pc, #460]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a72      	ldr	r2, [pc, #456]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0xd8>
 80017fc:	4b6f      	ldr	r3, [pc, #444]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a6e      	ldr	r2, [pc, #440]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b6c      	ldr	r3, [pc, #432]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6b      	ldr	r2, [pc, #428]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fa78 	bl	8000d10 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fa74 	bl	8000d10 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	@ 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e21f      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b61      	ldr	r3, [pc, #388]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0xe8>
 8001842:	e014      	b.n	800186e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fa64 	bl	8000d10 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fa60 	bl	8000d10 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	@ 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e20b      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	4b57      	ldr	r3, [pc, #348]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x110>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d069      	beq.n	800194e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187a:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001886:	4b4d      	ldr	r3, [pc, #308]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b08      	cmp	r3, #8
 8001890:	d11c      	bne.n	80018cc <HAL_RCC_OscConfig+0x190>
 8001892:	4b4a      	ldr	r3, [pc, #296]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d116      	bne.n	80018cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_RCC_OscConfig+0x17a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e1df      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b6:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	493d      	ldr	r1, [pc, #244]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	e040      	b.n	800194e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d023      	beq.n	800191c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d4:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a38      	ldr	r2, [pc, #224]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fa16 	bl	8000d10 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fa12 	bl	8000d10 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1bd      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b30      	ldr	r3, [pc, #192]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4929      	ldr	r1, [pc, #164]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
 800191a:	e018      	b.n	800194e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a26      	ldr	r2, [pc, #152]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff f9f2 	bl	8000d10 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff f9ee 	bl	8000d10 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e199      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d038      	beq.n	80019cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d019      	beq.n	8001996 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001966:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	f7ff f9cf 	bl	8000d10 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001976:	f7ff f9cb 	bl	8000d10 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e176      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 800198a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x23a>
 8001994:	e01a      	b.n	80019cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 8001998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <HAL_RCC_OscConfig+0x280>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a2:	f7ff f9b5 	bl	8000d10 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019aa:	f7ff f9b1 	bl	8000d10 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d903      	bls.n	80019c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e15c      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
 80019bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	4b91      	ldr	r3, [pc, #580]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 80019c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1ee      	bne.n	80019aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80a4 	beq.w	8001b22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b88      	ldr	r3, [pc, #544]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	4a87      	ldr	r2, [pc, #540]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f2:	4b85      	ldr	r3, [pc, #532]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a02:	4b82      	ldr	r3, [pc, #520]	@ (8001c0c <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c0c <HAL_RCC_OscConfig+0x4d0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7e      	ldr	r2, [pc, #504]	@ (8001c0c <HAL_RCC_OscConfig+0x4d0>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f979 	bl	8000d10 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7ff f975 	bl	8000d10 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	@ 0x64
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e120      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a34:	4b75      	ldr	r3, [pc, #468]	@ (8001c0c <HAL_RCC_OscConfig+0x4d0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x31a>
 8001a48:	4b6f      	ldr	r3, [pc, #444]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a54:	e02d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x376>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x33c>
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a62:	4a69      	ldr	r2, [pc, #420]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a6a:	4b67      	ldr	r3, [pc, #412]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6e:	4a66      	ldr	r2, [pc, #408]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a76:	e01c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x376>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x35e>
 8001a80:	4b61      	ldr	r3, [pc, #388]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a84:	4a60      	ldr	r2, [pc, #384]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a90:	4a5d      	ldr	r2, [pc, #372]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x376>
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa6:	4b58      	ldr	r3, [pc, #352]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aaa:	4a57      	ldr	r2, [pc, #348]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7ff f929 	bl	8000d10 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f925 	bl	8000d10 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0ce      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x386>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae6:	f7ff f913 	bl	8000d10 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff f90f 	bl	8000d10 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	4b40      	ldr	r3, [pc, #256]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	4b3c      	ldr	r3, [pc, #240]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80a4 	beq.w	8001c74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d06b      	beq.n	8001c10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d149      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a30      	ldr	r2, [pc, #192]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f8e0 	bl	8000d10 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f8dc 	bl	8000d10 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e087      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	4b28      	ldr	r3, [pc, #160]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	4313      	orrs	r3, r2
 8001b98:	4a1b      	ldr	r2, [pc, #108]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f8b0 	bl	8000d10 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f8ac 	bl	8000d10 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e057      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x478>
 8001bd2:	e04f      	b.n	8001c74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff f896 	bl	8000d10 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f892 	bl	8000d10 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e03d      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4ac>
 8001c06:	e035      	b.n	8001c74 <HAL_RCC_OscConfig+0x538>
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <HAL_RCC_OscConfig+0x544>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d028      	beq.n	8001c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d121      	bne.n	8001c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d11a      	bne.n	8001c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c40:	4013      	ands	r3, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d111      	bne.n	8001c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0d0      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d910      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b67      	ldr	r3, [pc, #412]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 020f 	bic.w	r2, r3, #15
 8001cb2:	4965      	ldr	r1, [pc, #404]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b63      	ldr	r3, [pc, #396]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b8      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001cea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cfc:	4b53      	ldr	r3, [pc, #332]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a52      	ldr	r2, [pc, #328]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b50      	ldr	r3, [pc, #320]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	494d      	ldr	r1, [pc, #308]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d040      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b47      	ldr	r3, [pc, #284]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d115      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e07f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	4b41      	ldr	r3, [pc, #260]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e073      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	4b3d      	ldr	r3, [pc, #244]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e06b      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d66:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f023 0203 	bic.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4936      	ldr	r1, [pc, #216]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d78:	f7fe ffca 	bl	8000d10 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d80:	f7fe ffc6 	bl	8000d10 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e053      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 020c 	and.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1eb      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d210      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 020f 	bic.w	r2, r3, #15
 8001dbe:	4922      	ldr	r1, [pc, #136]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e032      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4916      	ldr	r1, [pc, #88]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	490e      	ldr	r1, [pc, #56]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e16:	f000 f821 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	490a      	ldr	r1, [pc, #40]	@ (8001e50 <HAL_RCC_ClockConfig+0x1cc>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a09      	ldr	r2, [pc, #36]	@ (8001e54 <HAL_RCC_ClockConfig+0x1d0>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e32:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <HAL_RCC_ClockConfig+0x1d4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe ff26 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08007630 	.word	0x08007630
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e60:	b094      	sub	sp, #80	@ 0x50
 8001e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e68:	2300      	movs	r3, #0
 8001e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e74:	4b79      	ldr	r3, [pc, #484]	@ (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d00d      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x40>
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	f200 80e1 	bhi.w	8002048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x34>
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e8e:	e0db      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b73      	ldr	r3, [pc, #460]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e94:	e0db      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e96:	4b73      	ldr	r3, [pc, #460]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e9a:	e0d8      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ea4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	099b      	lsrs	r3, r3, #6
 8001eb8:	2200      	movs	r2, #0
 8001eba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ebc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ece:	4622      	mov	r2, r4
 8001ed0:	462b      	mov	r3, r5
 8001ed2:	f04f 0000 	mov.w	r0, #0
 8001ed6:	f04f 0100 	mov.w	r1, #0
 8001eda:	0159      	lsls	r1, r3, #5
 8001edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee0:	0150      	lsls	r0, r2, #5
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	1a51      	subs	r1, r2, r1
 8001eea:	6139      	str	r1, [r7, #16]
 8001eec:	4629      	mov	r1, r5
 8001eee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f00:	4659      	mov	r1, fp
 8001f02:	018b      	lsls	r3, r1, #6
 8001f04:	4651      	mov	r1, sl
 8001f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f0a:	4651      	mov	r1, sl
 8001f0c:	018a      	lsls	r2, r1, #6
 8001f0e:	4651      	mov	r1, sl
 8001f10:	ebb2 0801 	subs.w	r8, r2, r1
 8001f14:	4659      	mov	r1, fp
 8001f16:	eb63 0901 	sbc.w	r9, r3, r1
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f2e:	4690      	mov	r8, r2
 8001f30:	4699      	mov	r9, r3
 8001f32:	4623      	mov	r3, r4
 8001f34:	eb18 0303 	adds.w	r3, r8, r3
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	eb49 0303 	adc.w	r3, r9, r3
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f4e:	4629      	mov	r1, r5
 8001f50:	024b      	lsls	r3, r1, #9
 8001f52:	4621      	mov	r1, r4
 8001f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f58:	4621      	mov	r1, r4
 8001f5a:	024a      	lsls	r2, r1, #9
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f62:	2200      	movs	r2, #0
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f6c:	f7fe f950 	bl	8000210 <__aeabi_uldivmod>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4613      	mov	r3, r2
 8001f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f78:	e058      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7a:	4b38      	ldr	r3, [pc, #224]	@ (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	2200      	movs	r2, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	4611      	mov	r1, r2
 8001f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f94:	4642      	mov	r2, r8
 8001f96:	464b      	mov	r3, r9
 8001f98:	f04f 0000 	mov.w	r0, #0
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	0159      	lsls	r1, r3, #5
 8001fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa6:	0150      	lsls	r0, r2, #5
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4641      	mov	r1, r8
 8001fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fb2:	4649      	mov	r1, r9
 8001fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8001fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	00eb      	lsls	r3, r5, #3
 8001fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fe2:	00e2      	lsls	r2, r4, #3
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	4643      	mov	r3, r8
 8001fea:	18e3      	adds	r3, r4, r3
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	464b      	mov	r3, r9
 8001ff0:	eb45 0303 	adc.w	r3, r5, r3
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002002:	4629      	mov	r1, r5
 8002004:	028b      	lsls	r3, r1, #10
 8002006:	4621      	mov	r1, r4
 8002008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800200c:	4621      	mov	r1, r4
 800200e:	028a      	lsls	r2, r1, #10
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002016:	2200      	movs	r2, #0
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	61fa      	str	r2, [r7, #28]
 800201c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002020:	f7fe f8f6 	bl	8000210 <__aeabi_uldivmod>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4613      	mov	r3, r2
 800202a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	3301      	adds	r3, #1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800203c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800203e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002046:	e002      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x204>)
 800204a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800204c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800204e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002050:	4618      	mov	r0, r3
 8002052:	3750      	adds	r7, #80	@ 0x50
 8002054:	46bd      	mov	sp, r7
 8002056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	00f42400 	.word	0x00f42400
 8002064:	007a1200 	.word	0x007a1200

08002068 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <HAL_RCC_GetHCLKFreq+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002084:	f7ff fff0 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0a9b      	lsrs	r3, r3, #10
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4903      	ldr	r1, [pc, #12]	@ (80020a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08007640 	.word	0x08007640

080020a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020ac:	f7ff ffdc 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0b5b      	lsrs	r3, r3, #13
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	@ (80020cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	08007640 	.word	0x08007640

080020d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d012      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020f8:	4b69      	ldr	r3, [pc, #420]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a68      	ldr	r2, [pc, #416]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002102:	6093      	str	r3, [r2, #8]
 8002104:	4b66      	ldr	r3, [pc, #408]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210c:	4964      	ldr	r1, [pc, #400]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d017      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800212a:	4b5d      	ldr	r3, [pc, #372]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002130:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002138:	4959      	ldr	r1, [pc, #356]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002144:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002148:	d101      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800214a:	2301      	movs	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002156:	2301      	movs	r3, #1
 8002158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d017      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002166:	4b4e      	ldr	r3, [pc, #312]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800216c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	494a      	ldr	r1, [pc, #296]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002184:	d101      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002186:	2301      	movs	r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 808b 	beq.w	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b4:	4b3a      	ldr	r3, [pc, #232]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	4a39      	ldr	r2, [pc, #228]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021be:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c0:	4b37      	ldr	r3, [pc, #220]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021cc:	4b35      	ldr	r3, [pc, #212]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a34      	ldr	r2, [pc, #208]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d8:	f7fe fd9a 	bl	8000d10 <HAL_GetTick>
 80021dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e0:	f7fe fd96 	bl	8000d10 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	@ 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e357      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021f2:	4b2c      	ldr	r3, [pc, #176]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021fe:	4b28      	ldr	r3, [pc, #160]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002206:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d035      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d02e      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800221c:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002224:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002226:	4b1e      	ldr	r3, [pc, #120]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222a:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002230:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002232:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002236:	4a1a      	ldr	r2, [pc, #104]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800223e:	4a18      	ldr	r2, [pc, #96]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002244:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d114      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe fd5e 	bl	8000d10 <HAL_GetTick>
 8002254:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002256:	e00a      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002258:	f7fe fd5a 	bl	8000d10 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e319      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0ee      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002286:	d111      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002294:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002296:	400b      	ands	r3, r1
 8002298:	4901      	ldr	r1, [pc, #4]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
 800229e:	e00b      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40007000 	.word	0x40007000
 80022a8:	0ffffcff 	.word	0x0ffffcff
 80022ac:	4baa      	ldr	r3, [pc, #680]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4aa9      	ldr	r2, [pc, #676]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80022b6:	6093      	str	r3, [r2, #8]
 80022b8:	4ba7      	ldr	r3, [pc, #668]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	49a4      	ldr	r1, [pc, #656]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d010      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022d6:	4ba0      	ldr	r3, [pc, #640]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022dc:	4a9e      	ldr	r2, [pc, #632]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022e6:	4b9c      	ldr	r3, [pc, #624]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f0:	4999      	ldr	r1, [pc, #612]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002304:	4b94      	ldr	r3, [pc, #592]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002312:	4991      	ldr	r1, [pc, #580]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002326:	4b8c      	ldr	r3, [pc, #560]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002334:	4988      	ldr	r1, [pc, #544]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002348:	4b83      	ldr	r3, [pc, #524]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002356:	4980      	ldr	r1, [pc, #512]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800236a:	4b7b      	ldr	r3, [pc, #492]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002370:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002378:	4977      	ldr	r1, [pc, #476]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238c:	4b72      	ldr	r3, [pc, #456]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002392:	f023 0203 	bic.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	496f      	ldr	r1, [pc, #444]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b4:	f023 020c 	bic.w	r2, r3, #12
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023bc:	4966      	ldr	r1, [pc, #408]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023d0:	4b61      	ldr	r3, [pc, #388]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	495e      	ldr	r1, [pc, #376]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023f2:	4b59      	ldr	r3, [pc, #356]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002400:	4955      	ldr	r1, [pc, #340]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002414:	4b50      	ldr	r3, [pc, #320]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002422:	494d      	ldr	r1, [pc, #308]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002436:	4b48      	ldr	r3, [pc, #288]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002444:	4944      	ldr	r1, [pc, #272]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002458:	4b3f      	ldr	r3, [pc, #252]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	493c      	ldr	r1, [pc, #240]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800247a:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002480:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002488:	4933      	ldr	r1, [pc, #204]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800249c:	4b2e      	ldr	r3, [pc, #184]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024aa:	492b      	ldr	r1, [pc, #172]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d011      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024be:	4b26      	ldr	r3, [pc, #152]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024cc:	4922      	ldr	r1, [pc, #136]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024dc:	d101      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024de:	2301      	movs	r3, #1
 80024e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024ee:	2301      	movs	r3, #1
 80024f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024fe:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002504:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250c:	4912      	ldr	r1, [pc, #72]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00b      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002520:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002526:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002530:	4909      	ldr	r1, [pc, #36]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d006      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80d9 	beq.w	80026fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800254c:	4b02      	ldr	r3, [pc, #8]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a01      	ldr	r2, [pc, #4]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002552:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002556:	e001      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002558:	40023800 	.word	0x40023800
 800255c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255e:	f7fe fbd7 	bl	8000d10 <HAL_GetTick>
 8002562:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002566:	f7fe fbd3 	bl	8000d10 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b64      	cmp	r3, #100	@ 0x64
 8002572:	d901      	bls.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e194      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002578:	4b6c      	ldr	r3, [pc, #432]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d021      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11d      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002598:	4b64      	ldr	r3, [pc, #400]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800259a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025a6:	4b61      	ldr	r3, [pc, #388]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ac:	0e1b      	lsrs	r3, r3, #24
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	019a      	lsls	r2, r3, #6
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	431a      	orrs	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	061b      	lsls	r3, r3, #24
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	071b      	lsls	r3, r3, #28
 80025cc:	4957      	ldr	r1, [pc, #348]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d02e      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025fe:	d129      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002600:	4b4a      	ldr	r3, [pc, #296]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002606:	0c1b      	lsrs	r3, r3, #16
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800260e:	4b47      	ldr	r3, [pc, #284]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002614:	0f1b      	lsrs	r3, r3, #28
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	019a      	lsls	r2, r3, #6
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	431a      	orrs	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	071b      	lsls	r3, r3, #28
 8002634:	493d      	ldr	r1, [pc, #244]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800263c:	4b3b      	ldr	r3, [pc, #236]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800263e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002642:	f023 021f 	bic.w	r2, r3, #31
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	3b01      	subs	r3, #1
 800264c:	4937      	ldr	r1, [pc, #220]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01d      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002660:	4b32      	ldr	r3, [pc, #200]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002666:	0e1b      	lsrs	r3, r3, #24
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800266e:	4b2f      	ldr	r3, [pc, #188]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002674:	0f1b      	lsrs	r3, r3, #28
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	019a      	lsls	r2, r3, #6
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	041b      	lsls	r3, r3, #16
 8002688:	431a      	orrs	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	431a      	orrs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	071b      	lsls	r3, r3, #28
 8002694:	4925      	ldr	r1, [pc, #148]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d011      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	019a      	lsls	r2, r3, #6
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	061b      	lsls	r3, r3, #24
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	071b      	lsls	r3, r3, #28
 80026c4:	4919      	ldr	r1, [pc, #100]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026cc:	4b17      	ldr	r3, [pc, #92]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a16      	ldr	r2, [pc, #88]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d8:	f7fe fb1a 	bl	8000d10 <HAL_GetTick>
 80026dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026e0:	f7fe fb16 	bl	8000d10 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	@ 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e0d7      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026f2:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b01      	cmp	r3, #1
 8002702:	f040 80cd 	bne.w	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002706:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a08      	ldr	r2, [pc, #32]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800270c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002712:	f7fe fafd 	bl	8000d10 <HAL_GetTick>
 8002716:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800271a:	f7fe faf9 	bl	8000d10 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	@ 0x64
 8002726:	d903      	bls.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e0ba      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800272c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002730:	4b5e      	ldr	r3, [pc, #376]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800273c:	d0ed      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800275a:	2b00      	cmp	r3, #0
 800275c:	d02e      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d12a      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002766:	4b51      	ldr	r3, [pc, #324]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002774:	4b4d      	ldr	r3, [pc, #308]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277a:	0f1b      	lsrs	r3, r3, #28
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	019a      	lsls	r2, r3, #6
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	041b      	lsls	r3, r3, #16
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	061b      	lsls	r3, r3, #24
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	071b      	lsls	r3, r3, #28
 800279a:	4944      	ldr	r1, [pc, #272]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027a2:	4b42      	ldr	r3, [pc, #264]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	3b01      	subs	r3, #1
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	493d      	ldr	r1, [pc, #244]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d022      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027d0:	d11d      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027d2:	4b36      	ldr	r3, [pc, #216]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d8:	0e1b      	lsrs	r3, r3, #24
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027e0:	4b32      	ldr	r3, [pc, #200]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e6:	0f1b      	lsrs	r3, r3, #28
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	019a      	lsls	r2, r3, #6
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	041b      	lsls	r3, r3, #16
 80027fa:	431a      	orrs	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	061b      	lsls	r3, r3, #24
 8002800:	431a      	orrs	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	071b      	lsls	r3, r3, #28
 8002806:	4929      	ldr	r1, [pc, #164]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d028      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800281a:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002820:	0e1b      	lsrs	r3, r3, #24
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002828:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	0c1b      	lsrs	r3, r3, #16
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	019a      	lsls	r2, r3, #6
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	431a      	orrs	r2, r3
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	061b      	lsls	r3, r3, #24
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	071b      	lsls	r3, r3, #28
 800284e:	4917      	ldr	r1, [pc, #92]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002856:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800285c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	4911      	ldr	r1, [pc, #68]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800286c:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0e      	ldr	r2, [pc, #56]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe fa4a 	bl	8000d10 <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002880:	f7fe fa46 	bl	8000d10 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	@ 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e007      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800289a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800289e:	d1ef      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800

080028b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e040      	b.n	8002944 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe f846 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	@ 0x24
 80028dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fb1e 	bl	8002f30 <UART_SetConfig>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e022      	b.n	8002944 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fd76 	bl	80033f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800291a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800292a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fdfd 	bl	800353c <UART_CheckIdleState>
 8002942:	4603      	mov	r3, r0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b0ba      	sub	sp, #232	@ 0xe8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002972:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002976:	f640 030f 	movw	r3, #2063	@ 0x80f
 800297a:	4013      	ands	r3, r2
 800297c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d115      	bne.n	80029b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00f      	beq.n	80029b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8297 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
      }
      return;
 80029b2:	e291      	b.n	8002ed8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8117 	beq.w	8002bec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80029ce:	4b85      	ldr	r3, [pc, #532]	@ (8002be4 <HAL_UART_IRQHandler+0x298>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 810a 	beq.w	8002bec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d011      	beq.n	8002a08 <HAL_UART_IRQHandler+0xbc>
 80029e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2201      	movs	r2, #1
 80029f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d011      	beq.n	8002a38 <HAL_UART_IRQHandler+0xec>
 8002a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2202      	movs	r2, #2
 8002a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a2e:	f043 0204 	orr.w	r2, r3, #4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d011      	beq.n	8002a68 <HAL_UART_IRQHandler+0x11c>
 8002a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2204      	movs	r2, #4
 8002a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a5e:	f043 0202 	orr.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d017      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2208      	movs	r2, #8
 8002a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a9a:	f043 0208 	orr.w	r2, r3, #8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x18a>
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 81fd 	beq.w	8002edc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1e:	2b40      	cmp	r3, #64	@ 0x40
 8002b20:	d005      	beq.n	8002b2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d04f      	beq.n	8002bce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fe01 	bl	8003736 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3e:	2b40      	cmp	r3, #64	@ 0x40
 8002b40:	d141      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3308      	adds	r3, #8
 8002b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3308      	adds	r3, #8
 8002b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1d9      	bne.n	8002b42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d013      	beq.n	8002bbe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9a:	4a13      	ldr	r2, [pc, #76]	@ (8002be8 <HAL_UART_IRQHandler+0x29c>)
 8002b9c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fa65 	bl	8001072 <HAL_DMA_Abort_IT>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d017      	beq.n	8002bde <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bbc:	e00f      	b.n	8002bde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9a0 	bl	8002f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	e00b      	b.n	8002bde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f99c 	bl	8002f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	e007      	b.n	8002bde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f998 	bl	8002f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002bdc:	e17e      	b.n	8002edc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bde:	bf00      	nop
    return;
 8002be0:	e17c      	b.n	8002edc <HAL_UART_IRQHandler+0x590>
 8002be2:	bf00      	nop
 8002be4:	04000120 	.word	0x04000120
 8002be8:	080037ff 	.word	0x080037ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f040 814c 	bne.w	8002e8e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8145 	beq.w	8002e8e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 813e 	beq.w	8002e8e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2210      	movs	r2, #16
 8002c18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c24:	2b40      	cmp	r3, #64	@ 0x40
 8002c26:	f040 80b6 	bne.w	8002d96 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8150 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	f080 8148 	bcs.w	8002ee0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c64:	f000 8086 	beq.w	8002d74 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1da      	bne.n	8002c68 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e1      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
 8002cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d1a:	e841 2300 	strex	r3, r2, [r1]
 8002d1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e3      	bne.n	8002cee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d44:	f023 0310 	bic.w	r3, r3, #16
 8002d48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e4      	bne.n	8002d34 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe f90f 	bl	8000f92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f8c2 	bl	8002f18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d94:	e0a4      	b.n	8002ee0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8096 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8002db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8091 	beq.w	8002ee4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dca:	e853 3f00 	ldrex	r3, [r3]
 8002dce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002de6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e4      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	623b      	str	r3, [r7, #32]
   return(result);
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3308      	adds	r3, #8
 8002e18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e24:	e841 2300 	strex	r3, r2, [r1]
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e3      	bne.n	8002df8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
 8002e50:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f023 0310 	bic.w	r3, r3, #16
 8002e58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	69b9      	ldr	r1, [r7, #24]
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	617b      	str	r3, [r7, #20]
   return(result);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e4      	bne.n	8002e44 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f846 	bl	8002f18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e8c:	e02a      	b.n	8002ee4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01c      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
    }
    return;
 8002eb6:	e017      	b.n	8002ee8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d012      	beq.n	8002eea <HAL_UART_IRQHandler+0x59e>
 8002ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00c      	beq.n	8002eea <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fcaa 	bl	800382a <UART_EndTransmit_IT>
    return;
 8002ed6:	e008      	b.n	8002eea <HAL_UART_IRQHandler+0x59e>
      return;
 8002ed8:	bf00      	nop
 8002eda:	e006      	b.n	8002eea <HAL_UART_IRQHandler+0x59e>
    return;
 8002edc:	bf00      	nop
 8002ede:	e004      	b.n	8002eea <HAL_UART_IRQHandler+0x59e>
      return;
 8002ee0:	bf00      	nop
 8002ee2:	e002      	b.n	8002eea <HAL_UART_IRQHandler+0x59e>
      return;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_UART_IRQHandler+0x59e>
    return;
 8002ee8:	bf00      	nop
  }

}
 8002eea:	37e8      	adds	r7, #232	@ 0xe8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4ba6      	ldr	r3, [pc, #664]	@ (80031f4 <UART_SetConfig+0x2c4>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	6979      	ldr	r1, [r7, #20]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a94      	ldr	r2, [pc, #592]	@ (80031f8 <UART_SetConfig+0x2c8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d120      	bne.n	8002fee <UART_SetConfig+0xbe>
 8002fac:	4b93      	ldr	r3, [pc, #588]	@ (80031fc <UART_SetConfig+0x2cc>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d816      	bhi.n	8002fe8 <UART_SetConfig+0xb8>
 8002fba:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc0 <UART_SetConfig+0x90>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fdd 	.word	0x08002fdd
 8002fc8:	08002fd7 	.word	0x08002fd7
 8002fcc:	08002fe3 	.word	0x08002fe3
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e150      	b.n	8003278 <UART_SetConfig+0x348>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e14d      	b.n	8003278 <UART_SetConfig+0x348>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e14a      	b.n	8003278 <UART_SetConfig+0x348>
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e147      	b.n	8003278 <UART_SetConfig+0x348>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e144      	b.n	8003278 <UART_SetConfig+0x348>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a83      	ldr	r2, [pc, #524]	@ (8003200 <UART_SetConfig+0x2d0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d132      	bne.n	800305e <UART_SetConfig+0x12e>
 8002ff8:	4b80      	ldr	r3, [pc, #512]	@ (80031fc <UART_SetConfig+0x2cc>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d828      	bhi.n	8003058 <UART_SetConfig+0x128>
 8003006:	a201      	add	r2, pc, #4	@ (adr r2, 800300c <UART_SetConfig+0xdc>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	08003041 	.word	0x08003041
 8003010:	08003059 	.word	0x08003059
 8003014:	08003059 	.word	0x08003059
 8003018:	08003059 	.word	0x08003059
 800301c:	0800304d 	.word	0x0800304d
 8003020:	08003059 	.word	0x08003059
 8003024:	08003059 	.word	0x08003059
 8003028:	08003059 	.word	0x08003059
 800302c:	08003047 	.word	0x08003047
 8003030:	08003059 	.word	0x08003059
 8003034:	08003059 	.word	0x08003059
 8003038:	08003059 	.word	0x08003059
 800303c:	08003053 	.word	0x08003053
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e118      	b.n	8003278 <UART_SetConfig+0x348>
 8003046:	2302      	movs	r3, #2
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e115      	b.n	8003278 <UART_SetConfig+0x348>
 800304c:	2304      	movs	r3, #4
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e112      	b.n	8003278 <UART_SetConfig+0x348>
 8003052:	2308      	movs	r3, #8
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e10f      	b.n	8003278 <UART_SetConfig+0x348>
 8003058:	2310      	movs	r3, #16
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e10c      	b.n	8003278 <UART_SetConfig+0x348>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a68      	ldr	r2, [pc, #416]	@ (8003204 <UART_SetConfig+0x2d4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d120      	bne.n	80030aa <UART_SetConfig+0x17a>
 8003068:	4b64      	ldr	r3, [pc, #400]	@ (80031fc <UART_SetConfig+0x2cc>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003072:	2b30      	cmp	r3, #48	@ 0x30
 8003074:	d013      	beq.n	800309e <UART_SetConfig+0x16e>
 8003076:	2b30      	cmp	r3, #48	@ 0x30
 8003078:	d814      	bhi.n	80030a4 <UART_SetConfig+0x174>
 800307a:	2b20      	cmp	r3, #32
 800307c:	d009      	beq.n	8003092 <UART_SetConfig+0x162>
 800307e:	2b20      	cmp	r3, #32
 8003080:	d810      	bhi.n	80030a4 <UART_SetConfig+0x174>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <UART_SetConfig+0x15c>
 8003086:	2b10      	cmp	r3, #16
 8003088:	d006      	beq.n	8003098 <UART_SetConfig+0x168>
 800308a:	e00b      	b.n	80030a4 <UART_SetConfig+0x174>
 800308c:	2300      	movs	r3, #0
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e0f2      	b.n	8003278 <UART_SetConfig+0x348>
 8003092:	2302      	movs	r3, #2
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e0ef      	b.n	8003278 <UART_SetConfig+0x348>
 8003098:	2304      	movs	r3, #4
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e0ec      	b.n	8003278 <UART_SetConfig+0x348>
 800309e:	2308      	movs	r3, #8
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e0e9      	b.n	8003278 <UART_SetConfig+0x348>
 80030a4:	2310      	movs	r3, #16
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e0e6      	b.n	8003278 <UART_SetConfig+0x348>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a56      	ldr	r2, [pc, #344]	@ (8003208 <UART_SetConfig+0x2d8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d120      	bne.n	80030f6 <UART_SetConfig+0x1c6>
 80030b4:	4b51      	ldr	r3, [pc, #324]	@ (80031fc <UART_SetConfig+0x2cc>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030be:	2bc0      	cmp	r3, #192	@ 0xc0
 80030c0:	d013      	beq.n	80030ea <UART_SetConfig+0x1ba>
 80030c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80030c4:	d814      	bhi.n	80030f0 <UART_SetConfig+0x1c0>
 80030c6:	2b80      	cmp	r3, #128	@ 0x80
 80030c8:	d009      	beq.n	80030de <UART_SetConfig+0x1ae>
 80030ca:	2b80      	cmp	r3, #128	@ 0x80
 80030cc:	d810      	bhi.n	80030f0 <UART_SetConfig+0x1c0>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <UART_SetConfig+0x1a8>
 80030d2:	2b40      	cmp	r3, #64	@ 0x40
 80030d4:	d006      	beq.n	80030e4 <UART_SetConfig+0x1b4>
 80030d6:	e00b      	b.n	80030f0 <UART_SetConfig+0x1c0>
 80030d8:	2300      	movs	r3, #0
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e0cc      	b.n	8003278 <UART_SetConfig+0x348>
 80030de:	2302      	movs	r3, #2
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e0c9      	b.n	8003278 <UART_SetConfig+0x348>
 80030e4:	2304      	movs	r3, #4
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e0c6      	b.n	8003278 <UART_SetConfig+0x348>
 80030ea:	2308      	movs	r3, #8
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e0c3      	b.n	8003278 <UART_SetConfig+0x348>
 80030f0:	2310      	movs	r3, #16
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e0c0      	b.n	8003278 <UART_SetConfig+0x348>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a44      	ldr	r2, [pc, #272]	@ (800320c <UART_SetConfig+0x2dc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d125      	bne.n	800314c <UART_SetConfig+0x21c>
 8003100:	4b3e      	ldr	r3, [pc, #248]	@ (80031fc <UART_SetConfig+0x2cc>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800310a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800310e:	d017      	beq.n	8003140 <UART_SetConfig+0x210>
 8003110:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003114:	d817      	bhi.n	8003146 <UART_SetConfig+0x216>
 8003116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800311a:	d00b      	beq.n	8003134 <UART_SetConfig+0x204>
 800311c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003120:	d811      	bhi.n	8003146 <UART_SetConfig+0x216>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <UART_SetConfig+0x1fe>
 8003126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800312a:	d006      	beq.n	800313a <UART_SetConfig+0x20a>
 800312c:	e00b      	b.n	8003146 <UART_SetConfig+0x216>
 800312e:	2300      	movs	r3, #0
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e0a1      	b.n	8003278 <UART_SetConfig+0x348>
 8003134:	2302      	movs	r3, #2
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e09e      	b.n	8003278 <UART_SetConfig+0x348>
 800313a:	2304      	movs	r3, #4
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	e09b      	b.n	8003278 <UART_SetConfig+0x348>
 8003140:	2308      	movs	r3, #8
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e098      	b.n	8003278 <UART_SetConfig+0x348>
 8003146:	2310      	movs	r3, #16
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e095      	b.n	8003278 <UART_SetConfig+0x348>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2f      	ldr	r2, [pc, #188]	@ (8003210 <UART_SetConfig+0x2e0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d125      	bne.n	80031a2 <UART_SetConfig+0x272>
 8003156:	4b29      	ldr	r3, [pc, #164]	@ (80031fc <UART_SetConfig+0x2cc>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003160:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003164:	d017      	beq.n	8003196 <UART_SetConfig+0x266>
 8003166:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800316a:	d817      	bhi.n	800319c <UART_SetConfig+0x26c>
 800316c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003170:	d00b      	beq.n	800318a <UART_SetConfig+0x25a>
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003176:	d811      	bhi.n	800319c <UART_SetConfig+0x26c>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <UART_SetConfig+0x254>
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003180:	d006      	beq.n	8003190 <UART_SetConfig+0x260>
 8003182:	e00b      	b.n	800319c <UART_SetConfig+0x26c>
 8003184:	2301      	movs	r3, #1
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e076      	b.n	8003278 <UART_SetConfig+0x348>
 800318a:	2302      	movs	r3, #2
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e073      	b.n	8003278 <UART_SetConfig+0x348>
 8003190:	2304      	movs	r3, #4
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e070      	b.n	8003278 <UART_SetConfig+0x348>
 8003196:	2308      	movs	r3, #8
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e06d      	b.n	8003278 <UART_SetConfig+0x348>
 800319c:	2310      	movs	r3, #16
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e06a      	b.n	8003278 <UART_SetConfig+0x348>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003214 <UART_SetConfig+0x2e4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d138      	bne.n	800321e <UART_SetConfig+0x2ee>
 80031ac:	4b13      	ldr	r3, [pc, #76]	@ (80031fc <UART_SetConfig+0x2cc>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80031b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031ba:	d017      	beq.n	80031ec <UART_SetConfig+0x2bc>
 80031bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031c0:	d82a      	bhi.n	8003218 <UART_SetConfig+0x2e8>
 80031c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c6:	d00b      	beq.n	80031e0 <UART_SetConfig+0x2b0>
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031cc:	d824      	bhi.n	8003218 <UART_SetConfig+0x2e8>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <UART_SetConfig+0x2aa>
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d6:	d006      	beq.n	80031e6 <UART_SetConfig+0x2b6>
 80031d8:	e01e      	b.n	8003218 <UART_SetConfig+0x2e8>
 80031da:	2300      	movs	r3, #0
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e04b      	b.n	8003278 <UART_SetConfig+0x348>
 80031e0:	2302      	movs	r3, #2
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e048      	b.n	8003278 <UART_SetConfig+0x348>
 80031e6:	2304      	movs	r3, #4
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e045      	b.n	8003278 <UART_SetConfig+0x348>
 80031ec:	2308      	movs	r3, #8
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e042      	b.n	8003278 <UART_SetConfig+0x348>
 80031f2:	bf00      	nop
 80031f4:	efff69f3 	.word	0xefff69f3
 80031f8:	40011000 	.word	0x40011000
 80031fc:	40023800 	.word	0x40023800
 8003200:	40004400 	.word	0x40004400
 8003204:	40004800 	.word	0x40004800
 8003208:	40004c00 	.word	0x40004c00
 800320c:	40005000 	.word	0x40005000
 8003210:	40011400 	.word	0x40011400
 8003214:	40007800 	.word	0x40007800
 8003218:	2310      	movs	r3, #16
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e02c      	b.n	8003278 <UART_SetConfig+0x348>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a72      	ldr	r2, [pc, #456]	@ (80033ec <UART_SetConfig+0x4bc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d125      	bne.n	8003274 <UART_SetConfig+0x344>
 8003228:	4b71      	ldr	r3, [pc, #452]	@ (80033f0 <UART_SetConfig+0x4c0>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003232:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003236:	d017      	beq.n	8003268 <UART_SetConfig+0x338>
 8003238:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800323c:	d817      	bhi.n	800326e <UART_SetConfig+0x33e>
 800323e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003242:	d00b      	beq.n	800325c <UART_SetConfig+0x32c>
 8003244:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003248:	d811      	bhi.n	800326e <UART_SetConfig+0x33e>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <UART_SetConfig+0x326>
 800324e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003252:	d006      	beq.n	8003262 <UART_SetConfig+0x332>
 8003254:	e00b      	b.n	800326e <UART_SetConfig+0x33e>
 8003256:	2300      	movs	r3, #0
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e00d      	b.n	8003278 <UART_SetConfig+0x348>
 800325c:	2302      	movs	r3, #2
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e00a      	b.n	8003278 <UART_SetConfig+0x348>
 8003262:	2304      	movs	r3, #4
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e007      	b.n	8003278 <UART_SetConfig+0x348>
 8003268:	2308      	movs	r3, #8
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e004      	b.n	8003278 <UART_SetConfig+0x348>
 800326e:	2310      	movs	r3, #16
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e001      	b.n	8003278 <UART_SetConfig+0x348>
 8003274:	2310      	movs	r3, #16
 8003276:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003280:	d15b      	bne.n	800333a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003282:	7ffb      	ldrb	r3, [r7, #31]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d828      	bhi.n	80032da <UART_SetConfig+0x3aa>
 8003288:	a201      	add	r2, pc, #4	@ (adr r2, 8003290 <UART_SetConfig+0x360>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032b5 	.word	0x080032b5
 8003294:	080032bd 	.word	0x080032bd
 8003298:	080032c5 	.word	0x080032c5
 800329c:	080032db 	.word	0x080032db
 80032a0:	080032cb 	.word	0x080032cb
 80032a4:	080032db 	.word	0x080032db
 80032a8:	080032db 	.word	0x080032db
 80032ac:	080032db 	.word	0x080032db
 80032b0:	080032d3 	.word	0x080032d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b4:	f7fe fee4 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 80032b8:	61b8      	str	r0, [r7, #24]
        break;
 80032ba:	e013      	b.n	80032e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032bc:	f7fe fef4 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 80032c0:	61b8      	str	r0, [r7, #24]
        break;
 80032c2:	e00f      	b.n	80032e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c4:	4b4b      	ldr	r3, [pc, #300]	@ (80033f4 <UART_SetConfig+0x4c4>)
 80032c6:	61bb      	str	r3, [r7, #24]
        break;
 80032c8:	e00c      	b.n	80032e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ca:	f7fe fdc7 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 80032ce:	61b8      	str	r0, [r7, #24]
        break;
 80032d0:	e008      	b.n	80032e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032d6:	61bb      	str	r3, [r7, #24]
        break;
 80032d8:	e004      	b.n	80032e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	77bb      	strb	r3, [r7, #30]
        break;
 80032e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d074      	beq.n	80033d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	005a      	lsls	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	d916      	bls.n	8003334 <UART_SetConfig+0x404>
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800330c:	d212      	bcs.n	8003334 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	b29b      	uxth	r3, r3
 8003312:	f023 030f 	bic.w	r3, r3, #15
 8003316:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	b29b      	uxth	r3, r3
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	b29a      	uxth	r2, r3
 8003324:	89fb      	ldrh	r3, [r7, #14]
 8003326:	4313      	orrs	r3, r2
 8003328:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	89fa      	ldrh	r2, [r7, #14]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	e04f      	b.n	80033d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	77bb      	strb	r3, [r7, #30]
 8003338:	e04c      	b.n	80033d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800333a:	7ffb      	ldrb	r3, [r7, #31]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d828      	bhi.n	8003392 <UART_SetConfig+0x462>
 8003340:	a201      	add	r2, pc, #4	@ (adr r2, 8003348 <UART_SetConfig+0x418>)
 8003342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003346:	bf00      	nop
 8003348:	0800336d 	.word	0x0800336d
 800334c:	08003375 	.word	0x08003375
 8003350:	0800337d 	.word	0x0800337d
 8003354:	08003393 	.word	0x08003393
 8003358:	08003383 	.word	0x08003383
 800335c:	08003393 	.word	0x08003393
 8003360:	08003393 	.word	0x08003393
 8003364:	08003393 	.word	0x08003393
 8003368:	0800338b 	.word	0x0800338b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800336c:	f7fe fe88 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8003370:	61b8      	str	r0, [r7, #24]
        break;
 8003372:	e013      	b.n	800339c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003374:	f7fe fe98 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 8003378:	61b8      	str	r0, [r7, #24]
        break;
 800337a:	e00f      	b.n	800339c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800337c:	4b1d      	ldr	r3, [pc, #116]	@ (80033f4 <UART_SetConfig+0x4c4>)
 800337e:	61bb      	str	r3, [r7, #24]
        break;
 8003380:	e00c      	b.n	800339c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003382:	f7fe fd6b 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8003386:	61b8      	str	r0, [r7, #24]
        break;
 8003388:	e008      	b.n	800339c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800338e:	61bb      	str	r3, [r7, #24]
        break;
 8003390:	e004      	b.n	800339c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	77bb      	strb	r3, [r7, #30]
        break;
 800339a:	bf00      	nop
    }

    if (pclk != 0U)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d018      	beq.n	80033d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085a      	lsrs	r2, r3, #1
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	441a      	add	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b0f      	cmp	r3, #15
 80033ba:	d909      	bls.n	80033d0 <UART_SetConfig+0x4a0>
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c2:	d205      	bcs.n	80033d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	e001      	b.n	80033d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40007c00 	.word	0x40007c00
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400

080033f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01a      	beq.n	800350e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f6:	d10a      	bne.n	800350e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800354c:	f7fd fbe0 	bl	8000d10 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b08      	cmp	r3, #8
 800355e:	d10e      	bne.n	800357e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003560:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f81b 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e011      	b.n	80035a2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b09c      	sub	sp, #112	@ 0x70
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ba:	e0a7      	b.n	800370c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	f000 80a3 	beq.w	800370c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fd fba3 	bl	8000d10 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <UART_WaitOnFlagUntilTimeout+0x32>
 80035d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d13f      	bne.n	800365c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80035ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ec:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80035f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035fc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003600:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e6      	bne.n	80035dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3308      	adds	r3, #8
 8003614:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800361e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	663b      	str	r3, [r7, #96]	@ 0x60
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3308      	adds	r3, #8
 800362c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800362e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003630:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800363c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e5      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e068      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	d050      	beq.n	800370c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003678:	d148      	bne.n	800370c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003682:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003698:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036a4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e6      	bne.n	8003684 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3308      	adds	r3, #8
 80036bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	613b      	str	r3, [r7, #16]
   return(result);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3308      	adds	r3, #8
 80036d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80036d6:	623a      	str	r2, [r7, #32]
 80036d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	69f9      	ldr	r1, [r7, #28]
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e5      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e010      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69da      	ldr	r2, [r3, #28]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	429a      	cmp	r2, r3
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	429a      	cmp	r2, r3
 8003728:	f43f af48 	beq.w	80035bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3770      	adds	r7, #112	@ 0x70
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003736:	b480      	push	{r7}
 8003738:	b095      	sub	sp, #84	@ 0x54
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800375c:	643b      	str	r3, [r7, #64]	@ 0x40
 800375e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003762:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e6      	bne.n	800373e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3308      	adds	r3, #8
 8003776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3308      	adds	r3, #8
 800378e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003790:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003792:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e5      	bne.n	8003770 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d118      	bne.n	80037de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 0310 	bic.w	r3, r3, #16
 80037c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6979      	ldr	r1, [r7, #20]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	613b      	str	r3, [r7, #16]
   return(result);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e6      	bne.n	80037ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037f2:	bf00      	nop
 80037f4:	3754      	adds	r7, #84	@ 0x54
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff fb71 	bl	8002f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003822:	bf00      	nop
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b088      	sub	sp, #32
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6979      	ldr	r1, [r7, #20]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	613b      	str	r3, [r7, #16]
   return(result);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e6      	bne.n	8003832 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fb3d 	bl	8002ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003876:	bf00      	nop
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003880:	b084      	sub	sp, #16
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	f107 001c 	add.w	r0, r7, #28
 800388e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003894:	2b01      	cmp	r3, #1
 8003896:	d120      	bne.n	80038da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	4b20      	ldr	r3, [pc, #128]	@ (800392c <USB_CoreInit+0xac>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa96 	bl	8003e00 <USB_CoreReset>
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e010      	b.n	80038fc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa8a 	bl	8003e00 <USB_CoreReset>
 80038ec:	4603      	mov	r3, r0
 80038ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80038fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d10b      	bne.n	800391a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f043 0206 	orr.w	r2, r3, #6
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003926:	b004      	add	sp, #16
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	ffbdffbf 	.word	0xffbdffbf

08003930 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 0201 	bic.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	460b      	mov	r3, r1
 800395c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d115      	bne.n	80039a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003980:	2001      	movs	r0, #1
 8003982:	f7fd f9d1 	bl	8000d28 <HAL_Delay>
      ms++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3301      	adds	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fa29 	bl	8003de4 <USB_GetMode>
 8003992:	4603      	mov	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d01e      	beq.n	80039d6 <USB_SetCurrentMode+0x84>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b31      	cmp	r3, #49	@ 0x31
 800399c:	d9f0      	bls.n	8003980 <USB_SetCurrentMode+0x2e>
 800399e:	e01a      	b.n	80039d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d115      	bne.n	80039d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f7fd f9b8 	bl	8000d28 <HAL_Delay>
      ms++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3301      	adds	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa10 	bl	8003de4 <USB_GetMode>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <USB_SetCurrentMode+0x84>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b31      	cmp	r3, #49	@ 0x31
 80039ce:	d9f0      	bls.n	80039b2 <USB_SetCurrentMode+0x60>
 80039d0:	e001      	b.n	80039d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e005      	b.n	80039e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b32      	cmp	r3, #50	@ 0x32
 80039da:	d101      	bne.n	80039e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039ec:	b084      	sub	sp, #16
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80039fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e009      	b.n	8003a20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	3340      	adds	r3, #64	@ 0x40
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	2200      	movs	r2, #0
 8003a18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b0e      	cmp	r3, #14
 8003a24:	d9f2      	bls.n	8003a0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11c      	bne.n	8003a66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a3a:	f043 0302 	orr.w	r3, r3, #2
 8003a3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a44:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e005      	b.n	8003a72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a84:	4619      	mov	r1, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	680b      	ldr	r3, [r1, #0]
 8003a90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10c      	bne.n	8003ab2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d104      	bne.n	8003aa8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f965 	bl	8003d70 <USB_SetDevSpeed>
 8003aa6:	e008      	b.n	8003aba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f960 	bl	8003d70 <USB_SetDevSpeed>
 8003ab0:	e003      	b.n	8003aba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ab2:	2103      	movs	r1, #3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f95b 	bl	8003d70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003aba:	2110      	movs	r1, #16
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f8f3 	bl	8003ca8 <USB_FlushTxFifo>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f91f 	bl	8003d10 <USB_FlushRxFifo>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aee:	461a      	mov	r2, r3
 8003af0:	2300      	movs	r3, #0
 8003af2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003afa:	461a      	mov	r2, r3
 8003afc:	2300      	movs	r3, #0
 8003afe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	e043      	b.n	8003b8e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b1c:	d118      	bne.n	8003b50 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b30:	461a      	mov	r2, r3
 8003b32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	e013      	b.n	8003b62 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b46:	461a      	mov	r2, r3
 8003b48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e008      	b.n	8003b62 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2300      	movs	r3, #0
 8003b60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b80:	461a      	mov	r2, r3
 8003b82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d3b7      	bcc.n	8003b06 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	e043      	b.n	8003c24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bb2:	d118      	bne.n	8003be6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e013      	b.n	8003bf8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	e008      	b.n	8003bf8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c04:	461a      	mov	r2, r3
 8003c06:	2300      	movs	r3, #0
 8003c08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c16:	461a      	mov	r2, r3
 8003c18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	3301      	adds	r3, #1
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d3b7      	bcc.n	8003b9c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003c4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca0 <USB_DevInit+0x2b4>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f043 0208 	orr.w	r2, r3, #8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d105      	bne.n	8003c90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <USB_DevInit+0x2b8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c9c:	b004      	add	sp, #16
 8003c9e:	4770      	bx	lr
 8003ca0:	803c3800 	.word	0x803c3800
 8003ca4:	40000004 	.word	0x40000004

08003ca8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a13      	ldr	r2, [pc, #76]	@ (8003d0c <USB_FlushTxFifo+0x64>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d901      	bls.n	8003cc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e01b      	b.n	8003d00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	daf2      	bge.n	8003cb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	019b      	lsls	r3, r3, #6
 8003cd8:	f043 0220 	orr.w	r2, r3, #32
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <USB_FlushTxFifo+0x64>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e006      	b.n	8003d00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d0f0      	beq.n	8003ce0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	00030d40 	.word	0x00030d40

08003d10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a11      	ldr	r2, [pc, #68]	@ (8003d6c <USB_FlushRxFifo+0x5c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e018      	b.n	8003d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	daf2      	bge.n	8003d1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a08      	ldr	r2, [pc, #32]	@ (8003d6c <USB_FlushRxFifo+0x5c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e006      	b.n	8003d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d0f0      	beq.n	8003d40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	00030d40 	.word	0x00030d40

08003d70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003dbc:	f023 0303 	bic.w	r3, r3, #3
 8003dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f003 0301 	and.w	r3, r3, #1
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <USB_CoreReset+0x64>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e01b      	b.n	8003e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	daf2      	bge.n	8003e0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <USB_CoreReset+0x64>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e006      	b.n	8003e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d0f0      	beq.n	8003e36 <USB_CoreReset+0x36>

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	00030d40 	.word	0x00030d40

08003e68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e7e:	f3ef 8305 	mrs	r3, IPSR
 8003e82:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10f      	bne.n	8003eaa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8e:	607b      	str	r3, [r7, #4]
  return(result);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d105      	bne.n	8003ea2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e96:	f3ef 8311 	mrs	r3, BASEPRI
 8003e9a:	603b      	str	r3, [r7, #0]
  return(result);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <osKernelInitialize+0x3a>
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8003edc <osKernelInitialize+0x64>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d103      	bne.n	8003eb2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003eaa:	f06f 0305 	mvn.w	r3, #5
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e00c      	b.n	8003ecc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003edc <osKernelInitialize+0x64>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003eba:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <osKernelInitialize+0x64>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e002      	b.n	8003ecc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000624 	.word	0x20000624

08003ee0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee6:	f3ef 8305 	mrs	r3, IPSR
 8003eea:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef6:	607b      	str	r3, [r7, #4]
  return(result);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003efe:	f3ef 8311 	mrs	r3, BASEPRI
 8003f02:	603b      	str	r3, [r7, #0]
  return(result);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <osKernelStart+0x3a>
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f48 <osKernelStart+0x68>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d103      	bne.n	8003f1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f12:	f06f 0305 	mvn.w	r3, #5
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e010      	b.n	8003f3c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <osKernelStart+0x68>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d109      	bne.n	8003f36 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f22:	f7ff ffa1 	bl	8003e68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f26:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <osKernelStart+0x68>)
 8003f28:	2202      	movs	r2, #2
 8003f2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f2c:	f001 fb4e 	bl	80055cc <vTaskStartScheduler>
      stat = osOK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e002      	b.n	8003f3c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000624 	.word	0x20000624

08003f4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b090      	sub	sp, #64	@ 0x40
 8003f50:	af04      	add	r7, sp, #16
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f5c:	f3ef 8305 	mrs	r3, IPSR
 8003f60:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f62:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f040 808f 	bne.w	8004088 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d105      	bne.n	8003f82 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f76:	f3ef 8311 	mrs	r3, BASEPRI
 8003f7a:	617b      	str	r3, [r7, #20]
  return(result);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <osThreadNew+0x3e>
 8003f82:	4b44      	ldr	r3, [pc, #272]	@ (8004094 <osThreadNew+0x148>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d07e      	beq.n	8004088 <osThreadNew+0x13c>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d07b      	beq.n	8004088 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003f90:	2380      	movs	r3, #128	@ 0x80
 8003f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003f94:	2318      	movs	r3, #24
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d045      	beq.n	8004034 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <osThreadNew+0x6a>
        name = attr->name;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <osThreadNew+0x90>
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	2b38      	cmp	r3, #56	@ 0x38
 8003fce:	d805      	bhi.n	8003fdc <osThreadNew+0x90>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <osThreadNew+0x94>
        return (NULL);
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e054      	b.n	800408a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	089b      	lsrs	r3, r3, #2
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00e      	beq.n	8004016 <osThreadNew+0xca>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b5f      	cmp	r3, #95	@ 0x5f
 8003ffe:	d90a      	bls.n	8004016 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004004:	2b00      	cmp	r3, #0
 8004006:	d006      	beq.n	8004016 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <osThreadNew+0xca>
        mem = 1;
 8004010:	2301      	movs	r3, #1
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	e010      	b.n	8004038 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10c      	bne.n	8004038 <osThreadNew+0xec>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d108      	bne.n	8004038 <osThreadNew+0xec>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <osThreadNew+0xec>
          mem = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
 8004032:	e001      	b.n	8004038 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d110      	bne.n	8004060 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004046:	9202      	str	r2, [sp, #8]
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f001 f82d 	bl	80050b4 <xTaskCreateStatic>
 800405a:	4603      	mov	r3, r0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e013      	b.n	8004088 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d110      	bne.n	8004088 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004068:	b29a      	uxth	r2, r3
 800406a:	f107 0310 	add.w	r3, r7, #16
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f001 f881 	bl	8005180 <xTaskCreate>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d001      	beq.n	8004088 <osThreadNew+0x13c>
          hTask = NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004088:	693b      	ldr	r3, [r7, #16]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3730      	adds	r7, #48	@ 0x30
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000624 	.word	0x20000624

08004098 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a07      	ldr	r2, [pc, #28]	@ (80040c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80040a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4a06      	ldr	r2, [pc, #24]	@ (80040c8 <vApplicationGetIdleTaskMemory+0x30>)
 80040ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2280      	movs	r2, #128	@ 0x80
 80040b4:	601a      	str	r2, [r3, #0]
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000628 	.word	0x20000628
 80040c8:	20000688 	.word	0x20000688

080040cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a07      	ldr	r2, [pc, #28]	@ (80040f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80040dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4a06      	ldr	r2, [pc, #24]	@ (80040fc <vApplicationGetTimerTaskMemory+0x30>)
 80040e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040ea:	601a      	str	r2, [r3, #0]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	20000888 	.word	0x20000888
 80040fc:	200008e8 	.word	0x200008e8

08004100 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f103 0208 	add.w	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f04f 32ff 	mov.w	r2, #4294967295
 8004118:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f103 0208 	add.w	r2, r3, #8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f103 0208 	add.w	r2, r3, #8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	601a      	str	r2, [r3, #0]
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d103      	bne.n	80041c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e00c      	b.n	80041dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3308      	adds	r3, #8
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e002      	b.n	80041d0 <vListInsert+0x2e>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d2f6      	bcs.n	80041ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6892      	ldr	r2, [r2, #8]
 800422a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6852      	ldr	r2, [r2, #4]
 8004234:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d103      	bne.n	8004248 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	1e5a      	subs	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10d      	bne.n	8004298 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004280:	b672      	cpsid	i
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	b662      	cpsie	i
 8004290:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004298:	f002 fd38 	bl	8006d0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	68f9      	ldr	r1, [r7, #12]
 80042a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	441a      	add	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	3b01      	subs	r3, #1
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	441a      	add	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	22ff      	movs	r2, #255	@ 0xff
 80042dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	22ff      	movs	r2, #255	@ 0xff
 80042e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d114      	bne.n	8004318 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01a      	beq.n	800432c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3310      	adds	r3, #16
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 fc64 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d012      	beq.n	800432c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004306:	4b0d      	ldr	r3, [pc, #52]	@ (800433c <xQueueGenericReset+0xd4>)
 8004308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	e009      	b.n	800432c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3310      	adds	r3, #16
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff feef 	bl	8004100 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3324      	adds	r3, #36	@ 0x24
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff feea 	bl	8004100 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800432c:	f002 fd24 	bl	8006d78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004330:	2301      	movs	r3, #1
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08e      	sub	sp, #56	@ 0x38
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	b672      	cpsid	i
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	b662      	cpsie	i
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10d      	bne.n	8004392 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	b672      	cpsid	i
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	b662      	cpsie	i
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	e7fd      	b.n	800438e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <xQueueGenericCreateStatic+0x5e>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <xQueueGenericCreateStatic+0x62>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <xQueueGenericCreateStatic+0x64>
 80043a2:	2300      	movs	r3, #0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10d      	bne.n	80043c4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ac:	b672      	cpsid	i
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	b662      	cpsie	i
 80043bc:	623b      	str	r3, [r7, #32]
}
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	e7fd      	b.n	80043c0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <xQueueGenericCreateStatic+0x90>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <xQueueGenericCreateStatic+0x94>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <xQueueGenericCreateStatic+0x96>
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10d      	bne.n	80043f6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043de:	b672      	cpsid	i
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	b662      	cpsie	i
 80043ee:	61fb      	str	r3, [r7, #28]
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	e7fd      	b.n	80043f2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043f6:	2350      	movs	r3, #80	@ 0x50
 80043f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b50      	cmp	r3, #80	@ 0x50
 80043fe:	d00d      	beq.n	800441c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004404:	b672      	cpsid	i
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	b662      	cpsie	i
 8004414:	61bb      	str	r3, [r7, #24]
}
 8004416:	bf00      	nop
 8004418:	bf00      	nop
 800441a:	e7fd      	b.n	8004418 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800441c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004430:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f848 	bl	80044d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004446:	4618      	mov	r0, r3
 8004448:	3730      	adds	r7, #48	@ 0x30
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800444e:	b580      	push	{r7, lr}
 8004450:	b08a      	sub	sp, #40	@ 0x28
 8004452:	af02      	add	r7, sp, #8
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	4613      	mov	r3, r2
 800445a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10d      	bne.n	800447e <xQueueGenericCreate+0x30>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	b672      	cpsid	i
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	b662      	cpsie	i
 8004476:	613b      	str	r3, [r7, #16]
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	e7fd      	b.n	800447a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	e004      	b.n	8004494 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	3350      	adds	r3, #80	@ 0x50
 8004498:	4618      	mov	r0, r3
 800449a:	f002 fd65 	bl	8006f68 <pvPortMalloc>
 800449e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d011      	beq.n	80044ca <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	3350      	adds	r3, #80	@ 0x50
 80044ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044b8:	79fa      	ldrb	r2, [r7, #7]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f805 	bl	80044d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044ca:	69bb      	ldr	r3, [r7, #24]
	}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3720      	adds	r7, #32
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d103      	bne.n	80044f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004502:	2101      	movs	r1, #1
 8004504:	69b8      	ldr	r0, [r7, #24]
 8004506:	f7ff feaf 	bl	8004268 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	78fa      	ldrb	r2, [r7, #3]
 800450e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08e      	sub	sp, #56	@ 0x38
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800452a:	2300      	movs	r3, #0
 800452c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10d      	bne.n	8004554 <xQueueGenericSend+0x38>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453c:	b672      	cpsid	i
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	b662      	cpsie	i
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <xQueueGenericSend+0x46>
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <xQueueGenericSend+0x4a>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueGenericSend+0x4c>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10d      	bne.n	8004588 <xQueueGenericSend+0x6c>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004570:	b672      	cpsid	i
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	b662      	cpsie	i
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d103      	bne.n	8004596 <xQueueGenericSend+0x7a>
 800458e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <xQueueGenericSend+0x7e>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <xQueueGenericSend+0x80>
 800459a:	2300      	movs	r3, #0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10d      	bne.n	80045bc <xQueueGenericSend+0xa0>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a4:	b672      	cpsid	i
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	b662      	cpsie	i
 80045b4:	623b      	str	r3, [r7, #32]
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045bc:	f001 fd20 	bl	8006000 <xTaskGetSchedulerState>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <xQueueGenericSend+0xb0>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <xQueueGenericSend+0xb4>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <xQueueGenericSend+0xb6>
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10d      	bne.n	80045f2 <xQueueGenericSend+0xd6>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045da:	b672      	cpsid	i
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	b662      	cpsie	i
 80045ea:	61fb      	str	r3, [r7, #28]
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	e7fd      	b.n	80045ee <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045f2:	f002 fb8b 	bl	8006d0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <xQueueGenericSend+0xec>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d129      	bne.n	800465c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800460e:	f000 fbe3 	bl	8004dd8 <prvCopyDataToQueue>
 8004612:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	3324      	adds	r3, #36	@ 0x24
 8004620:	4618      	mov	r0, r3
 8004622:	f001 fad1 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800462c:	4b3f      	ldr	r3, [pc, #252]	@ (800472c <xQueueGenericSend+0x210>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	e00a      	b.n	8004654 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004644:	4b39      	ldr	r3, [pc, #228]	@ (800472c <xQueueGenericSend+0x210>)
 8004646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004654:	f002 fb90 	bl	8006d78 <vPortExitCritical>
				return pdPASS;
 8004658:	2301      	movs	r3, #1
 800465a:	e063      	b.n	8004724 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d103      	bne.n	800466a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004662:	f002 fb89 	bl	8006d78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004666:	2300      	movs	r3, #0
 8004668:	e05c      	b.n	8004724 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800466a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	4618      	mov	r0, r3
 8004676:	f001 fb1b 	bl	8005cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800467a:	2301      	movs	r3, #1
 800467c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800467e:	f002 fb7b 	bl	8006d78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004682:	f001 f81f 	bl	80056c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004686:	f002 fb41 	bl	8006d0c <vPortEnterCritical>
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004690:	b25b      	sxtb	r3, r3
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d103      	bne.n	80046a0 <xQueueGenericSend+0x184>
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d103      	bne.n	80046b6 <xQueueGenericSend+0x19a>
 80046ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046b6:	f002 fb5f 	bl	8006d78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ba:	1d3a      	adds	r2, r7, #4
 80046bc:	f107 0314 	add.w	r3, r7, #20
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 fb0a 	bl	8005cdc <xTaskCheckForTimeOut>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d124      	bne.n	8004718 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046d0:	f000 fc7a 	bl	8004fc8 <prvIsQueueFull>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d018      	beq.n	800470c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046dc:	3310      	adds	r3, #16
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f001 fa1a 	bl	8005b1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046ea:	f000 fc05 	bl	8004ef8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046ee:	f000 fff7 	bl	80056e0 <xTaskResumeAll>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f47f af7c 	bne.w	80045f2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80046fa:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <xQueueGenericSend+0x210>)
 80046fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	e772      	b.n	80045f2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800470c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800470e:	f000 fbf3 	bl	8004ef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004712:	f000 ffe5 	bl	80056e0 <xTaskResumeAll>
 8004716:	e76c      	b.n	80045f2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800471a:	f000 fbed 	bl	8004ef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800471e:	f000 ffdf 	bl	80056e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004724:	4618      	mov	r0, r3
 8004726:	3738      	adds	r7, #56	@ 0x38
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	e000ed04 	.word	0xe000ed04

08004730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08e      	sub	sp, #56	@ 0x38
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10d      	bne.n	8004764 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474c:	b672      	cpsid	i
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	b662      	cpsie	i
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	e7fd      	b.n	8004760 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <xQueueGenericSendFromISR+0x42>
 800476a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <xQueueGenericSendFromISR+0x46>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <xQueueGenericSendFromISR+0x48>
 8004776:	2300      	movs	r3, #0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10d      	bne.n	8004798 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004780:	b672      	cpsid	i
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	b662      	cpsie	i
 8004790:	623b      	str	r3, [r7, #32]
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d103      	bne.n	80047a6 <xQueueGenericSendFromISR+0x76>
 800479e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <xQueueGenericSendFromISR+0x7a>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <xQueueGenericSendFromISR+0x7c>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10d      	bne.n	80047cc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b4:	b672      	cpsid	i
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	b662      	cpsie	i
 80047c4:	61fb      	str	r3, [r7, #28]
}
 80047c6:	bf00      	nop
 80047c8:	bf00      	nop
 80047ca:	e7fd      	b.n	80047c8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047cc:	f002 fb86 	bl	8006edc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047d0:	f3ef 8211 	mrs	r2, BASEPRI
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	b672      	cpsid	i
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	b662      	cpsie	i
 80047e8:	61ba      	str	r2, [r7, #24]
 80047ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d302      	bcc.n	8004802 <xQueueGenericSendFromISR+0xd2>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d12c      	bne.n	800485c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004804:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004812:	f000 fae1 	bl	8004dd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004816:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d112      	bne.n	8004846 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d016      	beq.n	8004856 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	3324      	adds	r3, #36	@ 0x24
 800482c:	4618      	mov	r0, r3
 800482e:	f001 f9cb 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00e      	beq.n	8004856 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e007      	b.n	8004856 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004846:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800484a:	3301      	adds	r3, #1
 800484c:	b2db      	uxtb	r3, r3
 800484e:	b25a      	sxtb	r2, r3
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004856:	2301      	movs	r3, #1
 8004858:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800485a:	e001      	b.n	8004860 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800485c:	2300      	movs	r3, #0
 800485e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004862:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800486a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800486c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800486e:	4618      	mov	r0, r3
 8004870:	3738      	adds	r7, #56	@ 0x38
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b08e      	sub	sp, #56	@ 0x38
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10d      	bne.n	80048a6 <xQueueGiveFromISR+0x30>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	b672      	cpsid	i
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	b662      	cpsie	i
 800489e:	623b      	str	r3, [r7, #32]
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	e7fd      	b.n	80048a2 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <xQueueGiveFromISR+0x54>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b2:	b672      	cpsid	i
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	b662      	cpsie	i
 80048c2:	61fb      	str	r3, [r7, #28]
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	e7fd      	b.n	80048c6 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80048ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <xQueueGiveFromISR+0x64>
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <xQueueGiveFromISR+0x68>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <xQueueGiveFromISR+0x6a>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10d      	bne.n	8004900 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e8:	b672      	cpsid	i
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	b662      	cpsie	i
 80048f8:	61bb      	str	r3, [r7, #24]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004900:	f002 faec 	bl	8006edc <vPortValidateInterruptPriority>
	__asm volatile
 8004904:	f3ef 8211 	mrs	r2, BASEPRI
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	b672      	cpsid	i
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	b662      	cpsie	i
 800491c:	617a      	str	r2, [r7, #20]
 800491e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004920:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004922:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004930:	429a      	cmp	r2, r3
 8004932:	d22b      	bcs.n	800498c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800493e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004944:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004946:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d112      	bne.n	8004976 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	d016      	beq.n	8004986 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495a:	3324      	adds	r3, #36	@ 0x24
 800495c:	4618      	mov	r0, r3
 800495e:	f001 f933 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2201      	movs	r2, #1
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e007      	b.n	8004986 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800497a:	3301      	adds	r3, #1
 800497c:	b2db      	uxtb	r3, r3
 800497e:	b25a      	sxtb	r2, r3
 8004980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004986:	2301      	movs	r3, #1
 8004988:	637b      	str	r3, [r7, #52]	@ 0x34
 800498a:	e001      	b.n	8004990 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800498c:	2300      	movs	r3, #0
 800498e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004992:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f383 8811 	msr	BASEPRI, r3
}
 800499a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800499c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3738      	adds	r7, #56	@ 0x38
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08c      	sub	sp, #48	@ 0x30
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10d      	bne.n	80049de <xQueueReceive+0x36>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c6:	b672      	cpsid	i
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	b662      	cpsie	i
 80049d6:	623b      	str	r3, [r7, #32]
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <xQueueReceive+0x44>
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <xQueueReceive+0x48>
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <xQueueReceive+0x4a>
 80049f0:	2300      	movs	r3, #0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10d      	bne.n	8004a12 <xQueueReceive+0x6a>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	b672      	cpsid	i
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	b662      	cpsie	i
 8004a0a:	61fb      	str	r3, [r7, #28]
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	e7fd      	b.n	8004a0e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a12:	f001 faf5 	bl	8006000 <xTaskGetSchedulerState>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <xQueueReceive+0x7a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <xQueueReceive+0x7e>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueReceive+0x80>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10d      	bne.n	8004a48 <xQueueReceive+0xa0>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	b672      	cpsid	i
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	b662      	cpsie	i
 8004a40:	61bb      	str	r3, [r7, #24]
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	e7fd      	b.n	8004a44 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a48:	f002 f960 	bl	8006d0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01f      	beq.n	8004a98 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a5c:	f000 fa26 	bl	8004eac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	1e5a      	subs	r2, r3, #1
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00f      	beq.n	8004a90 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	3310      	adds	r3, #16
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 f8a7 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a80:	4b3c      	ldr	r3, [pc, #240]	@ (8004b74 <xQueueReceive+0x1cc>)
 8004a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a90:	f002 f972 	bl	8006d78 <vPortExitCritical>
				return pdPASS;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e069      	b.n	8004b6c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a9e:	f002 f96b 	bl	8006d78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e062      	b.n	8004b6c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aac:	f107 0310 	add.w	r3, r7, #16
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 f8fd 	bl	8005cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aba:	f002 f95d 	bl	8006d78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004abe:	f000 fe01 	bl	80056c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ac2:	f002 f923 	bl	8006d0c <vPortEnterCritical>
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004acc:	b25b      	sxtb	r3, r3
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad2:	d103      	bne.n	8004adc <xQueueReceive+0x134>
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ae2:	b25b      	sxtb	r3, r3
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d103      	bne.n	8004af2 <xQueueReceive+0x14a>
 8004aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004af2:	f002 f941 	bl	8006d78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004af6:	1d3a      	adds	r2, r7, #4
 8004af8:	f107 0310 	add.w	r3, r7, #16
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 f8ec 	bl	8005cdc <xTaskCheckForTimeOut>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d123      	bne.n	8004b52 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b0c:	f000 fa46 	bl	8004f9c <prvIsQueueEmpty>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d017      	beq.n	8004b46 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b18:	3324      	adds	r3, #36	@ 0x24
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fffc 	bl	8005b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b26:	f000 f9e7 	bl	8004ef8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b2a:	f000 fdd9 	bl	80056e0 <xTaskResumeAll>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d189      	bne.n	8004a48 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8004b34:	4b0f      	ldr	r3, [pc, #60]	@ (8004b74 <xQueueReceive+0x1cc>)
 8004b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	e780      	b.n	8004a48 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b48:	f000 f9d6 	bl	8004ef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b4c:	f000 fdc8 	bl	80056e0 <xTaskResumeAll>
 8004b50:	e77a      	b.n	8004a48 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b54:	f000 f9d0 	bl	8004ef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b58:	f000 fdc2 	bl	80056e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b5e:	f000 fa1d 	bl	8004f9c <prvIsQueueEmpty>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f43f af6f 	beq.w	8004a48 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3730      	adds	r7, #48	@ 0x30
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08e      	sub	sp, #56	@ 0x38
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b98:	b672      	cpsid	i
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	b662      	cpsie	i
 8004ba8:	623b      	str	r3, [r7, #32]
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00d      	beq.n	8004bd4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbc:	b672      	cpsid	i
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	b662      	cpsie	i
 8004bcc:	61fb      	str	r3, [r7, #28]
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bd4:	f001 fa14 	bl	8006000 <xTaskGetSchedulerState>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <xQueueSemaphoreTake+0x6c>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <xQueueSemaphoreTake+0x70>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <xQueueSemaphoreTake+0x72>
 8004be8:	2300      	movs	r3, #0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10d      	bne.n	8004c0a <xQueueSemaphoreTake+0x92>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf2:	b672      	cpsid	i
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	b662      	cpsie	i
 8004c02:	61bb      	str	r3, [r7, #24]
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	e7fd      	b.n	8004c06 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c0a:	f002 f87f 	bl	8006d0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d024      	beq.n	8004c64 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	1e5a      	subs	r2, r3, #1
 8004c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c20:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d104      	bne.n	8004c34 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004c2a:	f001 fb91 	bl	8006350 <pvTaskIncrementMutexHeldCount>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c32:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00f      	beq.n	8004c5c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3e:	3310      	adds	r3, #16
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 ffc1 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c4c:	4b55      	ldr	r3, [pc, #340]	@ (8004da4 <xQueueSemaphoreTake+0x22c>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c5c:	f002 f88c 	bl	8006d78 <vPortExitCritical>
				return pdPASS;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e09a      	b.n	8004d9a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d114      	bne.n	8004c94 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00d      	beq.n	8004c8c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	b672      	cpsid	i
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	b662      	cpsie	i
 8004c84:	617b      	str	r3, [r7, #20]
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	e7fd      	b.n	8004c88 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004c8c:	f002 f874 	bl	8006d78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e082      	b.n	8004d9a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c9a:	f107 030c 	add.w	r3, r7, #12
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 f806 	bl	8005cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ca8:	f002 f866 	bl	8006d78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cac:	f000 fd0a 	bl	80056c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cb0:	f002 f82c 	bl	8006d0c <vPortEnterCritical>
 8004cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cba:	b25b      	sxtb	r3, r3
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d103      	bne.n	8004cca <xQueueSemaphoreTake+0x152>
 8004cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d103      	bne.n	8004ce0 <xQueueSemaphoreTake+0x168>
 8004cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ce0:	f002 f84a 	bl	8006d78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ce4:	463a      	mov	r2, r7
 8004ce6:	f107 030c 	add.w	r3, r7, #12
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fff5 	bl	8005cdc <xTaskCheckForTimeOut>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d132      	bne.n	8004d5e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cfa:	f000 f94f 	bl	8004f9c <prvIsQueueEmpty>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d026      	beq.n	8004d52 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8004d0c:	f001 fffe 	bl	8006d0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 f991 	bl	800603c <xTaskPriorityInherit>
 8004d1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004d1c:	f002 f82c 	bl	8006d78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d22:	3324      	adds	r3, #36	@ 0x24
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fef7 	bl	8005b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d30:	f000 f8e2 	bl	8004ef8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d34:	f000 fcd4 	bl	80056e0 <xTaskResumeAll>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f47f af65 	bne.w	8004c0a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8004d40:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <xQueueSemaphoreTake+0x22c>)
 8004d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	e75b      	b.n	8004c0a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004d52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d54:	f000 f8d0 	bl	8004ef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d58:	f000 fcc2 	bl	80056e0 <xTaskResumeAll>
 8004d5c:	e755      	b.n	8004c0a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004d5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d60:	f000 f8ca 	bl	8004ef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d64:	f000 fcbc 	bl	80056e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d6a:	f000 f917 	bl	8004f9c <prvIsQueueEmpty>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f43f af4a 	beq.w	8004c0a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8004d7c:	f001 ffc6 	bl	8006d0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d82:	f000 f811 	bl	8004da8 <prvGetDisinheritPriorityAfterTimeout>
 8004d86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 fa4a 	bl	8006228 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004d94:	f001 fff0 	bl	8006d78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3738      	adds	r7, #56	@ 0x38
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	e000ed04 	.word	0xe000ed04

08004da8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d006      	beq.n	8004dc6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e001      	b.n	8004dca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004dca:	68fb      	ldr	r3, [r7, #12]
	}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10d      	bne.n	8004e12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d14d      	bne.n	8004e9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 f990 	bl	8006128 <xTaskPriorityDisinherit>
 8004e08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	e043      	b.n	8004e9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d119      	bne.n	8004e4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6858      	ldr	r0, [r3, #4]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	461a      	mov	r2, r3
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	f002 fb3a 	bl	800749c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e30:	441a      	add	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d32b      	bcc.n	8004e9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	e026      	b.n	8004e9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68d8      	ldr	r0, [r3, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	461a      	mov	r2, r3
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	f002 fb20 	bl	800749c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	425b      	negs	r3, r3
 8004e66:	441a      	add	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d207      	bcs.n	8004e88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	425b      	negs	r3, r3
 8004e82:	441a      	add	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d105      	bne.n	8004e9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ea2:	697b      	ldr	r3, [r7, #20]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d018      	beq.n	8004ef0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	441a      	add	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d303      	bcc.n	8004ee0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68d9      	ldr	r1, [r3, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6838      	ldr	r0, [r7, #0]
 8004eec:	f002 fad6 	bl	800749c <memcpy>
	}
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f00:	f001 ff04 	bl	8006d0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f0c:	e011      	b.n	8004f32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d012      	beq.n	8004f3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3324      	adds	r3, #36	@ 0x24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fe54 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f26:	f000 ff41 	bl	8005dac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	dce9      	bgt.n	8004f0e <prvUnlockQueue+0x16>
 8004f3a:	e000      	b.n	8004f3e <prvUnlockQueue+0x46>
					break;
 8004f3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	22ff      	movs	r2, #255	@ 0xff
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f46:	f001 ff17 	bl	8006d78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f4a:	f001 fedf 	bl	8006d0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f56:	e011      	b.n	8004f7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d012      	beq.n	8004f86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3310      	adds	r3, #16
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fe2f 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f70:	f000 ff1c 	bl	8005dac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	dce9      	bgt.n	8004f58 <prvUnlockQueue+0x60>
 8004f84:	e000      	b.n	8004f88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	22ff      	movs	r2, #255	@ 0xff
 8004f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f90:	f001 fef2 	bl	8006d78 <vPortExitCritical>
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fa4:	f001 feb2 	bl	8006d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e001      	b.n	8004fba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fba:	f001 fedd 	bl	8006d78 <vPortExitCritical>

	return xReturn;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fd0:	f001 fe9c 	bl	8006d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d102      	bne.n	8004fe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e001      	b.n	8004fea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fea:	f001 fec5 	bl	8006d78 <vPortExitCritical>

	return xReturn;
 8004fee:	68fb      	ldr	r3, [r7, #12]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e014      	b.n	8005032 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005008:	4a0f      	ldr	r2, [pc, #60]	@ (8005048 <vQueueAddToRegistry+0x50>)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005014:	490c      	ldr	r1, [pc, #48]	@ (8005048 <vQueueAddToRegistry+0x50>)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800501e:	4a0a      	ldr	r2, [pc, #40]	@ (8005048 <vQueueAddToRegistry+0x50>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800502a:	e006      	b.n	800503a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b07      	cmp	r3, #7
 8005036:	d9e7      	bls.n	8005008 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000ce8 	.word	0x20000ce8

0800504c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800505c:	f001 fe56 	bl	8006d0c <vPortEnterCritical>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005066:	b25b      	sxtb	r3, r3
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d103      	bne.n	8005076 <vQueueWaitForMessageRestricted+0x2a>
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800507c:	b25b      	sxtb	r3, r3
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d103      	bne.n	800508c <vQueueWaitForMessageRestricted+0x40>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800508c:	f001 fe74 	bl	8006d78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	3324      	adds	r3, #36	@ 0x24
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fd63 	bl	8005b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050a6:	6978      	ldr	r0, [r7, #20]
 80050a8:	f7ff ff26 	bl	8004ef8 <prvUnlockQueue>
	}
 80050ac:	bf00      	nop
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08e      	sub	sp, #56	@ 0x38
 80050b8:	af04      	add	r7, sp, #16
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10d      	bne.n	80050e4 <xTaskCreateStatic+0x30>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	b672      	cpsid	i
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	b662      	cpsie	i
 80050dc:	623b      	str	r3, [r7, #32]
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80050e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10d      	bne.n	8005106 <xTaskCreateStatic+0x52>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ee:	b672      	cpsid	i
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	b662      	cpsie	i
 80050fe:	61fb      	str	r3, [r7, #28]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005106:	2360      	movs	r3, #96	@ 0x60
 8005108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b60      	cmp	r3, #96	@ 0x60
 800510e:	d00d      	beq.n	800512c <xTaskCreateStatic+0x78>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005114:	b672      	cpsid	i
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	b662      	cpsie	i
 8005124:	61bb      	str	r3, [r7, #24]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800512c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800512e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01e      	beq.n	8005172 <xTaskCreateStatic+0xbe>
 8005134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01b      	beq.n	8005172 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005142:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	2202      	movs	r2, #2
 8005148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800514c:	2300      	movs	r3, #0
 800514e:	9303      	str	r3, [sp, #12]
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	9302      	str	r3, [sp, #8]
 8005154:	f107 0314 	add.w	r3, r7, #20
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f850 	bl	800520a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800516a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800516c:	f000 f8f0 	bl	8005350 <prvAddNewTaskToReadyList>
 8005170:	e001      	b.n	8005176 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005176:	697b      	ldr	r3, [r7, #20]
	}
 8005178:	4618      	mov	r0, r3
 800517a:	3728      	adds	r7, #40	@ 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08c      	sub	sp, #48	@ 0x30
 8005184:	af04      	add	r7, sp, #16
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4618      	mov	r0, r3
 8005196:	f001 fee7 	bl	8006f68 <pvPortMalloc>
 800519a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00e      	beq.n	80051c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051a2:	2060      	movs	r0, #96	@ 0x60
 80051a4:	f001 fee0 	bl	8006f68 <pvPortMalloc>
 80051a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80051b6:	e005      	b.n	80051c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051b8:	6978      	ldr	r0, [r7, #20]
 80051ba:	f001 fee7 	bl	8006f8c <vPortFree>
 80051be:	e001      	b.n	80051c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d017      	beq.n	80051fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	2300      	movs	r3, #0
 80051d6:	9303      	str	r3, [sp, #12]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f80e 	bl	800520a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ee:	69f8      	ldr	r0, [r7, #28]
 80051f0:	f000 f8ae 	bl	8005350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051f4:	2301      	movs	r3, #1
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	e002      	b.n	8005200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051fa:	f04f 33ff 	mov.w	r3, #4294967295
 80051fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005200:	69bb      	ldr	r3, [r7, #24]
	}
 8005202:	4618      	mov	r0, r3
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	461a      	mov	r2, r3
 8005222:	21a5      	movs	r1, #165	@ 0xa5
 8005224:	f002 f8f6 	bl	8007414 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005232:	440b      	add	r3, r1
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f023 0307 	bic.w	r3, r3, #7
 8005240:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00d      	beq.n	8005268 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005250:	b672      	cpsid	i
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	b662      	cpsie	i
 8005260:	617b      	str	r3, [r7, #20]
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01f      	beq.n	80052ae <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	e012      	b.n	800529a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	7819      	ldrb	r1, [r3, #0]
 800527c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	3334      	adds	r3, #52	@ 0x34
 8005284:	460a      	mov	r2, r1
 8005286:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d006      	beq.n	80052a2 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	3301      	adds	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	2b0f      	cmp	r3, #15
 800529e:	d9e9      	bls.n	8005274 <prvInitialiseNewTask+0x6a>
 80052a0:	e000      	b.n	80052a4 <prvInitialiseNewTask+0x9a>
			{
				break;
 80052a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052ac:	e003      	b.n	80052b6 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b8:	2b37      	cmp	r3, #55	@ 0x37
 80052ba:	d901      	bls.n	80052c0 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052bc:	2337      	movs	r3, #55	@ 0x37
 80052be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	2200      	movs	r2, #0
 80052d0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	3304      	adds	r3, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fe ff32 	bl	8004140 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052de:	3318      	adds	r3, #24
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe ff2d 	bl	8004140 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 80052fc:	2300      	movs	r3, #0
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	e009      	b.n	8005316 <prvInitialiseNewTask+0x10c>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8005302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	3314      	adds	r3, #20
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	2200      	movs	r2, #0
 800530e:	605a      	str	r2, [r3, #4]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	3301      	adds	r3, #1
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f2      	beq.n	8005302 <prvInitialiseNewTask+0xf8>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	2200      	movs	r2, #0
 8005320:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	2200      	movs	r2, #0
 8005326:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	69b8      	ldr	r0, [r7, #24]
 8005330:	f001 fbde 	bl	8006af0 <pxPortInitialiseStack>
 8005334:	4602      	mov	r2, r0
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800533a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005346:	bf00      	nop
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005358:	f001 fcd8 	bl	8006d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800535c:	4b38      	ldr	r3, [pc, #224]	@ (8005440 <prvAddNewTaskToReadyList+0xf0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	4a37      	ldr	r2, [pc, #220]	@ (8005440 <prvAddNewTaskToReadyList+0xf0>)
 8005364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005366:	4b37      	ldr	r3, [pc, #220]	@ (8005444 <prvAddNewTaskToReadyList+0xf4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800536e:	4a35      	ldr	r2, [pc, #212]	@ (8005444 <prvAddNewTaskToReadyList+0xf4>)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005374:	4b32      	ldr	r3, [pc, #200]	@ (8005440 <prvAddNewTaskToReadyList+0xf0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d110      	bne.n	800539e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800537c:	f000 fd80 	bl	8005e80 <prvInitialiseTaskLists>
 8005380:	e00d      	b.n	800539e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005382:	4b31      	ldr	r3, [pc, #196]	@ (8005448 <prvAddNewTaskToReadyList+0xf8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d109      	bne.n	800539e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800538a:	4b2e      	ldr	r3, [pc, #184]	@ (8005444 <prvAddNewTaskToReadyList+0xf4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	429a      	cmp	r2, r3
 8005396:	d802      	bhi.n	800539e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005398:	4a2a      	ldr	r2, [pc, #168]	@ (8005444 <prvAddNewTaskToReadyList+0xf4>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800539e:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <prvAddNewTaskToReadyList+0xfc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	4a29      	ldr	r2, [pc, #164]	@ (800544c <prvAddNewTaskToReadyList+0xfc>)
 80053a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053a8:	4b28      	ldr	r3, [pc, #160]	@ (800544c <prvAddNewTaskToReadyList+0xfc>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fd3e 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 80053b8:	4603      	mov	r3, r0
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	2103      	movs	r1, #3
 80053c0:	4823      	ldr	r0, [pc, #140]	@ (8005450 <prvAddNewTaskToReadyList+0x100>)
 80053c2:	f001 fee3 	bl	800718c <log_trace_function>

		prvAddTaskToReadyList( pxNewTCB );
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ca:	4b22      	ldr	r3, [pc, #136]	@ (8005454 <prvAddNewTaskToReadyList+0x104>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d903      	bls.n	80053da <prvAddNewTaskToReadyList+0x8a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005454 <prvAddNewTaskToReadyList+0x104>)
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005458 <prvAddNewTaskToReadyList+0x108>)
 80053e8:	441a      	add	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f7fe feb2 	bl	800415a <vListInsertEnd>
 80053f6:	2100      	movs	r1, #0
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fd1b 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 80053fe:	4603      	mov	r3, r0
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	2107      	movs	r1, #7
 8005406:	4815      	ldr	r0, [pc, #84]	@ (800545c <prvAddNewTaskToReadyList+0x10c>)
 8005408:	f001 fec0 	bl	800718c <log_trace_function>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800540c:	f001 fcb4 	bl	8006d78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005410:	4b0d      	ldr	r3, [pc, #52]	@ (8005448 <prvAddNewTaskToReadyList+0xf8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00e      	beq.n	8005436 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005418:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <prvAddNewTaskToReadyList+0xf4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005422:	429a      	cmp	r2, r3
 8005424:	d207      	bcs.n	8005436 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005426:	4b0e      	ldr	r3, [pc, #56]	@ (8005460 <prvAddNewTaskToReadyList+0x110>)
 8005428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005436:	bf00      	nop
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	200011fc 	.word	0x200011fc
 8005444:	20000d28 	.word	0x20000d28
 8005448:	20001208 	.word	0x20001208
 800544c:	20001218 	.word	0x20001218
 8005450:	08007570 	.word	0x08007570
 8005454:	20001204 	.word	0x20001204
 8005458:	20000d2c 	.word	0x20000d2c
 800545c:	08007578 	.word	0x08007578
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800546c:	f001 fc4e 	bl	8006d0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <vTaskDelete+0x18>
 8005476:	4b2e      	ldr	r3, [pc, #184]	@ (8005530 <vTaskDelete+0xcc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	e000      	b.n	800547e <vTaskDelete+0x1a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3304      	adds	r3, #4
 8005484:	4618      	mov	r0, r3
 8005486:	f7fe fec5 	bl	8004214 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d004      	beq.n	800549c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3318      	adds	r3, #24
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe febc 	bl	8004214 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <vTaskDelete+0xd0>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	4a24      	ldr	r2, [pc, #144]	@ (8005534 <vTaskDelete+0xd0>)
 80054a4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80054a6:	4b22      	ldr	r3, [pc, #136]	@ (8005530 <vTaskDelete+0xcc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d10b      	bne.n	80054c8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4820      	ldr	r0, [pc, #128]	@ (8005538 <vTaskDelete+0xd4>)
 80054b8:	f7fe fe4f 	bl	800415a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80054bc:	4b1f      	ldr	r3, [pc, #124]	@ (800553c <vTaskDelete+0xd8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	4a1e      	ldr	r2, [pc, #120]	@ (800553c <vTaskDelete+0xd8>)
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	e009      	b.n	80054dc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80054c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005540 <vTaskDelete+0xdc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005540 <vTaskDelete+0xdc>)
 80054d0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fd42 	bl	8005f5c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80054d8:	f000 fd72 	bl	8005fc0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80054dc:	f001 fc4c 	bl	8006d78 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80054e0:	4b18      	ldr	r3, [pc, #96]	@ (8005544 <vTaskDelete+0xe0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01e      	beq.n	8005526 <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 80054e8:	4b11      	ldr	r3, [pc, #68]	@ (8005530 <vTaskDelete+0xcc>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d119      	bne.n	8005526 <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80054f2:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <vTaskDelete+0xe4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <vTaskDelete+0xb2>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fe:	b672      	cpsid	i
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	b662      	cpsie	i
 800550e:	60bb      	str	r3, [r7, #8]
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	e7fd      	b.n	8005512 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8005516:	4b0d      	ldr	r3, [pc, #52]	@ (800554c <vTaskDelete+0xe8>)
 8005518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000d28 	.word	0x20000d28
 8005534:	20001218 	.word	0x20001218
 8005538:	200011d0 	.word	0x200011d0
 800553c:	200011e4 	.word	0x200011e4
 8005540:	200011fc 	.word	0x200011fc
 8005544:	20001208 	.word	0x20001208
 8005548:	20001224 	.word	0x20001224
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01f      	beq.n	80055a2 <vTaskDelay+0x52>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005562:	4b17      	ldr	r3, [pc, #92]	@ (80055c0 <vTaskDelay+0x70>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <vTaskDelay+0x36>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	b672      	cpsid	i
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	b662      	cpsie	i
 800557e:	60bb      	str	r3, [r7, #8]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005586:	f000 f89d 	bl	80056c4 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800558a:	2200      	movs	r2, #0
 800558c:	2106      	movs	r1, #6
 800558e:	480d      	ldr	r0, [pc, #52]	@ (80055c4 <vTaskDelay+0x74>)
 8005590:	f001 fdfc 	bl	800718c <log_trace_function>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005594:	2100      	movs	r1, #0
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 feee 	bl	8006378 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800559c:	f000 f8a0 	bl	80056e0 <xTaskResumeAll>
 80055a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d107      	bne.n	80055b8 <vTaskDelay+0x68>
		{
			portYIELD_WITHIN_API();
 80055a8:	4b07      	ldr	r3, [pc, #28]	@ (80055c8 <vTaskDelay+0x78>)
 80055aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055b8:	bf00      	nop
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20001224 	.word	0x20001224
 80055c4:	08007584 	.word	0x08007584
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	@ 0x28
 80055d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055da:	463a      	mov	r2, r7
 80055dc:	1d39      	adds	r1, r7, #4
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fd58 	bl	8004098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	9202      	str	r2, [sp, #8]
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	460a      	mov	r2, r1
 80055fa:	492a      	ldr	r1, [pc, #168]	@ (80056a4 <vTaskStartScheduler+0xd8>)
 80055fc:	482a      	ldr	r0, [pc, #168]	@ (80056a8 <vTaskStartScheduler+0xdc>)
 80055fe:	f7ff fd59 	bl	80050b4 <xTaskCreateStatic>
 8005602:	4603      	mov	r3, r0
 8005604:	4a29      	ldr	r2, [pc, #164]	@ (80056ac <vTaskStartScheduler+0xe0>)
 8005606:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005608:	4b28      	ldr	r3, [pc, #160]	@ (80056ac <vTaskStartScheduler+0xe0>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005610:	2301      	movs	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e001      	b.n	800561a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d102      	bne.n	8005626 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005620:	f000 fefe 	bl	8006420 <xTimerCreateTimerTask>
 8005624:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d125      	bne.n	8005678 <vTaskStartScheduler+0xac>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005630:	b672      	cpsid	i
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	b662      	cpsie	i
 8005640:	613b      	str	r3, [r7, #16]
}
 8005642:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005644:	4b1a      	ldr	r3, [pc, #104]	@ (80056b0 <vTaskStartScheduler+0xe4>)
 8005646:	f04f 32ff 	mov.w	r2, #4294967295
 800564a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800564c:	4b19      	ldr	r3, [pc, #100]	@ (80056b4 <vTaskStartScheduler+0xe8>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005652:	4b19      	ldr	r3, [pc, #100]	@ (80056b8 <vTaskStartScheduler+0xec>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8005658:	4b18      	ldr	r3, [pc, #96]	@ (80056bc <vTaskStartScheduler+0xf0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fbe8 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 8005664:	4603      	mov	r3, r0
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	2104      	movs	r1, #4
 800566c:	4814      	ldr	r0, [pc, #80]	@ (80056c0 <vTaskStartScheduler+0xf4>)
 800566e:	f001 fd8d 	bl	800718c <log_trace_function>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005672:	f001 facd 	bl	8006c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005676:	e011      	b.n	800569c <vTaskStartScheduler+0xd0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d10d      	bne.n	800569c <vTaskStartScheduler+0xd0>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	b672      	cpsid	i
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	b662      	cpsie	i
 8005694:	60fb      	str	r3, [r7, #12]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <vTaskStartScheduler+0xcc>
}
 800569c:	bf00      	nop
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	0800758c 	.word	0x0800758c
 80056a8:	08005dc5 	.word	0x08005dc5
 80056ac:	20001220 	.word	0x20001220
 80056b0:	2000121c 	.word	0x2000121c
 80056b4:	20001208 	.word	0x20001208
 80056b8:	20001200 	.word	0x20001200
 80056bc:	20000d28 	.word	0x20000d28
 80056c0:	08007594 	.word	0x08007594

080056c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80056c8:	4b04      	ldr	r3, [pc, #16]	@ (80056dc <vTaskSuspendAll+0x18>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a03      	ldr	r2, [pc, #12]	@ (80056dc <vTaskSuspendAll+0x18>)
 80056d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80056d2:	bf00      	nop
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	20001224 	.word	0x20001224

080056e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056ee:	4b49      	ldr	r3, [pc, #292]	@ (8005814 <xTaskResumeAll+0x134>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10d      	bne.n	8005712 <xTaskResumeAll+0x32>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fa:	b672      	cpsid	i
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	b662      	cpsie	i
 800570a:	603b      	str	r3, [r7, #0]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005712:	f001 fafb 	bl	8006d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005716:	4b3f      	ldr	r3, [pc, #252]	@ (8005814 <xTaskResumeAll+0x134>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3b01      	subs	r3, #1
 800571c:	4a3d      	ldr	r2, [pc, #244]	@ (8005814 <xTaskResumeAll+0x134>)
 800571e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005720:	4b3c      	ldr	r3, [pc, #240]	@ (8005814 <xTaskResumeAll+0x134>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d16d      	bne.n	8005804 <xTaskResumeAll+0x124>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005728:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <xTaskResumeAll+0x138>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d069      	beq.n	8005804 <xTaskResumeAll+0x124>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005730:	e03a      	b.n	80057a8 <xTaskResumeAll+0xc8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005732:	4b3a      	ldr	r3, [pc, #232]	@ (800581c <xTaskResumeAll+0x13c>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3318      	adds	r3, #24
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fd68 	bl	8004214 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3304      	adds	r3, #4
 8005748:	4618      	mov	r0, r3
 800574a:	f7fe fd63 	bl	8004214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005752:	4b33      	ldr	r3, [pc, #204]	@ (8005820 <xTaskResumeAll+0x140>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d903      	bls.n	8005762 <xTaskResumeAll+0x82>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	4a30      	ldr	r2, [pc, #192]	@ (8005820 <xTaskResumeAll+0x140>)
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4a2d      	ldr	r2, [pc, #180]	@ (8005824 <xTaskResumeAll+0x144>)
 8005770:	441a      	add	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f7fe fcee 	bl	800415a <vListInsertEnd>
 800577e:	2100      	movs	r1, #0
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fb57 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 8005786:	4603      	mov	r3, r0
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	2107      	movs	r1, #7
 800578e:	4826      	ldr	r0, [pc, #152]	@ (8005828 <xTaskResumeAll+0x148>)
 8005790:	f001 fcfc 	bl	800718c <log_trace_function>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005798:	4b24      	ldr	r3, [pc, #144]	@ (800582c <xTaskResumeAll+0x14c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579e:	429a      	cmp	r2, r3
 80057a0:	d302      	bcc.n	80057a8 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
 80057a2:	4b23      	ldr	r3, [pc, #140]	@ (8005830 <xTaskResumeAll+0x150>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057a8:	4b1c      	ldr	r3, [pc, #112]	@ (800581c <xTaskResumeAll+0x13c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1c0      	bne.n	8005732 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057b6:	f000 fc03 	bl	8005fc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80057ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005834 <xTaskResumeAll+0x154>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d010      	beq.n	80057e8 <xTaskResumeAll+0x108>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057c6:	f000 f85b 	bl	8005880 <xTaskIncrementTick>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <xTaskResumeAll+0xf6>
							{
								xYieldPending = pdTRUE;
 80057d0:	4b17      	ldr	r3, [pc, #92]	@ (8005830 <xTaskResumeAll+0x150>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3b01      	subs	r3, #1
 80057da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f1      	bne.n	80057c6 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
 80057e2:	4b14      	ldr	r3, [pc, #80]	@ (8005834 <xTaskResumeAll+0x154>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057e8:	4b11      	ldr	r3, [pc, #68]	@ (8005830 <xTaskResumeAll+0x150>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <xTaskResumeAll+0x124>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057f0:	2301      	movs	r3, #1
 80057f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057f4:	4b10      	ldr	r3, [pc, #64]	@ (8005838 <xTaskResumeAll+0x158>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005804:	f001 fab8 	bl	8006d78 <vPortExitCritical>

	return xAlreadyYielded;
 8005808:	68bb      	ldr	r3, [r7, #8]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20001224 	.word	0x20001224
 8005818:	200011fc 	.word	0x200011fc
 800581c:	200011bc 	.word	0x200011bc
 8005820:	20001204 	.word	0x20001204
 8005824:	20000d2c 	.word	0x20000d2c
 8005828:	08007578 	.word	0x08007578
 800582c:	20000d28 	.word	0x20000d28
 8005830:	20001210 	.word	0x20001210
 8005834:	2000120c 	.word	0x2000120c
 8005838:	e000ed04 	.word	0xe000ed04

0800583c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005842:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <xTaskGetTickCount+0x1c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005848:	687b      	ldr	r3, [r7, #4]
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20001200 	.word	0x20001200

0800585c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005862:	f001 fb3b 	bl	8006edc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005866:	2300      	movs	r3, #0
 8005868:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800586a:	4b04      	ldr	r3, [pc, #16]	@ (800587c <xTaskGetTickCountFromISR+0x20>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005870:	683b      	ldr	r3, [r7, #0]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20001200 	.word	0x20001200

08005880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800588a:	4b5a      	ldr	r3, [pc, #360]	@ (80059f4 <xTaskIncrementTick+0x174>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f040 809d 	bne.w	80059ce <xTaskIncrementTick+0x14e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005894:	4b58      	ldr	r3, [pc, #352]	@ (80059f8 <xTaskIncrementTick+0x178>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3301      	adds	r3, #1
 800589a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800589c:	4a56      	ldr	r2, [pc, #344]	@ (80059f8 <xTaskIncrementTick+0x178>)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d123      	bne.n	80058f0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80058a8:	4b54      	ldr	r3, [pc, #336]	@ (80059fc <xTaskIncrementTick+0x17c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00d      	beq.n	80058ce <xTaskIncrementTick+0x4e>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b6:	b672      	cpsid	i
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	b662      	cpsie	i
 80058c6:	603b      	str	r3, [r7, #0]
}
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	e7fd      	b.n	80058ca <xTaskIncrementTick+0x4a>
 80058ce:	4b4b      	ldr	r3, [pc, #300]	@ (80059fc <xTaskIncrementTick+0x17c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005a00 <xTaskIncrementTick+0x180>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a48      	ldr	r2, [pc, #288]	@ (80059fc <xTaskIncrementTick+0x17c>)
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4a48      	ldr	r2, [pc, #288]	@ (8005a00 <xTaskIncrementTick+0x180>)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4b48      	ldr	r3, [pc, #288]	@ (8005a04 <xTaskIncrementTick+0x184>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3301      	adds	r3, #1
 80058e8:	4a46      	ldr	r2, [pc, #280]	@ (8005a04 <xTaskIncrementTick+0x184>)
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	f000 fb68 	bl	8005fc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058f0:	4b45      	ldr	r3, [pc, #276]	@ (8005a08 <xTaskIncrementTick+0x188>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d354      	bcc.n	80059a4 <xTaskIncrementTick+0x124>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058fa:	4b40      	ldr	r3, [pc, #256]	@ (80059fc <xTaskIncrementTick+0x17c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005904:	4b40      	ldr	r3, [pc, #256]	@ (8005a08 <xTaskIncrementTick+0x188>)
 8005906:	f04f 32ff 	mov.w	r2, #4294967295
 800590a:	601a      	str	r2, [r3, #0]
					break;
 800590c:	e04a      	b.n	80059a4 <xTaskIncrementTick+0x124>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800590e:	4b3b      	ldr	r3, [pc, #236]	@ (80059fc <xTaskIncrementTick+0x17c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	d203      	bcs.n	800592e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005926:	4a38      	ldr	r2, [pc, #224]	@ (8005a08 <xTaskIncrementTick+0x188>)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800592c:	e03a      	b.n	80059a4 <xTaskIncrementTick+0x124>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	3304      	adds	r3, #4
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe fc6e 	bl	8004214 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	3318      	adds	r3, #24
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fc65 	bl	8004214 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800594e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a0c <xTaskIncrementTick+0x18c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d903      	bls.n	800595e <xTaskIncrementTick+0xde>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a0c <xTaskIncrementTick+0x18c>)
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4a29      	ldr	r2, [pc, #164]	@ (8005a10 <xTaskIncrementTick+0x190>)
 800596c:	441a      	add	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	3304      	adds	r3, #4
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f7fe fbf0 	bl	800415a <vListInsertEnd>
 800597a:	2100      	movs	r1, #0
 800597c:	68b8      	ldr	r0, [r7, #8]
 800597e:	f000 fa59 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 8005982:	4603      	mov	r3, r0
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	2107      	movs	r1, #7
 800598a:	4822      	ldr	r0, [pc, #136]	@ (8005a14 <xTaskIncrementTick+0x194>)
 800598c:	f001 fbfe 	bl	800718c <log_trace_function>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005994:	4b20      	ldr	r3, [pc, #128]	@ (8005a18 <xTaskIncrementTick+0x198>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	429a      	cmp	r2, r3
 800599c:	d3ad      	bcc.n	80058fa <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800599e:	2301      	movs	r3, #1
 80059a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059a2:	e7aa      	b.n	80058fa <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a18 <xTaskIncrementTick+0x198>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059aa:	4919      	ldr	r1, [pc, #100]	@ (8005a10 <xTaskIncrementTick+0x190>)
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d901      	bls.n	80059c0 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80059c0:	4b16      	ldr	r3, [pc, #88]	@ (8005a1c <xTaskIncrementTick+0x19c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <xTaskIncrementTick+0x15c>
			{
				vApplicationTickHook();
 80059c8:	f001 fc58 	bl	800727c <vApplicationTickHook>
 80059cc:	e006      	b.n	80059dc <xTaskIncrementTick+0x15c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059ce:	4b13      	ldr	r3, [pc, #76]	@ (8005a1c <xTaskIncrementTick+0x19c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3301      	adds	r3, #1
 80059d4:	4a11      	ldr	r2, [pc, #68]	@ (8005a1c <xTaskIncrementTick+0x19c>)
 80059d6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80059d8:	f001 fc50 	bl	800727c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80059dc:	4b10      	ldr	r3, [pc, #64]	@ (8005a20 <xTaskIncrementTick+0x1a0>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <xTaskIncrementTick+0x168>
		{
			xSwitchRequired = pdTRUE;
 80059e4:	2301      	movs	r3, #1
 80059e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80059e8:	697b      	ldr	r3, [r7, #20]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20001224 	.word	0x20001224
 80059f8:	20001200 	.word	0x20001200
 80059fc:	200011b4 	.word	0x200011b4
 8005a00:	200011b8 	.word	0x200011b8
 8005a04:	20001214 	.word	0x20001214
 8005a08:	2000121c 	.word	0x2000121c
 8005a0c:	20001204 	.word	0x20001204
 8005a10:	20000d2c 	.word	0x20000d2c
 8005a14:	08007578 	.word	0x08007578
 8005a18:	20000d28 	.word	0x20000d28
 8005a1c:	2000120c 	.word	0x2000120c
 8005a20:	20001210 	.word	0x20001210

08005a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a2a:	4b35      	ldr	r3, [pc, #212]	@ (8005b00 <vTaskSwitchContext+0xdc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a32:	4b34      	ldr	r3, [pc, #208]	@ (8005b04 <vTaskSwitchContext+0xe0>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a38:	e05e      	b.n	8005af8 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8005a3a:	4b32      	ldr	r3, [pc, #200]	@ (8005b04 <vTaskSwitchContext+0xe0>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8005a40:	4b31      	ldr	r3, [pc, #196]	@ (8005b08 <vTaskSwitchContext+0xe4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f9f4 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	2105      	movs	r1, #5
 8005a54:	482d      	ldr	r0, [pc, #180]	@ (8005b0c <vTaskSwitchContext+0xe8>)
 8005a56:	f001 fb99 	bl	800718c <log_trace_function>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8005b10 <vTaskSwitchContext+0xec>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	e013      	b.n	8005a8a <vTaskSwitchContext+0x66>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10d      	bne.n	8005a84 <vTaskSwitchContext+0x60>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6c:	b672      	cpsid	i
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	b662      	cpsie	i
 8005a7c:	607b      	str	r3, [r7, #4]
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <vTaskSwitchContext+0x5c>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	4922      	ldr	r1, [pc, #136]	@ (8005b14 <vTaskSwitchContext+0xf0>)
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0e1      	beq.n	8005a62 <vTaskSwitchContext+0x3e>
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b14 <vTaskSwitchContext+0xf0>)
 8005aaa:	4413      	add	r3, r2
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d104      	bne.n	8005ace <vTaskSwitchContext+0xaa>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	605a      	str	r2, [r3, #4]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8005b08 <vTaskSwitchContext+0xe4>)
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8005b10 <vTaskSwitchContext+0xec>)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8005ade:	4b0a      	ldr	r3, [pc, #40]	@ (8005b08 <vTaskSwitchContext+0xe4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f9a5 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 8005aea:	4603      	mov	r3, r0
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	2104      	movs	r1, #4
 8005af2:	4809      	ldr	r0, [pc, #36]	@ (8005b18 <vTaskSwitchContext+0xf4>)
 8005af4:	f001 fb4a 	bl	800718c <log_trace_function>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20001224 	.word	0x20001224
 8005b04:	20001210 	.word	0x20001210
 8005b08:	20000d28 	.word	0x20000d28
 8005b0c:	080075a0 	.word	0x080075a0
 8005b10:	20001204 	.word	0x20001204
 8005b14:	20000d2c 	.word	0x20000d2c
 8005b18:	08007594 	.word	0x08007594

08005b1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10d      	bne.n	8005b48 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b30:	b672      	cpsid	i
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	b662      	cpsie	i
 8005b40:	60fb      	str	r3, [r7, #12]
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	e7fd      	b.n	8005b44 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b48:	4b07      	ldr	r3, [pc, #28]	@ (8005b68 <vTaskPlaceOnEventList+0x4c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3318      	adds	r3, #24
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7fe fb26 	bl	80041a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b56:	2101      	movs	r1, #1
 8005b58:	6838      	ldr	r0, [r7, #0]
 8005b5a:	f000 fc0d 	bl	8006378 <prvAddCurrentTaskToDelayedList>
}
 8005b5e:	bf00      	nop
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000d28 	.word	0x20000d28

08005b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10d      	bne.n	8005b9a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	b672      	cpsid	i
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	b662      	cpsie	i
 8005b92:	617b      	str	r3, [r7, #20]
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <vTaskPlaceOnEventListRestricted+0x58>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3318      	adds	r3, #24
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7fe fad9 	bl	800415a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8005bae:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	68b8      	ldr	r0, [r7, #8]
 8005bb8:	f000 fbde 	bl	8006378 <prvAddCurrentTaskToDelayedList>
	}
 8005bbc:	bf00      	nop
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000d28 	.word	0x20000d28

08005bc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10d      	bne.n	8005bfa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be2:	b672      	cpsid	i
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	b662      	cpsie	i
 8005bf2:	60fb      	str	r3, [r7, #12]
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	e7fd      	b.n	8005bf6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	3318      	adds	r3, #24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe fb08 	bl	8004214 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c04:	4b23      	ldr	r3, [pc, #140]	@ (8005c94 <xTaskRemoveFromEventList+0xcc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d128      	bne.n	8005c5e <xTaskRemoveFromEventList+0x96>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fe faff 	bl	8004214 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8005c98 <xTaskRemoveFromEventList+0xd0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d903      	bls.n	8005c2a <xTaskRemoveFromEventList+0x62>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c26:	4a1c      	ldr	r2, [pc, #112]	@ (8005c98 <xTaskRemoveFromEventList+0xd0>)
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4a19      	ldr	r2, [pc, #100]	@ (8005c9c <xTaskRemoveFromEventList+0xd4>)
 8005c38:	441a      	add	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4610      	mov	r0, r2
 8005c42:	f7fe fa8a 	bl	800415a <vListInsertEnd>
 8005c46:	2100      	movs	r1, #0
 8005c48:	6938      	ldr	r0, [r7, #16]
 8005c4a:	f000 f8f3 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	2107      	movs	r1, #7
 8005c56:	4812      	ldr	r0, [pc, #72]	@ (8005ca0 <xTaskRemoveFromEventList+0xd8>)
 8005c58:	f001 fa98 	bl	800718c <log_trace_function>
 8005c5c:	e005      	b.n	8005c6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	3318      	adds	r3, #24
 8005c62:	4619      	mov	r1, r3
 8005c64:	480f      	ldr	r0, [pc, #60]	@ (8005ca4 <xTaskRemoveFromEventList+0xdc>)
 8005c66:	f7fe fa78 	bl	800415a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca8 <xTaskRemoveFromEventList+0xe0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d905      	bls.n	8005c84 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <xTaskRemoveFromEventList+0xe4>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	e001      	b.n	8005c88 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c88:	697b      	ldr	r3, [r7, #20]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20001224 	.word	0x20001224
 8005c98:	20001204 	.word	0x20001204
 8005c9c:	20000d2c 	.word	0x20000d2c
 8005ca0:	08007578 	.word	0x08007578
 8005ca4:	200011bc 	.word	0x200011bc
 8005ca8:	20000d28 	.word	0x20000d28
 8005cac:	20001210 	.word	0x20001210

08005cb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cb8:	4b06      	ldr	r3, [pc, #24]	@ (8005cd4 <vTaskInternalSetTimeOutState+0x24>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cc0:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <vTaskInternalSetTimeOutState+0x28>)
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	605a      	str	r2, [r3, #4]
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20001214 	.word	0x20001214
 8005cd8:	20001200 	.word	0x20001200

08005cdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10d      	bne.n	8005d08 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf0:	b672      	cpsid	i
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	b662      	cpsie	i
 8005d00:	613b      	str	r3, [r7, #16]
}
 8005d02:	bf00      	nop
 8005d04:	bf00      	nop
 8005d06:	e7fd      	b.n	8005d04 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10d      	bne.n	8005d2a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	b672      	cpsid	i
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	b662      	cpsie	i
 8005d22:	60fb      	str	r3, [r7, #12]
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	e7fd      	b.n	8005d26 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005d2a:	f000 ffef 	bl	8006d0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005da4 <xTaskCheckForTimeOut+0xc8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d102      	bne.n	8005d4e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	e023      	b.n	8005d96 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b15      	ldr	r3, [pc, #84]	@ (8005da8 <xTaskCheckForTimeOut+0xcc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d007      	beq.n	8005d6a <xTaskCheckForTimeOut+0x8e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d302      	bcc.n	8005d6a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d64:	2301      	movs	r3, #1
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	e015      	b.n	8005d96 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d20b      	bcs.n	8005d8c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	1ad2      	subs	r2, r2, r3
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff95 	bl	8005cb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d86:	2300      	movs	r3, #0
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	e004      	b.n	8005d96 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d92:	2301      	movs	r3, #1
 8005d94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d96:	f000 ffef 	bl	8006d78 <vPortExitCritical>

	return xReturn;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3720      	adds	r7, #32
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20001200 	.word	0x20001200
 8005da8:	20001214 	.word	0x20001214

08005dac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005db0:	4b03      	ldr	r3, [pc, #12]	@ (8005dc0 <vTaskMissedYield+0x14>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	20001210 	.word	0x20001210

08005dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005dcc:	f000 f898 	bl	8005f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dd0:	4b06      	ldr	r3, [pc, #24]	@ (8005dec <prvIdleTask+0x28>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d9f9      	bls.n	8005dcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dd8:	4b05      	ldr	r3, [pc, #20]	@ (8005df0 <prvIdleTask+0x2c>)
 8005dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005de8:	e7f0      	b.n	8005dcc <prvIdleTask+0x8>
 8005dea:	bf00      	nop
 8005dec:	20000d2c 	.word	0x20000d2c
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	dc0e      	bgt.n	8005e24 <vTaskSetThreadLocalStoragePointer+0x30>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <vTaskSetThreadLocalStoragePointer+0x1e>
 8005e0c:	4b08      	ldr	r3, [pc, #32]	@ (8005e30 <vTaskSetThreadLocalStoragePointer+0x3c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	e000      	b.n	8005e14 <vTaskSetThreadLocalStoragePointer+0x20>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	617b      	str	r3, [r7, #20]
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	3314      	adds	r3, #20
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	605a      	str	r2, [r3, #4]
		}
	}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20000d28 	.word	0x20000d28

08005e34 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	dc0f      	bgt.n	8005e68 <pvTaskGetThreadLocalStoragePointer+0x34>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d102      	bne.n	8005e54 <pvTaskGetThreadLocalStoragePointer+0x20>
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e7c <pvTaskGetThreadLocalStoragePointer+0x48>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	e000      	b.n	8005e56 <pvTaskGetThreadLocalStoragePointer+0x22>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	3314      	adds	r3, #20
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e001      	b.n	8005e6c <pvTaskGetThreadLocalStoragePointer+0x38>
		}
		else
		{
			pvReturn = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
	}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20000d28 	.word	0x20000d28

08005e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e86:	2300      	movs	r3, #0
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	e00c      	b.n	8005ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4a12      	ldr	r2, [pc, #72]	@ (8005ee0 <prvInitialiseTaskLists+0x60>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe f930 	bl	8004100 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b37      	cmp	r3, #55	@ 0x37
 8005eaa:	d9ef      	bls.n	8005e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eac:	480d      	ldr	r0, [pc, #52]	@ (8005ee4 <prvInitialiseTaskLists+0x64>)
 8005eae:	f7fe f927 	bl	8004100 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eb2:	480d      	ldr	r0, [pc, #52]	@ (8005ee8 <prvInitialiseTaskLists+0x68>)
 8005eb4:	f7fe f924 	bl	8004100 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005eb8:	480c      	ldr	r0, [pc, #48]	@ (8005eec <prvInitialiseTaskLists+0x6c>)
 8005eba:	f7fe f921 	bl	8004100 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ebe:	480c      	ldr	r0, [pc, #48]	@ (8005ef0 <prvInitialiseTaskLists+0x70>)
 8005ec0:	f7fe f91e 	bl	8004100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ec4:	480b      	ldr	r0, [pc, #44]	@ (8005ef4 <prvInitialiseTaskLists+0x74>)
 8005ec6:	f7fe f91b 	bl	8004100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005eca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <prvInitialiseTaskLists+0x78>)
 8005ecc:	4a05      	ldr	r2, [pc, #20]	@ (8005ee4 <prvInitialiseTaskLists+0x64>)
 8005ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <prvInitialiseTaskLists+0x7c>)
 8005ed2:	4a05      	ldr	r2, [pc, #20]	@ (8005ee8 <prvInitialiseTaskLists+0x68>)
 8005ed4:	601a      	str	r2, [r3, #0]
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000d2c 	.word	0x20000d2c
 8005ee4:	2000118c 	.word	0x2000118c
 8005ee8:	200011a0 	.word	0x200011a0
 8005eec:	200011bc 	.word	0x200011bc
 8005ef0:	200011d0 	.word	0x200011d0
 8005ef4:	200011e8 	.word	0x200011e8
 8005ef8:	200011b4 	.word	0x200011b4
 8005efc:	200011b8 	.word	0x200011b8

08005f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f06:	e019      	b.n	8005f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f08:	f000 ff00 	bl	8006d0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0c:	4b10      	ldr	r3, [pc, #64]	@ (8005f50 <prvCheckTasksWaitingTermination+0x50>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe f97b 	bl	8004214 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <prvCheckTasksWaitingTermination+0x54>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	4a0b      	ldr	r2, [pc, #44]	@ (8005f54 <prvCheckTasksWaitingTermination+0x54>)
 8005f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f28:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f32:	f000 ff21 	bl	8006d78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f810 	bl	8005f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e1      	bne.n	8005f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	200011d0 	.word	0x200011d0
 8005f54:	200011fc 	.word	0x200011fc
 8005f58:	200011e4 	.word	0x200011e4

08005f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d108      	bne.n	8005f80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 f80a 	bl	8006f8c <vPortFree>
				vPortFree( pxTCB );
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 f807 	bl	8006f8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f7e:	e01b      	b.n	8005fb8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d103      	bne.n	8005f92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fffe 	bl	8006f8c <vPortFree>
	}
 8005f90:	e012      	b.n	8005fb8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d00d      	beq.n	8005fb8 <prvDeleteTCB+0x5c>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa0:	b672      	cpsid	i
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	b662      	cpsie	i
 8005fb0:	60fb      	str	r3, [r7, #12]
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	e7fd      	b.n	8005fb4 <prvDeleteTCB+0x58>
	}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff8 <prvResetNextTaskUnblockTime+0x38>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d104      	bne.n	8005fda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ffc <prvResetNextTaskUnblockTime+0x3c>)
 8005fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fd8:	e008      	b.n	8005fec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fda:	4b07      	ldr	r3, [pc, #28]	@ (8005ff8 <prvResetNextTaskUnblockTime+0x38>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	4a04      	ldr	r2, [pc, #16]	@ (8005ffc <prvResetNextTaskUnblockTime+0x3c>)
 8005fea:	6013      	str	r3, [r2, #0]
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	200011b4 	.word	0x200011b4
 8005ffc:	2000121c 	.word	0x2000121c

08006000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006006:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <xTaskGetSchedulerState+0x34>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800600e:	2301      	movs	r3, #1
 8006010:	607b      	str	r3, [r7, #4]
 8006012:	e008      	b.n	8006026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006014:	4b08      	ldr	r3, [pc, #32]	@ (8006038 <xTaskGetSchedulerState+0x38>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800601c:	2302      	movs	r3, #2
 800601e:	607b      	str	r3, [r7, #4]
 8006020:	e001      	b.n	8006026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006022:	2300      	movs	r3, #0
 8006024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006026:	687b      	ldr	r3, [r7, #4]
	}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	20001208 	.word	0x20001208
 8006038:	20001224 	.word	0x20001224

0800603c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d05c      	beq.n	800610c <xTaskPriorityInherit+0xd0>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006056:	4b30      	ldr	r3, [pc, #192]	@ (8006118 <xTaskPriorityInherit+0xdc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	429a      	cmp	r2, r3
 800605e:	d24c      	bcs.n	80060fa <xTaskPriorityInherit+0xbe>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	db06      	blt.n	8006076 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006068:	4b2b      	ldr	r3, [pc, #172]	@ (8006118 <xTaskPriorityInherit+0xdc>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	6959      	ldr	r1, [r3, #20]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4a25      	ldr	r2, [pc, #148]	@ (800611c <xTaskPriorityInherit+0xe0>)
 8006088:	4413      	add	r3, r2
 800608a:	4299      	cmp	r1, r3
 800608c:	d12d      	bne.n	80060ea <xTaskPriorityInherit+0xae>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	3304      	adds	r3, #4
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe f8be 	bl	8004214 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006098:	4b1f      	ldr	r3, [pc, #124]	@ (8006118 <xTaskPriorityInherit+0xdc>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006120 <xTaskPriorityInherit+0xe4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d903      	bls.n	80060b6 <xTaskPriorityInherit+0x7a>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006120 <xTaskPriorityInherit+0xe4>)
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4a16      	ldr	r2, [pc, #88]	@ (800611c <xTaskPriorityInherit+0xe0>)
 80060c4:	441a      	add	r2, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	3304      	adds	r3, #4
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f7fe f844 	bl	800415a <vListInsertEnd>
 80060d2:	2100      	movs	r1, #0
 80060d4:	68b8      	ldr	r0, [r7, #8]
 80060d6:	f7ff fead 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 80060da:	4603      	mov	r3, r0
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	2107      	movs	r1, #7
 80060e2:	4810      	ldr	r0, [pc, #64]	@ (8006124 <xTaskPriorityInherit+0xe8>)
 80060e4:	f001 f852 	bl	800718c <log_trace_function>
 80060e8:	e004      	b.n	80060f4 <xTaskPriorityInherit+0xb8>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006118 <xTaskPriorityInherit+0xdc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e008      	b.n	800610c <xTaskPriorityInherit+0xd0>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060fe:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <xTaskPriorityInherit+0xdc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	429a      	cmp	r2, r3
 8006106:	d201      	bcs.n	800610c <xTaskPriorityInherit+0xd0>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006108:	2301      	movs	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800610c:	68fb      	ldr	r3, [r7, #12]
	}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000d28 	.word	0x20000d28
 800611c:	20000d2c 	.word	0x20000d2c
 8006120:	20001204 	.word	0x20001204
 8006124:	08007578 	.word	0x08007578

08006128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d067      	beq.n	800620e <xTaskPriorityDisinherit+0xe6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800613e:	4b36      	ldr	r3, [pc, #216]	@ (8006218 <xTaskPriorityDisinherit+0xf0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	429a      	cmp	r2, r3
 8006146:	d00d      	beq.n	8006164 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	b672      	cpsid	i
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	b662      	cpsie	i
 800615c:	60fb      	str	r3, [r7, #12]
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	e7fd      	b.n	8006160 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10d      	bne.n	8006188 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006170:	b672      	cpsid	i
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	b662      	cpsie	i
 8006180:	60bb      	str	r3, [r7, #8]
}
 8006182:	bf00      	nop
 8006184:	bf00      	nop
 8006186:	e7fd      	b.n	8006184 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800618c:	1e5a      	subs	r2, r3, #1
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800619a:	429a      	cmp	r2, r3
 800619c:	d037      	beq.n	800620e <xTaskPriorityDisinherit+0xe6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d133      	bne.n	800620e <xTaskPriorityDisinherit+0xe6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe f832 	bl	8004214 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c8:	4b14      	ldr	r3, [pc, #80]	@ (800621c <xTaskPriorityDisinherit+0xf4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d903      	bls.n	80061d8 <xTaskPriorityDisinherit+0xb0>
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d4:	4a11      	ldr	r2, [pc, #68]	@ (800621c <xTaskPriorityDisinherit+0xf4>)
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4a0e      	ldr	r2, [pc, #56]	@ (8006220 <xTaskPriorityDisinherit+0xf8>)
 80061e6:	441a      	add	r2, r3
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fd ffb3 	bl	800415a <vListInsertEnd>
 80061f4:	2100      	movs	r1, #0
 80061f6:	6938      	ldr	r0, [r7, #16]
 80061f8:	f7ff fe1c 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 80061fc:	4603      	mov	r3, r0
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	2107      	movs	r1, #7
 8006204:	4807      	ldr	r0, [pc, #28]	@ (8006224 <xTaskPriorityDisinherit+0xfc>)
 8006206:	f000 ffc1 	bl	800718c <log_trace_function>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800620a:	2301      	movs	r3, #1
 800620c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800620e:	697b      	ldr	r3, [r7, #20]
	}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20000d28 	.word	0x20000d28
 800621c:	20001204 	.word	0x20001204
 8006220:	20000d2c 	.word	0x20000d2c
 8006224:	08007578 	.word	0x08007578

08006228 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006236:	2301      	movs	r3, #1
 8006238:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d07b      	beq.n	8006338 <vTaskPriorityDisinheritAfterTimeout+0x110>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10d      	bne.n	8006264 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624c:	b672      	cpsid	i
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	b662      	cpsie	i
 800625c:	60fb      	str	r3, [r7, #12]
}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	e7fd      	b.n	8006260 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d902      	bls.n	8006274 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e002      	b.n	800627a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006278:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	429a      	cmp	r2, r3
 8006282:	d059      	beq.n	8006338 <vTaskPriorityDisinheritAfterTimeout+0x110>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	429a      	cmp	r2, r3
 800628c:	d154      	bne.n	8006338 <vTaskPriorityDisinheritAfterTimeout+0x110>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800628e:	4b2c      	ldr	r3, [pc, #176]	@ (8006340 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	429a      	cmp	r2, r3
 8006296:	d10d      	bne.n	80062b4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629c:	b672      	cpsid	i
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	b662      	cpsie	i
 80062ac:	60bb      	str	r3, [r7, #8]
}
 80062ae:	bf00      	nop
 80062b0:	bf00      	nop
 80062b2:	e7fd      	b.n	80062b0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	db04      	blt.n	80062d2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	6959      	ldr	r1, [r3, #20]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4a18      	ldr	r2, [pc, #96]	@ (8006344 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80062e2:	4413      	add	r3, r2
 80062e4:	4299      	cmp	r1, r3
 80062e6:	d127      	bne.n	8006338 <vTaskPriorityDisinheritAfterTimeout+0x110>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fd ff91 	bl	8004214 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f6:	4b14      	ldr	r3, [pc, #80]	@ (8006348 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d903      	bls.n	8006306 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006302:	4a11      	ldr	r2, [pc, #68]	@ (8006348 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a0c      	ldr	r2, [pc, #48]	@ (8006344 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006314:	441a      	add	r2, r3
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f7fd ff1c 	bl	800415a <vListInsertEnd>
 8006322:	2100      	movs	r1, #0
 8006324:	69b8      	ldr	r0, [r7, #24]
 8006326:	f7ff fd85 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 800632a:	4603      	mov	r3, r0
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	2107      	movs	r1, #7
 8006332:	4806      	ldr	r0, [pc, #24]	@ (800634c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8006334:	f000 ff2a 	bl	800718c <log_trace_function>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006338:	bf00      	nop
 800633a:	3720      	adds	r7, #32
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000d28 	.word	0x20000d28
 8006344:	20000d2c 	.word	0x20000d2c
 8006348:	20001204 	.word	0x20001204
 800634c:	08007578 	.word	0x08007578

08006350 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006354:	4b07      	ldr	r3, [pc, #28]	@ (8006374 <pvTaskIncrementMutexHeldCount+0x24>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800635c:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <pvTaskIncrementMutexHeldCount+0x24>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006362:	3201      	adds	r2, #1
 8006364:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006366:	4b03      	ldr	r3, [pc, #12]	@ (8006374 <pvTaskIncrementMutexHeldCount+0x24>)
 8006368:	681b      	ldr	r3, [r3, #0]
	}
 800636a:	4618      	mov	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	20000d28 	.word	0x20000d28

08006378 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006382:	4b21      	ldr	r3, [pc, #132]	@ (8006408 <prvAddCurrentTaskToDelayedList+0x90>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006388:	4b20      	ldr	r3, [pc, #128]	@ (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3304      	adds	r3, #4
 800638e:	4618      	mov	r0, r3
 8006390:	f7fd ff40 	bl	8004214 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d10a      	bne.n	80063b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063a2:	4b1a      	ldr	r3, [pc, #104]	@ (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4819      	ldr	r0, [pc, #100]	@ (8006410 <prvAddCurrentTaskToDelayedList+0x98>)
 80063ac:	f7fd fed5 	bl	800415a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063b0:	e026      	b.n	8006400 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4413      	add	r3, r2
 80063b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063ba:	4b14      	ldr	r3, [pc, #80]	@ (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d209      	bcs.n	80063de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ca:	4b12      	ldr	r3, [pc, #72]	@ (8006414 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b0f      	ldr	r3, [pc, #60]	@ (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f7fd fee3 	bl	80041a2 <vListInsert>
}
 80063dc:	e010      	b.n	8006400 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063de:	4b0e      	ldr	r3, [pc, #56]	@ (8006418 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b0a      	ldr	r3, [pc, #40]	@ (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f7fd fed9 	bl	80041a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063f0:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <prvAddCurrentTaskToDelayedList+0xa4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d202      	bcs.n	8006400 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063fa:	4a08      	ldr	r2, [pc, #32]	@ (800641c <prvAddCurrentTaskToDelayedList+0xa4>)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	6013      	str	r3, [r2, #0]
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20001200 	.word	0x20001200
 800640c:	20000d28 	.word	0x20000d28
 8006410:	200011e8 	.word	0x200011e8
 8006414:	200011b8 	.word	0x200011b8
 8006418:	200011b4 	.word	0x200011b4
 800641c:	2000121c 	.word	0x2000121c

08006420 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	@ 0x28
 8006424:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800642a:	f000 fb21 	bl	8006a70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800642e:	4b1e      	ldr	r3, [pc, #120]	@ (80064a8 <xTimerCreateTimerTask+0x88>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d021      	beq.n	800647a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800643e:	1d3a      	adds	r2, r7, #4
 8006440:	f107 0108 	add.w	r1, r7, #8
 8006444:	f107 030c 	add.w	r3, r7, #12
 8006448:	4618      	mov	r0, r3
 800644a:	f7fd fe3f 	bl	80040cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	9202      	str	r2, [sp, #8]
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	2302      	movs	r3, #2
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	2300      	movs	r3, #0
 800645e:	460a      	mov	r2, r1
 8006460:	4912      	ldr	r1, [pc, #72]	@ (80064ac <xTimerCreateTimerTask+0x8c>)
 8006462:	4813      	ldr	r0, [pc, #76]	@ (80064b0 <xTimerCreateTimerTask+0x90>)
 8006464:	f7fe fe26 	bl	80050b4 <xTaskCreateStatic>
 8006468:	4603      	mov	r3, r0
 800646a:	4a12      	ldr	r2, [pc, #72]	@ (80064b4 <xTimerCreateTimerTask+0x94>)
 800646c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800646e:	4b11      	ldr	r3, [pc, #68]	@ (80064b4 <xTimerCreateTimerTask+0x94>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006476:	2301      	movs	r3, #1
 8006478:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10d      	bne.n	800649c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006484:	b672      	cpsid	i
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	b662      	cpsie	i
 8006494:	613b      	str	r3, [r7, #16]
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	e7fd      	b.n	8006498 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800649c:	697b      	ldr	r3, [r7, #20]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20001258 	.word	0x20001258
 80064ac:	080075ac 	.word	0x080075ac
 80064b0:	080065f9 	.word	0x080065f9
 80064b4:	2000125c 	.word	0x2000125c

080064b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08a      	sub	sp, #40	@ 0x28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10d      	bne.n	80064ec <xTimerGenericCommand+0x34>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d4:	b672      	cpsid	i
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	b662      	cpsie	i
 80064e4:	623b      	str	r3, [r7, #32]
}
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	e7fd      	b.n	80064e8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064ec:	4b19      	ldr	r3, [pc, #100]	@ (8006554 <xTimerGenericCommand+0x9c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d02a      	beq.n	800654a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b05      	cmp	r3, #5
 8006504:	dc18      	bgt.n	8006538 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006506:	f7ff fd7b 	bl	8006000 <xTaskGetSchedulerState>
 800650a:	4603      	mov	r3, r0
 800650c:	2b02      	cmp	r3, #2
 800650e:	d109      	bne.n	8006524 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006510:	4b10      	ldr	r3, [pc, #64]	@ (8006554 <xTimerGenericCommand+0x9c>)
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	f107 0110 	add.w	r1, r7, #16
 8006518:	2300      	movs	r3, #0
 800651a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800651c:	f7fd fffe 	bl	800451c <xQueueGenericSend>
 8006520:	6278      	str	r0, [r7, #36]	@ 0x24
 8006522:	e012      	b.n	800654a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006524:	4b0b      	ldr	r3, [pc, #44]	@ (8006554 <xTimerGenericCommand+0x9c>)
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	f107 0110 	add.w	r1, r7, #16
 800652c:	2300      	movs	r3, #0
 800652e:	2200      	movs	r2, #0
 8006530:	f7fd fff4 	bl	800451c <xQueueGenericSend>
 8006534:	6278      	str	r0, [r7, #36]	@ 0x24
 8006536:	e008      	b.n	800654a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006538:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <xTimerGenericCommand+0x9c>)
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	f107 0110 	add.w	r1, r7, #16
 8006540:	2300      	movs	r3, #0
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	f7fe f8f4 	bl	8004730 <xQueueGenericSendFromISR>
 8006548:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800654c:	4618      	mov	r0, r3
 800654e:	3728      	adds	r7, #40	@ 0x28
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20001258 	.word	0x20001258

08006558 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af02      	add	r7, sp, #8
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006562:	4b24      	ldr	r3, [pc, #144]	@ (80065f4 <prvProcessExpiredTimer+0x9c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	3304      	adds	r3, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f7fd fe4f 	bl	8004214 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d025      	beq.n	80065d0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	699a      	ldr	r2, [r3, #24]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	18d1      	adds	r1, r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	6978      	ldr	r0, [r7, #20]
 8006592:	f000 f8d7 	bl	8006744 <prvInsertTimerInActiveList>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d022      	beq.n	80065e2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800659c:	2300      	movs	r3, #0
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	2300      	movs	r3, #0
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	2100      	movs	r1, #0
 80065a6:	6978      	ldr	r0, [r7, #20]
 80065a8:	f7ff ff86 	bl	80064b8 <xTimerGenericCommand>
 80065ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d116      	bne.n	80065e2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b8:	b672      	cpsid	i
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	b662      	cpsie	i
 80065c8:	60fb      	str	r3, [r7, #12]
}
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	6978      	ldr	r0, [r7, #20]
 80065e8:	4798      	blx	r3
}
 80065ea:	bf00      	nop
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20001250 	.word	0x20001250

080065f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006600:	f107 0308 	add.w	r3, r7, #8
 8006604:	4618      	mov	r0, r3
 8006606:	f000 f859 	bl	80066bc <prvGetNextExpireTime>
 800660a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4619      	mov	r1, r3
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 f805 	bl	8006620 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006616:	f000 f8d7 	bl	80067c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800661a:	bf00      	nop
 800661c:	e7f0      	b.n	8006600 <prvTimerTask+0x8>
	...

08006620 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800662a:	f7ff f84b 	bl	80056c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800662e:	f107 0308 	add.w	r3, r7, #8
 8006632:	4618      	mov	r0, r3
 8006634:	f000 f866 	bl	8006704 <prvSampleTimeNow>
 8006638:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d130      	bne.n	80066a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10a      	bne.n	800665c <prvProcessTimerOrBlockTask+0x3c>
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	429a      	cmp	r2, r3
 800664c:	d806      	bhi.n	800665c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800664e:	f7ff f847 	bl	80056e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006652:	68f9      	ldr	r1, [r7, #12]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff ff7f 	bl	8006558 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800665a:	e024      	b.n	80066a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d008      	beq.n	8006674 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006662:	4b13      	ldr	r3, [pc, #76]	@ (80066b0 <prvProcessTimerOrBlockTask+0x90>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <prvProcessTimerOrBlockTask+0x50>
 800666c:	2301      	movs	r3, #1
 800666e:	e000      	b.n	8006672 <prvProcessTimerOrBlockTask+0x52>
 8006670:	2300      	movs	r3, #0
 8006672:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006674:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <prvProcessTimerOrBlockTask+0x94>)
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	4619      	mov	r1, r3
 8006682:	f7fe fce3 	bl	800504c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006686:	f7ff f82b 	bl	80056e0 <xTaskResumeAll>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006690:	4b09      	ldr	r3, [pc, #36]	@ (80066b8 <prvProcessTimerOrBlockTask+0x98>)
 8006692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
}
 80066a0:	e001      	b.n	80066a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066a2:	f7ff f81d 	bl	80056e0 <xTaskResumeAll>
}
 80066a6:	bf00      	nop
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20001254 	.word	0x20001254
 80066b4:	20001258 	.word	0x20001258
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006700 <prvGetNextExpireTime+0x44>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <prvGetNextExpireTime+0x16>
 80066ce:	2201      	movs	r2, #1
 80066d0:	e000      	b.n	80066d4 <prvGetNextExpireTime+0x18>
 80066d2:	2200      	movs	r2, #0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066e0:	4b07      	ldr	r3, [pc, #28]	@ (8006700 <prvGetNextExpireTime+0x44>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	e001      	b.n	80066f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066f0:	68fb      	ldr	r3, [r7, #12]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20001250 	.word	0x20001250

08006704 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800670c:	f7ff f896 	bl	800583c <xTaskGetTickCount>
 8006710:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006712:	4b0b      	ldr	r3, [pc, #44]	@ (8006740 <prvSampleTimeNow+0x3c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	429a      	cmp	r2, r3
 800671a:	d205      	bcs.n	8006728 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800671c:	f000 f940 	bl	80069a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e002      	b.n	800672e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800672e:	4a04      	ldr	r2, [pc, #16]	@ (8006740 <prvSampleTimeNow+0x3c>)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006734:	68fb      	ldr	r3, [r7, #12]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20001260 	.word	0x20001260

08006744 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	429a      	cmp	r2, r3
 8006768:	d812      	bhi.n	8006790 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	429a      	cmp	r2, r3
 8006776:	d302      	bcc.n	800677e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006778:	2301      	movs	r3, #1
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e01b      	b.n	80067b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800677e:	4b10      	ldr	r3, [pc, #64]	@ (80067c0 <prvInsertTimerInActiveList+0x7c>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3304      	adds	r3, #4
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fd fd0a 	bl	80041a2 <vListInsert>
 800678e:	e012      	b.n	80067b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d206      	bcs.n	80067a6 <prvInsertTimerInActiveList+0x62>
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d302      	bcc.n	80067a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067a0:	2301      	movs	r3, #1
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	e007      	b.n	80067b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067a6:	4b07      	ldr	r3, [pc, #28]	@ (80067c4 <prvInsertTimerInActiveList+0x80>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f7fd fcf6 	bl	80041a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067b6:	697b      	ldr	r3, [r7, #20]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	20001254 	.word	0x20001254
 80067c4:	20001250 	.word	0x20001250

080067c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08e      	sub	sp, #56	@ 0x38
 80067cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067ce:	e0d4      	b.n	800697a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da1b      	bge.n	800680e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067d6:	1d3b      	adds	r3, r7, #4
 80067d8:	3304      	adds	r3, #4
 80067da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <prvProcessReceivedCommands+0x36>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	b672      	cpsid	i
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	b662      	cpsie	i
 80067f6:	61fb      	str	r3, [r7, #28]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006804:	6850      	ldr	r0, [r2, #4]
 8006806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006808:	6892      	ldr	r2, [r2, #8]
 800680a:	4611      	mov	r1, r2
 800680c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f2c0 80b2 	blt.w	800697a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	3304      	adds	r3, #4
 8006826:	4618      	mov	r0, r3
 8006828:	f7fd fcf4 	bl	8004214 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800682c:	463b      	mov	r3, r7
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff ff68 	bl	8006704 <prvSampleTimeNow>
 8006834:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b09      	cmp	r3, #9
 800683a:	f200 809b 	bhi.w	8006974 <prvProcessReceivedCommands+0x1ac>
 800683e:	a201      	add	r2, pc, #4	@ (adr r2, 8006844 <prvProcessReceivedCommands+0x7c>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	0800686d 	.word	0x0800686d
 8006848:	0800686d 	.word	0x0800686d
 800684c:	0800686d 	.word	0x0800686d
 8006850:	080068e7 	.word	0x080068e7
 8006854:	080068fb 	.word	0x080068fb
 8006858:	0800694b 	.word	0x0800694b
 800685c:	0800686d 	.word	0x0800686d
 8006860:	0800686d 	.word	0x0800686d
 8006864:	080068e7 	.word	0x080068e7
 8006868:	080068fb 	.word	0x080068fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	b2da      	uxtb	r2, r3
 8006878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	18d1      	adds	r1, r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800688a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800688c:	f7ff ff5a 	bl	8006744 <prvInsertTimerInActiveList>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d070      	beq.n	8006978 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800689c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800689e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d065      	beq.n	8006978 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	441a      	add	r2, r3
 80068b4:	2300      	movs	r3, #0
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	2300      	movs	r3, #0
 80068ba:	2100      	movs	r1, #0
 80068bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068be:	f7ff fdfb 	bl	80064b8 <xTimerGenericCommand>
 80068c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d156      	bne.n	8006978 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ce:	b672      	cpsid	i
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	b662      	cpsie	i
 80068de:	61bb      	str	r3, [r7, #24]
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	e7fd      	b.n	80068e2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80068f8:	e03f      	b.n	800697a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	b2da      	uxtb	r2, r3
 8006906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006908:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10d      	bne.n	8006936 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691e:	b672      	cpsid	i
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	b662      	cpsie	i
 800692e:	617b      	str	r3, [r7, #20]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	18d1      	adds	r1, r2, r3
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006944:	f7ff fefe 	bl	8006744 <prvInsertTimerInActiveList>
					break;
 8006948:	e017      	b.n	800697a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800694a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d103      	bne.n	8006960 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8006958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800695a:	f000 fb17 	bl	8006f8c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800695e:	e00c      	b.n	800697a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006962:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	b2da      	uxtb	r2, r3
 800696c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006972:	e002      	b.n	800697a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8006974:	bf00      	nop
 8006976:	e000      	b.n	800697a <prvProcessReceivedCommands+0x1b2>
					break;
 8006978:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800697a:	4b08      	ldr	r3, [pc, #32]	@ (800699c <prvProcessReceivedCommands+0x1d4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	1d39      	adds	r1, r7, #4
 8006980:	2200      	movs	r2, #0
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe f810 	bl	80049a8 <xQueueReceive>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	f47f af20 	bne.w	80067d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	3730      	adds	r7, #48	@ 0x30
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20001258 	.word	0x20001258

080069a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069a6:	e04b      	b.n	8006a40 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006a68 <prvSwitchTimerLists+0xc8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006a68 <prvSwitchTimerLists+0xc8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fd fc27 	bl	8004214 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d031      	beq.n	8006a40 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4413      	add	r3, r2
 80069e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d90e      	bls.n	8006a0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006a68 <prvSwitchTimerLists+0xc8>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7fd fbcc 	bl	80041a2 <vListInsert>
 8006a0a:	e019      	b.n	8006a40 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	2300      	movs	r3, #0
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	2100      	movs	r1, #0
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f7ff fd4e 	bl	80064b8 <xTimerGenericCommand>
 8006a1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10d      	bne.n	8006a40 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a28:	b672      	cpsid	i
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	b662      	cpsie	i
 8006a38:	603b      	str	r3, [r7, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	bf00      	nop
 8006a3e:	e7fd      	b.n	8006a3c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a40:	4b09      	ldr	r3, [pc, #36]	@ (8006a68 <prvSwitchTimerLists+0xc8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1ae      	bne.n	80069a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a4a:	4b07      	ldr	r3, [pc, #28]	@ (8006a68 <prvSwitchTimerLists+0xc8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a50:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <prvSwitchTimerLists+0xcc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a04      	ldr	r2, [pc, #16]	@ (8006a68 <prvSwitchTimerLists+0xc8>)
 8006a56:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a58:	4a04      	ldr	r2, [pc, #16]	@ (8006a6c <prvSwitchTimerLists+0xcc>)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	6013      	str	r3, [r2, #0]
}
 8006a5e:	bf00      	nop
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20001250 	.word	0x20001250
 8006a6c:	20001254 	.word	0x20001254

08006a70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a76:	f000 f949 	bl	8006d0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a7a:	4b15      	ldr	r3, [pc, #84]	@ (8006ad0 <prvCheckForValidListAndQueue+0x60>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d120      	bne.n	8006ac4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a82:	4814      	ldr	r0, [pc, #80]	@ (8006ad4 <prvCheckForValidListAndQueue+0x64>)
 8006a84:	f7fd fb3c 	bl	8004100 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a88:	4813      	ldr	r0, [pc, #76]	@ (8006ad8 <prvCheckForValidListAndQueue+0x68>)
 8006a8a:	f7fd fb39 	bl	8004100 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a8e:	4b13      	ldr	r3, [pc, #76]	@ (8006adc <prvCheckForValidListAndQueue+0x6c>)
 8006a90:	4a10      	ldr	r2, [pc, #64]	@ (8006ad4 <prvCheckForValidListAndQueue+0x64>)
 8006a92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a94:	4b12      	ldr	r3, [pc, #72]	@ (8006ae0 <prvCheckForValidListAndQueue+0x70>)
 8006a96:	4a10      	ldr	r2, [pc, #64]	@ (8006ad8 <prvCheckForValidListAndQueue+0x68>)
 8006a98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	4b11      	ldr	r3, [pc, #68]	@ (8006ae4 <prvCheckForValidListAndQueue+0x74>)
 8006aa0:	4a11      	ldr	r2, [pc, #68]	@ (8006ae8 <prvCheckForValidListAndQueue+0x78>)
 8006aa2:	2110      	movs	r1, #16
 8006aa4:	200a      	movs	r0, #10
 8006aa6:	f7fd fc4b 	bl	8004340 <xQueueGenericCreateStatic>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	4a08      	ldr	r2, [pc, #32]	@ (8006ad0 <prvCheckForValidListAndQueue+0x60>)
 8006aae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ab0:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <prvCheckForValidListAndQueue+0x60>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ab8:	4b05      	ldr	r3, [pc, #20]	@ (8006ad0 <prvCheckForValidListAndQueue+0x60>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	490b      	ldr	r1, [pc, #44]	@ (8006aec <prvCheckForValidListAndQueue+0x7c>)
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fa9a 	bl	8004ff8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ac4:	f000 f958 	bl	8006d78 <vPortExitCritical>
}
 8006ac8:	bf00      	nop
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20001258 	.word	0x20001258
 8006ad4:	20001228 	.word	0x20001228
 8006ad8:	2000123c 	.word	0x2000123c
 8006adc:	20001250 	.word	0x20001250
 8006ae0:	20001254 	.word	0x20001254
 8006ae4:	20001304 	.word	0x20001304
 8006ae8:	20001264 	.word	0x20001264
 8006aec:	080075b4 	.word	0x080075b4

08006af0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3b04      	subs	r3, #4
 8006b00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3b04      	subs	r3, #4
 8006b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f023 0201 	bic.w	r2, r3, #1
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3b04      	subs	r3, #4
 8006b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b20:	4a0c      	ldr	r2, [pc, #48]	@ (8006b54 <pxPortInitialiseStack+0x64>)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3b14      	subs	r3, #20
 8006b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3b04      	subs	r3, #4
 8006b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f06f 0202 	mvn.w	r2, #2
 8006b3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3b20      	subs	r3, #32
 8006b44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b46:	68fb      	ldr	r3, [r7, #12]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	08006b59 	.word	0x08006b59

08006b58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b62:	4b15      	ldr	r3, [pc, #84]	@ (8006bb8 <prvTaskExitError+0x60>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6a:	d00d      	beq.n	8006b88 <prvTaskExitError+0x30>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	b672      	cpsid	i
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	b662      	cpsie	i
 8006b80:	60fb      	str	r3, [r7, #12]
}
 8006b82:	bf00      	nop
 8006b84:	bf00      	nop
 8006b86:	e7fd      	b.n	8006b84 <prvTaskExitError+0x2c>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8c:	b672      	cpsid	i
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	b662      	cpsie	i
 8006b9c:	60bb      	str	r3, [r7, #8]
}
 8006b9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ba0:	bf00      	nop
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0fc      	beq.n	8006ba2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	2000000c 	.word	0x2000000c
 8006bbc:	00000000 	.word	0x00000000

08006bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bc0:	4b07      	ldr	r3, [pc, #28]	@ (8006be0 <pxCurrentTCBConst2>)
 8006bc2:	6819      	ldr	r1, [r3, #0]
 8006bc4:	6808      	ldr	r0, [r1, #0]
 8006bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bca:	f380 8809 	msr	PSP, r0
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f04f 0000 	mov.w	r0, #0
 8006bd6:	f380 8811 	msr	BASEPRI, r0
 8006bda:	4770      	bx	lr
 8006bdc:	f3af 8000 	nop.w

08006be0 <pxCurrentTCBConst2>:
 8006be0:	20000d28 	.word	0x20000d28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop

08006be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006be8:	4808      	ldr	r0, [pc, #32]	@ (8006c0c <prvPortStartFirstTask+0x24>)
 8006bea:	6800      	ldr	r0, [r0, #0]
 8006bec:	6800      	ldr	r0, [r0, #0]
 8006bee:	f380 8808 	msr	MSP, r0
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8814 	msr	CONTROL, r0
 8006bfa:	b662      	cpsie	i
 8006bfc:	b661      	cpsie	f
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	df00      	svc	0
 8006c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c0a:	bf00      	nop
 8006c0c:	e000ed08 	.word	0xe000ed08

08006c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c16:	4b37      	ldr	r3, [pc, #220]	@ (8006cf4 <xPortStartScheduler+0xe4>)
 8006c18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	22ff      	movs	r2, #255	@ 0xff
 8006c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006cf8 <xPortStartScheduler+0xe8>)
 8006c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006cfc <xPortStartScheduler+0xec>)
 8006c40:	2207      	movs	r2, #7
 8006c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c44:	e009      	b.n	8006c5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c46:	4b2d      	ldr	r3, [pc, #180]	@ (8006cfc <xPortStartScheduler+0xec>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8006cfc <xPortStartScheduler+0xec>)
 8006c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c62:	2b80      	cmp	r3, #128	@ 0x80
 8006c64:	d0ef      	beq.n	8006c46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c66:	4b25      	ldr	r3, [pc, #148]	@ (8006cfc <xPortStartScheduler+0xec>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1c3 0307 	rsb	r3, r3, #7
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d00d      	beq.n	8006c8e <xPortStartScheduler+0x7e>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c76:	b672      	cpsid	i
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	b662      	cpsie	i
 8006c86:	60bb      	str	r3, [r7, #8]
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	e7fd      	b.n	8006c8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cfc <xPortStartScheduler+0xec>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	4a19      	ldr	r2, [pc, #100]	@ (8006cfc <xPortStartScheduler+0xec>)
 8006c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c98:	4b18      	ldr	r3, [pc, #96]	@ (8006cfc <xPortStartScheduler+0xec>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ca0:	4a16      	ldr	r2, [pc, #88]	@ (8006cfc <xPortStartScheduler+0xec>)
 8006ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cac:	4b14      	ldr	r3, [pc, #80]	@ (8006d00 <xPortStartScheduler+0xf0>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a13      	ldr	r2, [pc, #76]	@ (8006d00 <xPortStartScheduler+0xf0>)
 8006cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cb8:	4b11      	ldr	r3, [pc, #68]	@ (8006d00 <xPortStartScheduler+0xf0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a10      	ldr	r2, [pc, #64]	@ (8006d00 <xPortStartScheduler+0xf0>)
 8006cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cc4:	f000 f8dc 	bl	8006e80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d04 <xPortStartScheduler+0xf4>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cce:	f000 f8fb 	bl	8006ec8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <xPortStartScheduler+0xf8>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006d08 <xPortStartScheduler+0xf8>)
 8006cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cde:	f7ff ff83 	bl	8006be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ce2:	f7fe fe9f 	bl	8005a24 <vTaskSwitchContext>
	prvTaskExitError();
 8006ce6:	f7ff ff37 	bl	8006b58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	e000e400 	.word	0xe000e400
 8006cf8:	20001354 	.word	0x20001354
 8006cfc:	20001358 	.word	0x20001358
 8006d00:	e000ed20 	.word	0xe000ed20
 8006d04:	2000000c 	.word	0x2000000c
 8006d08:	e000ef34 	.word	0xe000ef34

08006d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	b672      	cpsid	i
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	b662      	cpsie	i
 8006d26:	607b      	str	r3, [r7, #4]
}
 8006d28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d2a:	4b11      	ldr	r3, [pc, #68]	@ (8006d70 <vPortEnterCritical+0x64>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	4a0f      	ldr	r2, [pc, #60]	@ (8006d70 <vPortEnterCritical+0x64>)
 8006d32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d34:	4b0e      	ldr	r3, [pc, #56]	@ (8006d70 <vPortEnterCritical+0x64>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d112      	bne.n	8006d62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <vPortEnterCritical+0x68>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00d      	beq.n	8006d62 <vPortEnterCritical+0x56>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4a:	b672      	cpsid	i
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	b662      	cpsie	i
 8006d5a:	603b      	str	r3, [r7, #0]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <vPortEnterCritical+0x52>
	}
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	2000000c 	.word	0x2000000c
 8006d74:	e000ed04 	.word	0xe000ed04

08006d78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d7e:	4b13      	ldr	r3, [pc, #76]	@ (8006dcc <vPortExitCritical+0x54>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10d      	bne.n	8006da2 <vPortExitCritical+0x2a>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8a:	b672      	cpsid	i
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	b662      	cpsie	i
 8006d9a:	607b      	str	r3, [r7, #4]
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	e7fd      	b.n	8006d9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006da2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dcc <vPortExitCritical+0x54>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	4a08      	ldr	r2, [pc, #32]	@ (8006dcc <vPortExitCritical+0x54>)
 8006daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dac:	4b07      	ldr	r3, [pc, #28]	@ (8006dcc <vPortExitCritical+0x54>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d105      	bne.n	8006dc0 <vPortExitCritical+0x48>
 8006db4:	2300      	movs	r3, #0
 8006db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f383 8811 	msr	BASEPRI, r3
}
 8006dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	2000000c 	.word	0x2000000c

08006dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006dd0:	f3ef 8009 	mrs	r0, PSP
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	4b15      	ldr	r3, [pc, #84]	@ (8006e30 <pxCurrentTCBConst>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	f01e 0f10 	tst.w	lr, #16
 8006de0:	bf08      	it	eq
 8006de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dea:	6010      	str	r0, [r2, #0]
 8006dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006df4:	b672      	cpsid	i
 8006df6:	f380 8811 	msr	BASEPRI, r0
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	b662      	cpsie	i
 8006e04:	f7fe fe0e 	bl	8005a24 <vTaskSwitchContext>
 8006e08:	f04f 0000 	mov.w	r0, #0
 8006e0c:	f380 8811 	msr	BASEPRI, r0
 8006e10:	bc09      	pop	{r0, r3}
 8006e12:	6819      	ldr	r1, [r3, #0]
 8006e14:	6808      	ldr	r0, [r1, #0]
 8006e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1a:	f01e 0f10 	tst.w	lr, #16
 8006e1e:	bf08      	it	eq
 8006e20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e24:	f380 8809 	msr	PSP, r0
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop

08006e30 <pxCurrentTCBConst>:
 8006e30:	20000d28 	.word	0x20000d28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop

08006e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e42:	b672      	cpsid	i
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	b662      	cpsie	i
 8006e52:	607b      	str	r3, [r7, #4]
}
 8006e54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e56:	f7fe fd13 	bl	8005880 <xTaskIncrementTick>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e60:	4b06      	ldr	r3, [pc, #24]	@ (8006e7c <xPortSysTickHandler+0x44>)
 8006e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	f383 8811 	msr	BASEPRI, r3
}
 8006e72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e84:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb4 <vPortSetupTimerInterrupt+0x34>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb8 <vPortSetupTimerInterrupt+0x38>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e90:	4b0a      	ldr	r3, [pc, #40]	@ (8006ebc <vPortSetupTimerInterrupt+0x3c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec0 <vPortSetupTimerInterrupt+0x40>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	099b      	lsrs	r3, r3, #6
 8006e9c:	4a09      	ldr	r2, [pc, #36]	@ (8006ec4 <vPortSetupTimerInterrupt+0x44>)
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ea2:	4b04      	ldr	r3, [pc, #16]	@ (8006eb4 <vPortSetupTimerInterrupt+0x34>)
 8006ea4:	2207      	movs	r2, #7
 8006ea6:	601a      	str	r2, [r3, #0]
}
 8006ea8:	bf00      	nop
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	e000e010 	.word	0xe000e010
 8006eb8:	e000e018 	.word	0xe000e018
 8006ebc:	20000000 	.word	0x20000000
 8006ec0:	10624dd3 	.word	0x10624dd3
 8006ec4:	e000e014 	.word	0xe000e014

08006ec8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ec8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ed8 <vPortEnableVFP+0x10>
 8006ecc:	6801      	ldr	r1, [r0, #0]
 8006ece:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006ed2:	6001      	str	r1, [r0, #0]
 8006ed4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ed6:	bf00      	nop
 8006ed8:	e000ed88 	.word	0xe000ed88

08006edc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ee2:	f3ef 8305 	mrs	r3, IPSR
 8006ee6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b0f      	cmp	r3, #15
 8006eec:	d917      	bls.n	8006f1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006eee:	4a1a      	ldr	r2, [pc, #104]	@ (8006f58 <vPortValidateInterruptPriority+0x7c>)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ef8:	4b18      	ldr	r3, [pc, #96]	@ (8006f5c <vPortValidateInterruptPriority+0x80>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	7afa      	ldrb	r2, [r7, #11]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d20d      	bcs.n	8006f1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f06:	b672      	cpsid	i
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	b662      	cpsie	i
 8006f16:	607b      	str	r3, [r7, #4]
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	e7fd      	b.n	8006f1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f1e:	4b10      	ldr	r3, [pc, #64]	@ (8006f60 <vPortValidateInterruptPriority+0x84>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f26:	4b0f      	ldr	r3, [pc, #60]	@ (8006f64 <vPortValidateInterruptPriority+0x88>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d90d      	bls.n	8006f4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	b672      	cpsid	i
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	b662      	cpsie	i
 8006f42:	603b      	str	r3, [r7, #0]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <vPortValidateInterruptPriority+0x6a>
	}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	e000e3f0 	.word	0xe000e3f0
 8006f5c:	20001354 	.word	0x20001354
 8006f60:	e000ed0c 	.word	0xe000ed0c
 8006f64:	20001358 	.word	0x20001358

08006f68 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8006f70:	f7fe fba8 	bl	80056c4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f98f 	bl	8007298 <malloc>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f7e:	f7fe fbaf 	bl	80056e0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	if( pv )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d006      	beq.n	8006fa8 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8006f9a:	f7fe fb93 	bl	80056c4 <vTaskSuspendAll>
		{
			free( pv );
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f982 	bl	80072a8 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8006fa4:	f7fe fb9c 	bl	80056e0 <xTaskResumeAll>
	}
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <__NVIC_SetPendingIRQ>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	db0c      	blt.n	8006fdc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	f003 021f 	and.w	r2, r3, #31
 8006fc8:	4907      	ldr	r1, [pc, #28]	@ (8006fe8 <__NVIC_SetPendingIRQ+0x38>)
 8006fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8006fd6:	3340      	adds	r3, #64	@ 0x40
 8006fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	e000e100 	.word	0xe000e100

08006fec <rtg_init>:
void TaskB(void *params);
SemaphoreHandle_t xBinSem;


void rtg_init()
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af02      	add	r7, sp, #8
	log_init_function();
 8006ff2:	f000 f8b5 	bl	8007160 <log_init_function>
	xBinSem = xSemaphoreCreateBinary();
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	f7fd fa27 	bl	800444e <xQueueGenericCreate>
 8007000:	4603      	mov	r3, r0
 8007002:	4a0c      	ldr	r2, [pc, #48]	@ (8007034 <rtg_init+0x48>)
 8007004:	6013      	str	r3, [r2, #0]

	xTaskCreate(TaskB, "TaskB", 128, (void*)1, 2,NULL);  // Higher priority
 8007006:	2300      	movs	r3, #0
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	2302      	movs	r3, #2
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	2301      	movs	r3, #1
 8007010:	2280      	movs	r2, #128	@ 0x80
 8007012:	4909      	ldr	r1, [pc, #36]	@ (8007038 <rtg_init+0x4c>)
 8007014:	4809      	ldr	r0, [pc, #36]	@ (800703c <rtg_init+0x50>)
 8007016:	f7fe f8b3 	bl	8005180 <xTaskCreate>

	xTaskCreate(TaskA, "TaskA", 128, (void*)2, 1,NULL);
 800701a:	2300      	movs	r3, #0
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	2301      	movs	r3, #1
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	2302      	movs	r3, #2
 8007024:	2280      	movs	r2, #128	@ 0x80
 8007026:	4906      	ldr	r1, [pc, #24]	@ (8007040 <rtg_init+0x54>)
 8007028:	4806      	ldr	r0, [pc, #24]	@ (8007044 <rtg_init+0x58>)
 800702a:	f7fe f8a9 	bl	8005180 <xTaskCreate>

}
 800702e:	bf00      	nop
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	2000135c 	.word	0x2000135c
 8007038:	080075bc 	.word	0x080075bc
 800703c:	080070b9 	.word	0x080070b9
 8007040:	080075c4 	.word	0x080075c4
 8007044:	08007049 	.word	0x08007049

08007048 <TaskA>:


unsigned int taskIDs[] = {1,2};
void TaskA(void *argument)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	unsigned int value;
	unsigned int count = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]

	value = (unsigned int )argument;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60bb      	str	r3, [r7, #8]
	vTaskSetThreadLocalStoragePointer(NULL, 0, (void*)&taskIDs[value]);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4a12      	ldr	r2, [pc, #72]	@ (80070a8 <TaskA+0x60>)
 800705e:	4413      	add	r3, r2
 8007060:	461a      	mov	r2, r3
 8007062:	2100      	movs	r1, #0
 8007064:	2000      	movs	r0, #0
 8007066:	f7fe fec5 	bl	8005df4 <vTaskSetThreadLocalStoragePointer>
    while(1) {
		log_trace_function("task loop start",LOG_TASK_START,count);
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	2101      	movs	r1, #1
 800706e:	480f      	ldr	r0, [pc, #60]	@ (80070ac <TaskA+0x64>)
 8007070:	f000 f88c 	bl	800718c <log_trace_function>
        vTaskDelay(pdMS_TO_TICKS(5));
 8007074:	2005      	movs	r0, #5
 8007076:	f7fe fa6b 	bl	8005550 <vTaskDelay>
        if (count %5 ==0) {
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	4b0c      	ldr	r3, [pc, #48]	@ (80070b0 <TaskA+0x68>)
 800707e:	fba3 2301 	umull	r2, r3, r3, r1
 8007082:	089a      	lsrs	r2, r3, #2
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	1aca      	subs	r2, r1, r3
 800708c:	2a00      	cmp	r2, #0
 800708e:	d102      	bne.n	8007096 <TaskA+0x4e>
               NVIC_SetPendingIRQ(EXTI15_10_IRQn);  // Simulate button press
 8007090:	2028      	movs	r0, #40	@ 0x28
 8007092:	f7ff ff8d 	bl	8006fb0 <__NVIC_SetPendingIRQ>
        }

    	log_trace_function("task loop end",LOG_TASK_END,count++);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	60fa      	str	r2, [r7, #12]
 800709c:	461a      	mov	r2, r3
 800709e:	2102      	movs	r1, #2
 80070a0:	4804      	ldr	r0, [pc, #16]	@ (80070b4 <TaskA+0x6c>)
 80070a2:	f000 f873 	bl	800718c <log_trace_function>
		log_trace_function("task loop start",LOG_TASK_START,count);
 80070a6:	e7e0      	b.n	800706a <TaskA+0x22>
 80070a8:	20000010 	.word	0x20000010
 80070ac:	080075cc 	.word	0x080075cc
 80070b0:	cccccccd 	.word	0xcccccccd
 80070b4:	080075dc 	.word	0x080075dc

080070b8 <TaskB>:

    }
}
void TaskB(void *argument) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
	unsigned int value;
	unsigned int count = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

	value = (unsigned int )argument;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60bb      	str	r3, [r7, #8]
	vTaskSetThreadLocalStoragePointer(NULL, 0, (void*)&taskIDs[value]);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4a0e      	ldr	r2, [pc, #56]	@ (8007108 <TaskB+0x50>)
 80070ce:	4413      	add	r3, r2
 80070d0:	461a      	mov	r2, r3
 80070d2:	2100      	movs	r1, #0
 80070d4:	2000      	movs	r0, #0
 80070d6:	f7fe fe8d 	bl	8005df4 <vTaskSetThreadLocalStoragePointer>
    while(1) {
    	log_trace_function("task loop start",LOG_TASK_START,count);
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	2101      	movs	r1, #1
 80070de:	480b      	ldr	r0, [pc, #44]	@ (800710c <TaskB+0x54>)
 80070e0:	f000 f854 	bl	800718c <log_trace_function>
    	xSemaphoreTake(xBinSem, portMAX_DELAY);
 80070e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007110 <TaskB+0x58>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f04f 31ff 	mov.w	r1, #4294967295
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fd fd43 	bl	8004b78 <xQueueSemaphoreTake>
    	log_trace_function("task loop end",LOG_TASK_END,count++);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	60fa      	str	r2, [r7, #12]
 80070f8:	461a      	mov	r2, r3
 80070fa:	2102      	movs	r1, #2
 80070fc:	4805      	ldr	r0, [pc, #20]	@ (8007114 <TaskB+0x5c>)
 80070fe:	f000 f845 	bl	800718c <log_trace_function>
    	log_trace_function("task loop start",LOG_TASK_START,count);
 8007102:	bf00      	nop
 8007104:	e7e9      	b.n	80070da <TaskB+0x22>
 8007106:	bf00      	nop
 8007108:	20000010 	.word	0x20000010
 800710c:	080075cc 	.word	0x080075cc
 8007110:	2000135c 	.word	0x2000135c
 8007114:	080075dc 	.word	0x080075dc

08007118 <EXTI15_10_IRQHandler>:
    }
}
void EXTI15_10_IRQHandler(void) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800711e:	2300      	movs	r3, #0
 8007120:	607b      	str	r3, [r7, #4]

    log_trace_function("ISR Entry", LOG_ISR_ENTRY, 0);
 8007122:	2200      	movs	r2, #0
 8007124:	2109      	movs	r1, #9
 8007126:	480b      	ldr	r0, [pc, #44]	@ (8007154 <EXTI15_10_IRQHandler+0x3c>)
 8007128:	f000 f830 	bl	800718c <log_trace_function>

    xSemaphoreGiveFromISR(xBinSem, &xHigherPriorityTaskWoken);
 800712c:	4b0a      	ldr	r3, [pc, #40]	@ (8007158 <EXTI15_10_IRQHandler+0x40>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	1d3a      	adds	r2, r7, #4
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f7fd fb9e 	bl	8004876 <xQueueGiveFromISR>

    if (xHigherPriorityTaskWoken) {
       // portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    }
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);  // Clear interrupt
 800713a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800713e:	f7fa f981 	bl	8001444 <HAL_GPIO_EXTI_IRQHandler>
    log_trace_function("ISR EXIT", LOG_ISR_EXIT, 0);
 8007142:	2200      	movs	r2, #0
 8007144:	210a      	movs	r1, #10
 8007146:	4805      	ldr	r0, [pc, #20]	@ (800715c <EXTI15_10_IRQHandler+0x44>)
 8007148:	f000 f820 	bl	800718c <log_trace_function>

}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	080075ec 	.word	0x080075ec
 8007158:	2000135c 	.word	0x2000135c
 800715c:	080075f8 	.word	0x080075f8

08007160 <log_init_function>:
unsigned long log_index;
unsigned char log_mode;
unsigned char log_running = 1;

void log_init_function(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
	log_index = 0;
 8007164:	4b06      	ldr	r3, [pc, #24]	@ (8007180 <log_init_function+0x20>)
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]
	log_mode = LOG_MODE_ONESHOT;
 800716a:	4b06      	ldr	r3, [pc, #24]	@ (8007184 <log_init_function+0x24>)
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
	log_running = 1;
 8007170:	4b05      	ldr	r3, [pc, #20]	@ (8007188 <log_init_function+0x28>)
 8007172:	2201      	movs	r2, #1
 8007174:	701a      	strb	r2, [r3, #0]
}
 8007176:	bf00      	nop
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	20001b60 	.word	0x20001b60
 8007184:	20001b64 	.word	0x20001b64
 8007188:	20000018 	.word	0x20000018

0800718c <log_trace_function>:
int log_trace_function(char *fmt,unsigned char key,unsigned long payload)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	460b      	mov	r3, r1
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	72fb      	strb	r3, [r7, #11]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800719a:	f3ef 8310 	mrs	r3, PRIMASK
 800719e:	61bb      	str	r3, [r7, #24]
  return(result);
 80071a0:	69bb      	ldr	r3, [r7, #24]

    uint32_t primask = __get_PRIMASK();  // Save current interrupt state
 80071a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80071a4:	b672      	cpsid	i
}
 80071a6:	bf00      	nop
    __disable_irq();                     // Globally disable interrupts

	if(log_running) {
 80071a8:	4b30      	ldr	r3, [pc, #192]	@ (800726c <log_trace_function+0xe0>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d051      	beq.n	8007254 <log_trace_function+0xc8>
		log_buffer[log_index].key = key;
 80071b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007270 <log_trace_function+0xe4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	492f      	ldr	r1, [pc, #188]	@ (8007274 <log_trace_function+0xe8>)
 80071b6:	7afa      	ldrb	r2, [r7, #11]
 80071b8:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
		log_buffer[log_index].payload = payload;
 80071bc:	4b2c      	ldr	r3, [pc, #176]	@ (8007270 <log_trace_function+0xe4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007274 <log_trace_function+0xe8>)
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4413      	add	r3, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ca:	f3ef 8305 	mrs	r3, IPSR
 80071ce:	617b      	str	r3, [r7, #20]
  return(result);
 80071d0:	697b      	ldr	r3, [r7, #20]
		if (portCHECK_IF_IN_ISR()) {
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d012      	beq.n	80071fc <log_trace_function+0x70>
			log_buffer[log_index].who = LOG_IN_ISR;
 80071d6:	4b26      	ldr	r3, [pc, #152]	@ (8007270 <log_trace_function+0xe4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a26      	ldr	r2, [pc, #152]	@ (8007274 <log_trace_function+0xe8>)
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	4413      	add	r3, r2
 80071e0:	22ff      	movs	r2, #255	@ 0xff
 80071e2:	705a      	strb	r2, [r3, #1]
			log_buffer[log_index].tick = xTaskGetTickCountFromISR();
 80071e4:	f7fe fb3a 	bl	800585c <xTaskGetTickCountFromISR>
 80071e8:	4602      	mov	r2, r0
 80071ea:	4b21      	ldr	r3, [pc, #132]	@ (8007270 <log_trace_function+0xe4>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	b291      	uxth	r1, r2
 80071f0:	4a20      	ldr	r2, [pc, #128]	@ (8007274 <log_trace_function+0xe8>)
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	4413      	add	r3, r2
 80071f6:	460a      	mov	r2, r1
 80071f8:	805a      	strh	r2, [r3, #2]
 80071fa:	e017      	b.n	800722c <log_trace_function+0xa0>

		} else {
			log_buffer[log_index].who = *(unsigned char*)pvTaskGetThreadLocalStoragePointer(NULL, 0);
 80071fc:	2100      	movs	r1, #0
 80071fe:	2000      	movs	r0, #0
 8007200:	f7fe fe18 	bl	8005e34 <pvTaskGetThreadLocalStoragePointer>
 8007204:	4602      	mov	r2, r0
 8007206:	4b1a      	ldr	r3, [pc, #104]	@ (8007270 <log_trace_function+0xe4>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	7811      	ldrb	r1, [r2, #0]
 800720c:	4a19      	ldr	r2, [pc, #100]	@ (8007274 <log_trace_function+0xe8>)
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	4413      	add	r3, r2
 8007212:	460a      	mov	r2, r1
 8007214:	705a      	strb	r2, [r3, #1]
;
			log_buffer[log_index].tick = xTaskGetTickCount();
 8007216:	f7fe fb11 	bl	800583c <xTaskGetTickCount>
 800721a:	4602      	mov	r2, r0
 800721c:	4b14      	ldr	r3, [pc, #80]	@ (8007270 <log_trace_function+0xe4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	b291      	uxth	r1, r2
 8007222:	4a14      	ldr	r2, [pc, #80]	@ (8007274 <log_trace_function+0xe8>)
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	4413      	add	r3, r2
 8007228:	460a      	mov	r2, r1
 800722a:	805a      	strh	r2, [r3, #2]

		}
			log_index++;
 800722c:	4b10      	ldr	r3, [pc, #64]	@ (8007270 <log_trace_function+0xe4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	4a0f      	ldr	r2, [pc, #60]	@ (8007270 <log_trace_function+0xe4>)
 8007234:	6013      	str	r3, [r2, #0]
		if(log_index >= LOG_MAX_SIZE-1){
 8007236:	4b0e      	ldr	r3, [pc, #56]	@ (8007270 <log_trace_function+0xe4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2bfe      	cmp	r3, #254	@ 0xfe
 800723c:	d90a      	bls.n	8007254 <log_trace_function+0xc8>
			if(log_mode == LOG_MODE_ONESHOT) {
 800723e:	4b0e      	ldr	r3, [pc, #56]	@ (8007278 <log_trace_function+0xec>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d103      	bne.n	800724e <log_trace_function+0xc2>
				log_running = 0;
 8007246:	4b09      	ldr	r3, [pc, #36]	@ (800726c <log_trace_function+0xe0>)
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e002      	b.n	8007254 <log_trace_function+0xc8>
			} else {
				log_index = 0;
 800724e:	4b08      	ldr	r3, [pc, #32]	@ (8007270 <log_trace_function+0xe4>)
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f383 8810 	msr	PRIMASK, r3
}
 800725e:	bf00      	nop
			}
		}
	}
	__set_PRIMASK(primask);             // Restore previous interrupt state
	return 0;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000018 	.word	0x20000018
 8007270:	20001b60 	.word	0x20001b60
 8007274:	20001360 	.word	0x20001360
 8007278:	20001b64 	.word	0x20001b64

0800727c <vApplicationTickHook>:
void vApplicationTickHook(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
   log_trace_function("tick", LOG_KRRNEL_TICK_ISR,xTaskGetTickCount() );  // Or define a new key like LOG_TICK
 8007280:	f7fe fadc 	bl	800583c <xTaskGetTickCount>
 8007284:	4603      	mov	r3, r0
 8007286:	461a      	mov	r2, r3
 8007288:	2108      	movs	r1, #8
 800728a:	4802      	ldr	r0, [pc, #8]	@ (8007294 <vApplicationTickHook+0x18>)
 800728c:	f7ff ff7e 	bl	800718c <log_trace_function>
}
 8007290:	bf00      	nop
 8007292:	bd80      	pop	{r7, pc}
 8007294:	08007604 	.word	0x08007604

08007298 <malloc>:
 8007298:	4b02      	ldr	r3, [pc, #8]	@ (80072a4 <malloc+0xc>)
 800729a:	4601      	mov	r1, r0
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	f000 b82d 	b.w	80072fc <_malloc_r>
 80072a2:	bf00      	nop
 80072a4:	2000001c 	.word	0x2000001c

080072a8 <free>:
 80072a8:	4b02      	ldr	r3, [pc, #8]	@ (80072b4 <free+0xc>)
 80072aa:	4601      	mov	r1, r0
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	f000 b903 	b.w	80074b8 <_free_r>
 80072b2:	bf00      	nop
 80072b4:	2000001c 	.word	0x2000001c

080072b8 <sbrk_aligned>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	4e0f      	ldr	r6, [pc, #60]	@ (80072f8 <sbrk_aligned+0x40>)
 80072bc:	460c      	mov	r4, r1
 80072be:	6831      	ldr	r1, [r6, #0]
 80072c0:	4605      	mov	r5, r0
 80072c2:	b911      	cbnz	r1, 80072ca <sbrk_aligned+0x12>
 80072c4:	f000 f8ae 	bl	8007424 <_sbrk_r>
 80072c8:	6030      	str	r0, [r6, #0]
 80072ca:	4621      	mov	r1, r4
 80072cc:	4628      	mov	r0, r5
 80072ce:	f000 f8a9 	bl	8007424 <_sbrk_r>
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	d103      	bne.n	80072de <sbrk_aligned+0x26>
 80072d6:	f04f 34ff 	mov.w	r4, #4294967295
 80072da:	4620      	mov	r0, r4
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
 80072de:	1cc4      	adds	r4, r0, #3
 80072e0:	f024 0403 	bic.w	r4, r4, #3
 80072e4:	42a0      	cmp	r0, r4
 80072e6:	d0f8      	beq.n	80072da <sbrk_aligned+0x22>
 80072e8:	1a21      	subs	r1, r4, r0
 80072ea:	4628      	mov	r0, r5
 80072ec:	f000 f89a 	bl	8007424 <_sbrk_r>
 80072f0:	3001      	adds	r0, #1
 80072f2:	d1f2      	bne.n	80072da <sbrk_aligned+0x22>
 80072f4:	e7ef      	b.n	80072d6 <sbrk_aligned+0x1e>
 80072f6:	bf00      	nop
 80072f8:	20001b68 	.word	0x20001b68

080072fc <_malloc_r>:
 80072fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007300:	1ccd      	adds	r5, r1, #3
 8007302:	f025 0503 	bic.w	r5, r5, #3
 8007306:	3508      	adds	r5, #8
 8007308:	2d0c      	cmp	r5, #12
 800730a:	bf38      	it	cc
 800730c:	250c      	movcc	r5, #12
 800730e:	2d00      	cmp	r5, #0
 8007310:	4606      	mov	r6, r0
 8007312:	db01      	blt.n	8007318 <_malloc_r+0x1c>
 8007314:	42a9      	cmp	r1, r5
 8007316:	d904      	bls.n	8007322 <_malloc_r+0x26>
 8007318:	230c      	movs	r3, #12
 800731a:	6033      	str	r3, [r6, #0]
 800731c:	2000      	movs	r0, #0
 800731e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073f8 <_malloc_r+0xfc>
 8007326:	f000 f869 	bl	80073fc <__malloc_lock>
 800732a:	f8d8 3000 	ldr.w	r3, [r8]
 800732e:	461c      	mov	r4, r3
 8007330:	bb44      	cbnz	r4, 8007384 <_malloc_r+0x88>
 8007332:	4629      	mov	r1, r5
 8007334:	4630      	mov	r0, r6
 8007336:	f7ff ffbf 	bl	80072b8 <sbrk_aligned>
 800733a:	1c43      	adds	r3, r0, #1
 800733c:	4604      	mov	r4, r0
 800733e:	d158      	bne.n	80073f2 <_malloc_r+0xf6>
 8007340:	f8d8 4000 	ldr.w	r4, [r8]
 8007344:	4627      	mov	r7, r4
 8007346:	2f00      	cmp	r7, #0
 8007348:	d143      	bne.n	80073d2 <_malloc_r+0xd6>
 800734a:	2c00      	cmp	r4, #0
 800734c:	d04b      	beq.n	80073e6 <_malloc_r+0xea>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	4639      	mov	r1, r7
 8007352:	4630      	mov	r0, r6
 8007354:	eb04 0903 	add.w	r9, r4, r3
 8007358:	f000 f864 	bl	8007424 <_sbrk_r>
 800735c:	4581      	cmp	r9, r0
 800735e:	d142      	bne.n	80073e6 <_malloc_r+0xea>
 8007360:	6821      	ldr	r1, [r4, #0]
 8007362:	1a6d      	subs	r5, r5, r1
 8007364:	4629      	mov	r1, r5
 8007366:	4630      	mov	r0, r6
 8007368:	f7ff ffa6 	bl	80072b8 <sbrk_aligned>
 800736c:	3001      	adds	r0, #1
 800736e:	d03a      	beq.n	80073e6 <_malloc_r+0xea>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	442b      	add	r3, r5
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	f8d8 3000 	ldr.w	r3, [r8]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	bb62      	cbnz	r2, 80073d8 <_malloc_r+0xdc>
 800737e:	f8c8 7000 	str.w	r7, [r8]
 8007382:	e00f      	b.n	80073a4 <_malloc_r+0xa8>
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	1b52      	subs	r2, r2, r5
 8007388:	d420      	bmi.n	80073cc <_malloc_r+0xd0>
 800738a:	2a0b      	cmp	r2, #11
 800738c:	d917      	bls.n	80073be <_malloc_r+0xc2>
 800738e:	1961      	adds	r1, r4, r5
 8007390:	42a3      	cmp	r3, r4
 8007392:	6025      	str	r5, [r4, #0]
 8007394:	bf18      	it	ne
 8007396:	6059      	strne	r1, [r3, #4]
 8007398:	6863      	ldr	r3, [r4, #4]
 800739a:	bf08      	it	eq
 800739c:	f8c8 1000 	streq.w	r1, [r8]
 80073a0:	5162      	str	r2, [r4, r5]
 80073a2:	604b      	str	r3, [r1, #4]
 80073a4:	4630      	mov	r0, r6
 80073a6:	f000 f82f 	bl	8007408 <__malloc_unlock>
 80073aa:	f104 000b 	add.w	r0, r4, #11
 80073ae:	1d23      	adds	r3, r4, #4
 80073b0:	f020 0007 	bic.w	r0, r0, #7
 80073b4:	1ac2      	subs	r2, r0, r3
 80073b6:	bf1c      	itt	ne
 80073b8:	1a1b      	subne	r3, r3, r0
 80073ba:	50a3      	strne	r3, [r4, r2]
 80073bc:	e7af      	b.n	800731e <_malloc_r+0x22>
 80073be:	6862      	ldr	r2, [r4, #4]
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	bf0c      	ite	eq
 80073c4:	f8c8 2000 	streq.w	r2, [r8]
 80073c8:	605a      	strne	r2, [r3, #4]
 80073ca:	e7eb      	b.n	80073a4 <_malloc_r+0xa8>
 80073cc:	4623      	mov	r3, r4
 80073ce:	6864      	ldr	r4, [r4, #4]
 80073d0:	e7ae      	b.n	8007330 <_malloc_r+0x34>
 80073d2:	463c      	mov	r4, r7
 80073d4:	687f      	ldr	r7, [r7, #4]
 80073d6:	e7b6      	b.n	8007346 <_malloc_r+0x4a>
 80073d8:	461a      	mov	r2, r3
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	42a3      	cmp	r3, r4
 80073de:	d1fb      	bne.n	80073d8 <_malloc_r+0xdc>
 80073e0:	2300      	movs	r3, #0
 80073e2:	6053      	str	r3, [r2, #4]
 80073e4:	e7de      	b.n	80073a4 <_malloc_r+0xa8>
 80073e6:	230c      	movs	r3, #12
 80073e8:	6033      	str	r3, [r6, #0]
 80073ea:	4630      	mov	r0, r6
 80073ec:	f000 f80c 	bl	8007408 <__malloc_unlock>
 80073f0:	e794      	b.n	800731c <_malloc_r+0x20>
 80073f2:	6005      	str	r5, [r0, #0]
 80073f4:	e7d6      	b.n	80073a4 <_malloc_r+0xa8>
 80073f6:	bf00      	nop
 80073f8:	20001b6c 	.word	0x20001b6c

080073fc <__malloc_lock>:
 80073fc:	4801      	ldr	r0, [pc, #4]	@ (8007404 <__malloc_lock+0x8>)
 80073fe:	f000 b84b 	b.w	8007498 <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	20001cac 	.word	0x20001cac

08007408 <__malloc_unlock>:
 8007408:	4801      	ldr	r0, [pc, #4]	@ (8007410 <__malloc_unlock+0x8>)
 800740a:	f000 b846 	b.w	800749a <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	20001cac 	.word	0x20001cac

08007414 <memset>:
 8007414:	4402      	add	r2, r0
 8007416:	4603      	mov	r3, r0
 8007418:	4293      	cmp	r3, r2
 800741a:	d100      	bne.n	800741e <memset+0xa>
 800741c:	4770      	bx	lr
 800741e:	f803 1b01 	strb.w	r1, [r3], #1
 8007422:	e7f9      	b.n	8007418 <memset+0x4>

08007424 <_sbrk_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4d06      	ldr	r5, [pc, #24]	@ (8007440 <_sbrk_r+0x1c>)
 8007428:	2300      	movs	r3, #0
 800742a:	4604      	mov	r4, r0
 800742c:	4608      	mov	r0, r1
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	f7f9 fbac 	bl	8000b8c <_sbrk>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_sbrk_r+0x1a>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_sbrk_r+0x1a>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	20001ca8 	.word	0x20001ca8

08007444 <__errno>:
 8007444:	4b01      	ldr	r3, [pc, #4]	@ (800744c <__errno+0x8>)
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	2000001c 	.word	0x2000001c

08007450 <__libc_init_array>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4d0d      	ldr	r5, [pc, #52]	@ (8007488 <__libc_init_array+0x38>)
 8007454:	4c0d      	ldr	r4, [pc, #52]	@ (800748c <__libc_init_array+0x3c>)
 8007456:	1b64      	subs	r4, r4, r5
 8007458:	10a4      	asrs	r4, r4, #2
 800745a:	2600      	movs	r6, #0
 800745c:	42a6      	cmp	r6, r4
 800745e:	d109      	bne.n	8007474 <__libc_init_array+0x24>
 8007460:	4d0b      	ldr	r5, [pc, #44]	@ (8007490 <__libc_init_array+0x40>)
 8007462:	4c0c      	ldr	r4, [pc, #48]	@ (8007494 <__libc_init_array+0x44>)
 8007464:	f000 f872 	bl	800754c <_init>
 8007468:	1b64      	subs	r4, r4, r5
 800746a:	10a4      	asrs	r4, r4, #2
 800746c:	2600      	movs	r6, #0
 800746e:	42a6      	cmp	r6, r4
 8007470:	d105      	bne.n	800747e <__libc_init_array+0x2e>
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	f855 3b04 	ldr.w	r3, [r5], #4
 8007478:	4798      	blx	r3
 800747a:	3601      	adds	r6, #1
 800747c:	e7ee      	b.n	800745c <__libc_init_array+0xc>
 800747e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007482:	4798      	blx	r3
 8007484:	3601      	adds	r6, #1
 8007486:	e7f2      	b.n	800746e <__libc_init_array+0x1e>
 8007488:	08007650 	.word	0x08007650
 800748c:	08007650 	.word	0x08007650
 8007490:	08007650 	.word	0x08007650
 8007494:	08007654 	.word	0x08007654

08007498 <__retarget_lock_acquire_recursive>:
 8007498:	4770      	bx	lr

0800749a <__retarget_lock_release_recursive>:
 800749a:	4770      	bx	lr

0800749c <memcpy>:
 800749c:	440a      	add	r2, r1
 800749e:	4291      	cmp	r1, r2
 80074a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80074a4:	d100      	bne.n	80074a8 <memcpy+0xc>
 80074a6:	4770      	bx	lr
 80074a8:	b510      	push	{r4, lr}
 80074aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074b2:	4291      	cmp	r1, r2
 80074b4:	d1f9      	bne.n	80074aa <memcpy+0xe>
 80074b6:	bd10      	pop	{r4, pc}

080074b8 <_free_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4605      	mov	r5, r0
 80074bc:	2900      	cmp	r1, #0
 80074be:	d041      	beq.n	8007544 <_free_r+0x8c>
 80074c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c4:	1f0c      	subs	r4, r1, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bfb8      	it	lt
 80074ca:	18e4      	addlt	r4, r4, r3
 80074cc:	f7ff ff96 	bl	80073fc <__malloc_lock>
 80074d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007548 <_free_r+0x90>)
 80074d2:	6813      	ldr	r3, [r2, #0]
 80074d4:	b933      	cbnz	r3, 80074e4 <_free_r+0x2c>
 80074d6:	6063      	str	r3, [r4, #4]
 80074d8:	6014      	str	r4, [r2, #0]
 80074da:	4628      	mov	r0, r5
 80074dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e0:	f7ff bf92 	b.w	8007408 <__malloc_unlock>
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	d908      	bls.n	80074fa <_free_r+0x42>
 80074e8:	6820      	ldr	r0, [r4, #0]
 80074ea:	1821      	adds	r1, r4, r0
 80074ec:	428b      	cmp	r3, r1
 80074ee:	bf01      	itttt	eq
 80074f0:	6819      	ldreq	r1, [r3, #0]
 80074f2:	685b      	ldreq	r3, [r3, #4]
 80074f4:	1809      	addeq	r1, r1, r0
 80074f6:	6021      	streq	r1, [r4, #0]
 80074f8:	e7ed      	b.n	80074d6 <_free_r+0x1e>
 80074fa:	461a      	mov	r2, r3
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	b10b      	cbz	r3, 8007504 <_free_r+0x4c>
 8007500:	42a3      	cmp	r3, r4
 8007502:	d9fa      	bls.n	80074fa <_free_r+0x42>
 8007504:	6811      	ldr	r1, [r2, #0]
 8007506:	1850      	adds	r0, r2, r1
 8007508:	42a0      	cmp	r0, r4
 800750a:	d10b      	bne.n	8007524 <_free_r+0x6c>
 800750c:	6820      	ldr	r0, [r4, #0]
 800750e:	4401      	add	r1, r0
 8007510:	1850      	adds	r0, r2, r1
 8007512:	4283      	cmp	r3, r0
 8007514:	6011      	str	r1, [r2, #0]
 8007516:	d1e0      	bne.n	80074da <_free_r+0x22>
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	6053      	str	r3, [r2, #4]
 800751e:	4408      	add	r0, r1
 8007520:	6010      	str	r0, [r2, #0]
 8007522:	e7da      	b.n	80074da <_free_r+0x22>
 8007524:	d902      	bls.n	800752c <_free_r+0x74>
 8007526:	230c      	movs	r3, #12
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	e7d6      	b.n	80074da <_free_r+0x22>
 800752c:	6820      	ldr	r0, [r4, #0]
 800752e:	1821      	adds	r1, r4, r0
 8007530:	428b      	cmp	r3, r1
 8007532:	bf04      	itt	eq
 8007534:	6819      	ldreq	r1, [r3, #0]
 8007536:	685b      	ldreq	r3, [r3, #4]
 8007538:	6063      	str	r3, [r4, #4]
 800753a:	bf04      	itt	eq
 800753c:	1809      	addeq	r1, r1, r0
 800753e:	6021      	streq	r1, [r4, #0]
 8007540:	6054      	str	r4, [r2, #4]
 8007542:	e7ca      	b.n	80074da <_free_r+0x22>
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	bf00      	nop
 8007548:	20001b6c 	.word	0x20001b6c

0800754c <_init>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	bf00      	nop
 8007550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007552:	bc08      	pop	{r3}
 8007554:	469e      	mov	lr, r3
 8007556:	4770      	bx	lr

08007558 <_fini>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	bf00      	nop
 800755c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755e:	bc08      	pop	{r3}
 8007560:	469e      	mov	lr, r3
 8007562:	4770      	bx	lr
